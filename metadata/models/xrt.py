# Generated by command write_metadata_files version 1
from django.db import models

from .base_metadata import BaseMetadata

__all__s = ['Xrt']

class Xrt(BaseMetadata):
	'''Model for the metadata of dataset XRT'''
	
	class Meta(BaseMetadata.Meta):
		verbose_name = 'XRT metadata'
		verbose_name_plural = 'XRT metadata'
	
	achf_ver = models.IntegerField(verbose_name = 'ACHF_VER', help_text='AC Huffman table version', blank=True, null=True)
	aec_flg = models.TextField(verbose_name = 'AEC_FLG', help_text='Automatic Exposure Control; 1: Off, 2: On', blank=True, null=True)
	aec_rslt = models.IntegerField(verbose_name = 'AEC_RSLT', help_text='Result of AEC calculation used to determine exposure time; 0: Normal, 1: Underexposure, 2: Overexposure, 3: No feedback', blank=True, null=True)
	aec_tnum = models.IntegerField(verbose_name = 'AEC_TNUM', help_text='AEC table number; 0: Out of RB, 1: In RB', blank=True, null=True)
	bitc_ver = models.IntegerField(verbose_name = 'BITC_VER', help_text='Bit compression lookup table version', blank=True, null=True)
	bitcomp1 = models.IntegerField(verbose_name = 'BITCOMP1', help_text='Compression table keyword', blank=True, null=True)
	bitspp = models.FloatField(verbose_name = 'BITSPP', help_text='', blank=True, null=True)
	bytecnt = models.IntegerField(verbose_name = 'BYTECNT', help_text='', blank=True, null=True)
	cal_info = models.IntegerField(verbose_name = 'CAL_INFO', help_text='CCD image type; 0: Calibration image, 1: Observation image', blank=True, null=True)
	calimage = models.TextField(verbose_name = 'CALIMAGE', help_text='CCD readout port (from CAL INFO)', blank=True, null=True)
	caltype = models.IntegerField(verbose_name = 'CALTYPE', help_text='', blank=True, null=True)
	ccd_read = models.IntegerField(verbose_name = 'CCD_READ', help_text='CCD readout port; 0: right, 1: left', blank=True, null=True)
	ccd_temp = models.IntegerField(verbose_name = 'CCD_TEMP', help_text='CCD temperature raw', blank=True, null=True)
	ccd_tmpc = models.FloatField(verbose_name = 'CCD_TMPC', help_text='CCD temperature, derived from CCD TEMP', blank=True, null=True)
	cdelt1 = models.FloatField(verbose_name = 'CDELT1', help_text='Horizontal pixel size (PLATESCALE X SUMROW)', blank=True, null=True)
	cdelt2 = models.FloatField(verbose_name = 'CDELT2', help_text='Vertical pixel size (PLATESCALE X SUMCOL)', blank=True, null=True)
	chip_sum = models.IntegerField(verbose_name = 'CHIP_SUM', help_text='', blank=True, null=True)
	crlt_obs = models.FloatField(verbose_name = 'CRLT_OBS', help_text='', blank=True, null=True)
	crota1 = models.FloatField(verbose_name = 'CROTA1', help_text='Angle between x-axis of image (same as x-axis of CCD) and E-W axis of heliocentric coordinates (SAT ROT + INST ROT)', blank=True, null=True)
	crota2 = models.FloatField(verbose_name = 'CROTA2', help_text='Angle between y-axis of image and N-S axis of heliocentric coordinates (SAT ROT + INST ROT); CROTA1 and CROTA2 are identical for XRT', blank=True, null=True)
	crpix1 = models.FloatField(verbose_name = 'CRPIX1', help_text='Column number of Sun center pixel (sometimes negative)', blank=True, null=True)
	crpix2 = models.FloatField(verbose_name = 'CRPIX2', help_text='Row number of Sun center pixel (sometimes negative)', blank=True, null=True)
	crval1 = models.FloatField(verbose_name = 'CRVAL1', help_text='Number of arcseconds of the center of the sun from the reference position in the elevation direction (N-S); positive is to Solar North', blank=True, null=True)
	crval2 = models.FloatField(verbose_name = 'CRVAL2', help_text='Number of arcseconds of the center of the sun from the reference position in the elevation direction (N-S); positive is to Solar North', blank=True, null=True)
	ctime = models.DateTimeField(verbose_name = 'CTIME', help_text='Same value as DATE OBS, but in a different format', blank=True, null=True)
	ctype1 = models.TextField(verbose_name = 'CTYPE1', help_text='Type of units (label) of horizontal axis', blank=True, null=True)
	ctype2 = models.TextField(verbose_name = 'CTYPE2', help_text='Type of units (label) of vertical axis', blank=True, null=True)
	cunit1 = models.TextField(verbose_name = 'CUNIT1', help_text='Horizontal units', blank=True, null=True)
	cunit2 = models.TextField(verbose_name = 'CUNIT2', help_text='Vertical Units', blank=True, null=True)
	data_lev = models.IntegerField(verbose_name = 'DATA_LEV', help_text='Data Level; running xrt prep.pro will change 0 to 1', blank=True, null=True)
	datatype = models.TextField(verbose_name = 'DATATYPE', help_text='Science or engineering data; darks and flats are considered engineering data', blank=True, null=True)
	date = models.DateTimeField(verbose_name = 'DATE', help_text='Date and time of file creation', blank=True, null=True)
	date_obs = models.DateTimeField(verbose_name = 'DATE_OBS', help_text='UTC time when exposure began (\'T\' is character \'T\')', blank=True, null=True)
	date_rf0 = models.DateTimeField(verbose_name = 'DATE_RF0', help_text='Date and time of Level 0 reformatting', blank=True, null=True)
	date_rf1 = models.DateTimeField(verbose_name = 'DATE_RF1', help_text='', blank=True, null=True)
	dchf_ver = models.IntegerField(verbose_name = 'DCHF_VER', help_text='DC Huffman table version', blank=True, null=True)
	dsun_obs = models.FloatField(verbose_name = 'DSUN_OBS', help_text='', blank=True, null=True)
	e_etim = models.IntegerField(verbose_name = 'E_ETIM', help_text='', blank=True, null=True)
	e_etim_e = models.IntegerField(verbose_name = 'E_ETIM_E', help_text='', blank=True, null=True)
	e_etim_m = models.IntegerField(verbose_name = 'E_ETIM_M', help_text='', blank=True, null=True)
	e_fw1_p = models.DateTimeField(verbose_name = 'E_FW1_P', help_text='Filter Wheel 1 position', blank=True, null=True)
	e_fw1_po = models.IntegerField(verbose_name = 'E_FW1_PO', help_text='Filter Wheel 1 course position (internal diagnostic format)', blank=True, null=True)
	e_fw1_st = models.IntegerField(verbose_name = 'E_FW1_ST', help_text='Filter Wheel 1 status', blank=True, null=True)
	e_fw2_p = models.DateTimeField(verbose_name = 'E_FW2_P', help_text='Filter Wheel 2 position', blank=True, null=True)
	e_fw2_po = models.IntegerField(verbose_name = 'E_FW2_PO', help_text='Filter Wheel 2 course position (internal diagnostic format)', blank=True, null=True)
	e_fw2_st = models.IntegerField(verbose_name = 'E_FW2_ST', help_text='Filter Wheel 2 status', blank=True, null=True)
	e_lclock = models.IntegerField(verbose_name = 'E_LCLOCK', help_text='Time at which exposure command processing began, local clock, converted to microsecond', blank=True, null=True)
	e_sclock = models.BigIntegerField(verbose_name = 'E_SCLOCK', help_text='Spacecraft clock of most recent status request prior to arrival of exposure command', blank=True, null=True)
	e_sh_ccw = models.IntegerField(verbose_name = 'E_SH_CCW', help_text='Waiting counterclockwise exposure time', blank=True, null=True)
	e_sh_clo = models.IntegerField(verbose_name = 'E_SH_CLO', help_text='Time CCD EXPOSE and OPENOUT signals were lowered (low 24 bits), converted to microsecond', blank=True, null=True)
	e_sh_cw = models.IntegerField(verbose_name = 'E_SH_CW', help_text='Waiting clockwise exposure time', blank=True, null=True)
	e_sh_err = models.IntegerField(verbose_name = 'E_SH_ERR', help_text='0: No error, 1: Shutter command error', blank=True, null=True)
	e_sh_ope = models.IntegerField(verbose_name = 'E_SH_OPE', help_text='Time CCD EXPOSE and OPENOUT signals were raised (low 24 bits), converted to microsecond', blank=True, null=True)
	e_sh_pos = models.IntegerField(verbose_name = 'E_SH_POS', help_text='Shutter encoder position', blank=True, null=True)
	e_sh_wa = models.IntegerField(verbose_name = 'E_SH_WA', help_text='Waiting position A', blank=True, null=True)
	e_sh_wb = models.IntegerField(verbose_name = 'E_SH_WB', help_text='Waiting position B', blank=True, null=True)
	e_sh_wc = models.IntegerField(verbose_name = 'E_SH_WC', help_text='Waiting position C', blank=True, null=True)
	e_ttn = models.IntegerField(verbose_name = 'E_TTN', help_text='Rev. number of exposure table', blank=True, null=True)
	e_vlc = models.IntegerField(verbose_name = 'E_VLC', help_text='VLS closed microswitch; 0: Off (VLS not fully open), 1: On (VLS fully open)', blank=True, null=True)
	e_vlc_s = models.TextField(verbose_name = 'E_VLC_', help_text='State of VLS', blank=True, null=True)
	e_vlo = models.IntegerField(verbose_name = 'E_VLO', help_text='VLS open microswitch; 0: Off (VLS not fully open), 1: On (VLS fully open)', blank=True, null=True)
	e_vlo_s = models.TextField(verbose_name = 'E_VLO_', help_text='State of VLS', blank=True, null=True)
	ec_cd_m_s = models.TextField(verbose_name = 'EC_CD_M_', help_text='Cadence mode as name', blank=True, null=True)
	ec_cd_mo = models.IntegerField(verbose_name = 'EC_CD_MO', help_text='Cadence mode', blank=True, null=True)
	ec_einde = models.IntegerField(verbose_name = 'EC_EINDE', help_text='Exposure Index', blank=True, null=True)
	ec_fw1 = models.IntegerField(verbose_name = 'EC_FW1', help_text='Filter Wheel 1 position', blank=True, null=True)
	ec_fw1_s = models.TextField(verbose_name = 'EC_FW1_', help_text='Filter Wheel 1 position as name', blank=True, null=True)
	ec_fw2 = models.IntegerField(verbose_name = 'EC_FW2', help_text='Filter Wheel 2 position', blank=True, null=True)
	ec_fw2_s = models.TextField(verbose_name = 'EC_FW2_', help_text='Filter Wheel 2 position as name', blank=True, null=True)
	ec_id = models.IntegerField(verbose_name = 'EC_ID', help_text='Unique identiffer, \'main ID\'', blank=True, null=True)
	ec_imty_s = models.TextField(verbose_name = 'EC_IMTY_', help_text='Image type; a dark is taken with the shutter closed', blank=True, null=True)
	ec_imtyp = models.IntegerField(verbose_name = 'EC_IMTYP', help_text='Image type; 0: Normal, 1: Dark (closed shutter)', blank=True, null=True)
	ec_index = models.IntegerField(verbose_name = 'EC_INDEX', help_text='Redundant to EC EINDE; consider this keyword obsolete', blank=True, null=True)
	ec_vl = models.IntegerField(verbose_name = 'EC_VL', help_text='Visible light shutter during exposure; 0: Closed, 1: Open', blank=True, null=True)
	ec_vl_s = models.TextField(verbose_name = 'EC_VL_', help_text='Visible light shutter during exposure as name', blank=True, null=True)
	effport = models.TextField(verbose_name = 'EFFPORT', help_text='Rectified readout port', blank=True, null=True)
	exccdex = models.IntegerField(verbose_name = 'EXCCDEX', help_text='Duration of CCD EXPOSE in microsecond; this is the correct value to use for dark exposure times', blank=True, null=True)
	expmpas = models.DateTimeField(verbose_name = 'EXPMPAS', help_text='Single or multipass exposure', blank=True, null=True)
	exptime = models.FloatField(verbose_name = 'EXPTIME', help_text='Requested exposure time in seconds (calculated from EC_EINDE and exposure table)', blank=True, null=True)
	fileorig = models.TextField(verbose_name = 'FILEORIG', help_text='Original filename used by level 0 reformatter', blank=True, null=True)
	flflg = models.TextField(verbose_name = 'FLFLG', help_text='Indicates if flare flag set or not', blank=True, null=True)
	foc_pos = models.IntegerField(verbose_name = 'FOC_POS', help_text='Focus position', blank=True, null=True)
	fovx = models.FloatField(verbose_name = 'FOVX', help_text='Width of field of view x-axis; equivalent to NAXIS1 X CDELT1', blank=True, null=True)
	fovy = models.FloatField(verbose_name = 'FOVY', help_text='Width of field of view y-axis; equivalent to NAXIS2 X CDELT2', blank=True, null=True)
	hktsync = models.IntegerField(verbose_name = 'HKTSYNC', help_text='True if fields derived from housekeeping data have been updated. (That is, they are not missing from the database.) Default is false.', blank=True, null=True)
	hlz = models.TextField(verbose_name = 'HLZ', help_text='Indicates whether Hinode is in or out of Hight Latitude Zone region', blank=True, null=True)
	img_mode = models.IntegerField(verbose_name = 'IMG_MODE', help_text='Image mode (source of exposure trigger); 1: Table and manual, 2: Automatic Region Selection Patrol, 3: Flare Detection Patrol', blank=True, null=True)
	imgcomp1 = models.IntegerField(verbose_name = 'IMGCOMP1', help_text='Compression table keyword', blank=True, null=True)
	inst_rot = models.FloatField(verbose_name = 'INST_ROT', help_text='Difference between spacecraft y-axis and image y-axis', blank=True, null=True)
	instrume = models.TextField(verbose_name = 'INSTRUME', help_text='Name of the instrument; reformatter only retrieves XRT records', blank=True, null=True)
	join_sb = models.TextField(verbose_name = 'JOIN_SB', help_text='Joint observation; E=EIS, S=SOT, X=XRT', blank=True, null=True)
	jop_id = models.IntegerField(verbose_name = 'JOP_ID', help_text='Identier of JOP', blank=True, null=True)
	main_cnt = models.IntegerField(verbose_name = 'MAIN_CNT', help_text='OT number of times to repeat main loop', blank=True, null=True)
	main_pos = models.IntegerField(verbose_name = 'MAIN_POS', help_text='OT main-routine position', blank=True, null=True)
	main_rpt = models.IntegerField(verbose_name = 'MAIN_RPT', help_text='OT current main-routine iteration', blank=True, null=True)
	mdp_clk = models.BigIntegerField(verbose_name = 'MDP_CLK', help_text='MDP  clock  in  units  of  1/512th   seconds;  same  as E SCLOCK', blank=True, null=True)
	naxis = models.IntegerField(verbose_name = 'NAXIS', help_text='Number of axes in the image', blank=True, null=True)
	naxis1 = models.IntegerField(verbose_name = 'NAXIS1', help_text='Full image size in x', blank=True, null=True)
	naxis2 = models.IntegerField(verbose_name = 'NAXIS2', help_text='Full image size in y', blank=True, null=True)
	noaa_num = models.IntegerField(verbose_name = 'NOAA_NUM', help_text='AR Number as assigned by NOAA', blank=True, null=True)
	num_pcks = models.IntegerField(verbose_name = 'NUM_PCKS', help_text='Data packet keyword', blank=True, null=True)
	obs_dec = models.TextField(verbose_name = 'OBS_DEC', help_text='A few sentences describing the properties of the obser- vation.', blank=True, null=True)
	obs_mode = models.TextField(verbose_name = 'OBS_MODE', help_text='', blank=True, null=True)
	obs_num = models.IntegerField(verbose_name = 'OBS_NUM', help_text='Equal to OBS ID', blank=True, null=True)
	observer = models.TextField(verbose_name = 'OBSERVER', help_text='Name(s) of Chief Observer', blank=True, null=True)
	obstitle = models.TextField(verbose_name = 'OBSTITLE', help_text='Title of observation', blank=True, null=True)
	obt_end = models.BigIntegerField(verbose_name = 'OBT_END', help_text='Spacecraft clock time when CCD EXPOSE was lowered; this is E SH CLO converted to spacecraft clock time', blank=True, null=True)
	obt_time = models.BigIntegerField(verbose_name = 'OBT_TIME', help_text='Spacecraft clock time when CCD EXPOSE was raised; this is E SH OPE converted to spacecraft clock time', blank=True, null=True)
	orig_rf0 = models.TextField(verbose_name = 'ORIG_RF0', help_text='Where the level 0 file was created', blank=True, null=True)
	orig_rf1 = models.DateTimeField(verbose_name = 'ORIG_RF1', help_text='', blank=True, null=True)
	origin = models.TextField(verbose_name = 'ORIGIN', help_text='Origin of the Chief Observer', blank=True, null=True)
	p1col = models.IntegerField(verbose_name = 'P1COL', help_text='y-coordinate of beginning, or lower left hand corner, pixel in image FOV; same as RPOS COL', blank=True, null=True)
	p1row = models.IntegerField(verbose_name = 'P1ROW', help_text='x-coordinate of beginning, or lower left hand corner, pixel in image FOV; same as RPOS ROW', blank=True, null=True)
	p2col = models.IntegerField(verbose_name = 'P2COL', help_text='y-coordinate of ending, or upper right hand corner, pixel in image FOV; same as RPOS COL + RSIZ COL - 1', blank=True, null=True)
	p2row = models.IntegerField(verbose_name = 'P2ROW', help_text='x-coordinate of ending, or upper right hand corner, pixel in image FOV; same as RPOS ROW + RSIZ ROW - 1', blank=True, null=True)
	parm_ver = models.IntegerField(verbose_name = 'PARM_VER', help_text='OT parameter table version number', blank=True, null=True)
	pck_sn0 = models.IntegerField(verbose_name = 'PCK_SN0', help_text='Data packet keyword', blank=True, null=True)
	pck_sn1 = models.IntegerField(verbose_name = 'PCK_SN1', help_text='Data packet keyword', blank=True, null=True)
	pixcnt = models.IntegerField(verbose_name = 'PIXCNT', help_text='', blank=True, null=True)
	planner = models.TextField(verbose_name = 'PLANNER', help_text='Name(s) of Chief Planner', blank=True, null=True)
	platescl = models.FloatField(verbose_name = 'PLATESCL', help_text='Platescale, in units of arcseconds per pixel', blank=True, null=True)
	pos_col = models.IntegerField(verbose_name = 'POS_COL', help_text='CCD column number of start of image (original value multiplied by 8 to get number of pixels)', blank=True, null=True)
	pos_row = models.IntegerField(verbose_name = 'POS_ROW', help_text='CCD row number of start of image (original value mul- tiplied by 8 to get number of pixels)', blank=True, null=True)
	prog_no = models.IntegerField(verbose_name = 'PROG_NO', help_text='OT program number', blank=True, null=True)
	prog_ver = models.IntegerField(verbose_name = 'PROG_VER', help_text='MDP observation table program version number', blank=True, null=True)
	qtab_ver = models.IntegerField(verbose_name = 'QTAB_VER', help_text='Quantization table version', blank=True, null=True)
	qtable1 = models.IntegerField(verbose_name = 'QTABLE1', help_text='Compression table keyword', blank=True, null=True)
	readport = models.TextField(verbose_name = 'READPORT', help_text='CCD readout port', blank=True, null=True)
	rectify = models.IntegerField(verbose_name = 'RECTIFY', help_text='Status of rectification to put solar south-east corner at the start of the CCD image', blank=True, null=True)
	roi_h_si = models.IntegerField(verbose_name = 'ROI_H_SI', help_text='ROI horizontal size; 1: 64, 2: 128, 3: 192, 4: 256, 6: 384, 8: 512, 12: 768, 16: 1024, 24: 1540, 32: 2048; (original value multiplied by 64 to get number of pixels)', blank=True, null=True)
	roi_v_si = models.IntegerField(verbose_name = 'ROI_V_SI', help_text='ROI vertical size; 1: 64, 2: 128, 3: 192, 4: 256, 6: 384, 8: 512, 12: 768, 16: 1024, 24: 1540, 32: 2048; (original value multiplied by 64 to get number of pixels)', blank=True, null=True)
	rpos_col = models.IntegerField(verbose_name = 'RPOS_COL', help_text='The rectified coordinate, equivalent to POS COL, as though the image had been read out with this coordinate.  If READPORT=R, RPOS COL=POS COL; otherwise RPOS CPOS COL.', blank=True, null=True)
	rpos_row = models.IntegerField(verbose_name = 'RPOS_ROW', help_text='Rectified POS ROW. Always the same as POS ROW.', blank=True, null=True)
	rsiz_col = models.IntegerField(verbose_name = 'RSIZ_COL', help_text='Rectified SIZ COL. Always the same as SIZ COL.', blank=True, null=True)
	rsiz_row = models.IntegerField(verbose_name = 'RSIZ_ROW', help_text='Rectified SIZ ROW. Always the same as SIZ ROW.', blank=True, null=True)
	rsun_obs = models.FloatField(verbose_name = 'RSUN_OBS', help_text='', blank=True, null=True)
	rsun_ref = models.FloatField(verbose_name = 'RSUN_REF', help_text='', blank=True, null=True)
	s_dat_id = models.IntegerField(verbose_name = 'S_DAT_ID', help_text='Type of status packet this record was created from: 0: Not used, 1: Normal status, 2: Normal and extended status, 3: Normal status and memory, 4: Not used, 5: Standard HDR only, 6: Extended status, 7: Memory', blank=True, null=True)
	s_dat_m = models.IntegerField(verbose_name = 'S_DAT_M', help_text='0: Transfer to Kagoshima Space Center (KSC) and Sagamihara Satellite Operation Center (SSOC); 1: Mon- itor only at KSC', blank=True, null=True)
	s_instru = models.IntegerField(verbose_name = 'S_INSTRU', help_text='Instrument number', blank=True, null=True)
	s_sp_siz = models.IntegerField(verbose_name = 'S_SP_SIZ', help_text='Status packet size; maximum value is 609, including header.', blank=True, null=True)
	saa = models.TextField(verbose_name = 'SAA', help_text='Indicates whether Hinode is in or out of a South Atlantic Anomaly region', blank=True, null=True)
	sat_rot = models.FloatField(verbose_name = 'SAT_ROT', help_text='Difference between Solar north and y-axis of the satellite', blank=True, null=True)
	satellit = models.IntegerField(verbose_name = 'SATELLIT', help_text='Satellite number', blank=True, null=True)
	sc_attx = models.FloatField(verbose_name = 'SC_ATTX', help_text='Spacecraft attitude in longitude', blank=True, null=True)
	sc_atty = models.FloatField(verbose_name = 'SC_ATTY', help_text='Spacecraft attitude in latitude', blank=True, null=True)
	sci_obj = models.DateTimeField(verbose_name = 'SCI_OBJ', help_text='Up to 5 target phenomena selected from list.', blank=True, null=True)
	sci_obs = models.DateTimeField(verbose_name = 'SCI_OBS', help_text='Target phenomena.', blank=True, null=True)
	seqn_cnt = models.IntegerField(verbose_name = 'SEQN_CNT', help_text='OT current sequence table repeat count', blank=True, null=True)
	seqn_no = models.IntegerField(verbose_name = 'SEQN_NO', help_text='OT sequence table number', blank=True, null=True)
	seqn_pos = models.IntegerField(verbose_name = 'SEQN_POS', help_text='OT sequence table position', blank=True, null=True)
	seqn_rpt = models.IntegerField(verbose_name = 'SEQN_RPT', help_text='OT sequence table repeat count', blank=True, null=True)
	seqn_ver = models.IntegerField(verbose_name = 'SEQN_VER', help_text='OT sequence table version number', blank=True, null=True)
	siz_col = models.IntegerField(verbose_name = 'SIZ_COL', help_text='Horizontal size of ROI, derived from above; value is 0 if ROI H SIZE is reserved', blank=True, null=True)
	siz_row = models.IntegerField(verbose_name = 'SIZ_ROW', help_text='Vertical size of ROI, derived from above; value is 0 if ROI V SIZE is reserved', blank=True, null=True)
	solar_b0 = models.FloatField(verbose_name = 'SOLAR_B0', help_text='', blank=True, null=True)
	subr_cnt = models.IntegerField(verbose_name = 'SUBR_CNT', help_text='OT sequential number of this subroutine in the main rou- tine', blank=True, null=True)
	subr_no = models.IntegerField(verbose_name = 'SUBR_NO', help_text='OT subroutine number being executed', blank=True, null=True)
	subr_pos = models.IntegerField(verbose_name = 'SUBR_POS', help_text='OT loop count for current subroutine', blank=True, null=True)
	subr_rpt = models.IntegerField(verbose_name = 'SUBR_RPT', help_text='OT number of times current subroutine is repeated', blank=True, null=True)
	target = models.TextField(verbose_name = 'TARGET', help_text='Indicates the observation region. Flare site used when flare flag is set. Source of information observation planning database, or telemetry if flare flag is set.', blank=True, null=True)
	telescop = models.TextField(verbose_name = 'TELESCOP', help_text='', blank=True, null=True)
	time_obs = models.DateTimeField(verbose_name = 'TIME-OBS', help_text='Same value as DATE OBS, but in a different format', blank=True, null=True)
	timesys = models.TextField(verbose_name = 'TIMESYS', help_text='Time system of file header', blank=True, null=True)
	tohbans = models.TextField(verbose_name = 'TOHBANS', help_text='Name(s) of Tohbans', blank=True, null=True)
	tr_mode = models.TextField(verbose_name = 'TR_MODE', help_text='Tracking mode', blank=True, null=True)
	ver_rf0 = models.TextField(verbose_name = 'VER_RF0', help_text='Version of Level 0 reformatter', blank=True, null=True)
	ver_rf1 = models.TextField(verbose_name = 'VER_RF1', help_text='', blank=True, null=True)
	xcen = models.FloatField(verbose_name = 'XCEN', help_text='X-coordinate of center of field of view', blank=True, null=True)
	xscale = models.FloatField(verbose_name = 'XSCALE', help_text='Same as PLATESCL', blank=True, null=True)
	ycen = models.FloatField(verbose_name = 'YCEN', help_text='Filter Wheel 1 course position (internal diagnostic format)', blank=True, null=True)
	yscale = models.FloatField(verbose_name = 'YSCALE', help_text='Same as PLATESCL', blank=True, null=True)
