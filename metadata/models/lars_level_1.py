# Generated by command write_metadata_files version 1
from django.db import models

from .base_metadata import BaseMetadata

__all__ = ['LarsLevel1']

class LarsLevel1(BaseMetadata):
	'''Model for the metadata of dataset LARS level 1'''
	
	class Meta(BaseMetadata.Meta):
		verbose_name = 'LARS level 1 metadata'
		verbose_name_plural = 'LARS level 1 metadata'
	
	access_estsize = models.BigIntegerField(verbose_name = 'access_estsize', help_text='Estimated file size in kbyte.', blank=True, null=True)
	access_format = models.TextField(verbose_name = 'access_format', help_text='File format type (RFC 6838 Media Type a.k.a. MIME type)', blank=True, null=True)
	access_url = models.TextField(verbose_name = 'access_url', help_text='URL of the data file, case sensitive. If present, then access_format and access_estsize are mandatory.', blank=True, null=True)
	bib_reference = models.TextField(verbose_name = 'bib_reference', help_text='Bibcode or DOI preferred if available, or other bibliographic identifier or URL', blank=True, null=True)
	c1_resol_max = models.FloatField(verbose_name = 'c1_resol_max', help_text='Resolution in the first coordinate, upper limit', blank=True, null=True)
	c1_resol_min = models.FloatField(verbose_name = 'c1_resol_min', help_text='Resolution in the first coordinate, lower limit.', blank=True, null=True)
	c1max = models.FloatField(verbose_name = 'c1max', help_text='Longitude on body, upper limit', blank=True, null=True)
	c1min = models.FloatField(verbose_name = 'c1min', help_text='Longitude on body, lower limit.', blank=True, null=True)
	c2_resol_max = models.FloatField(verbose_name = 'c2_resol_max', help_text='Resolution in the second coordinate, upper limit', blank=True, null=True)
	c2_resol_min = models.FloatField(verbose_name = 'c2_resol_min', help_text='Resolution in the second coordinate, lower limit.', blank=True, null=True)
	c2max = models.FloatField(verbose_name = 'c2max', help_text='Latitude on body, upper limit', blank=True, null=True)
	c2min = models.FloatField(verbose_name = 'c2min', help_text='Latitude on body, lower limit.', blank=True, null=True)
	c3_resol_max = models.FloatField(verbose_name = 'c3_resol_max', help_text='Resolution in the third coordinate, upper limit', blank=True, null=True)
	c3_resol_min = models.FloatField(verbose_name = 'c3_resol_min', help_text='Resolution in the third coordinate, lower limit.', blank=True, null=True)
	c3max = models.FloatField(verbose_name = 'c3max', help_text='Altitude from reference surface, upper limit', blank=True, null=True)
	c3min = models.FloatField(verbose_name = 'c3min', help_text='Altitude from reference surface, lower limit.', blank=True, null=True)
	creation_date = models.DateTimeField(verbose_name = 'creation_date', help_text='Date of first entry of this granule', blank=True, null=True)
	dataproduct_type = models.TextField(verbose_name = 'dataproduct_type', help_text='The high-level organization of the data product, from a controlled vocabulary (e.g., \'im\' for image, sp for spectrum). Multiple terms may be used, separated by # characters.', blank=True, null=True)
	emergence_max = models.FloatField(verbose_name = 'emergence_max', help_text='Emergence angle during data acquisition, upper limit', blank=True, null=True)
	emergence_min = models.FloatField(verbose_name = 'emergence_min', help_text='Emergence angle during data acquisition, lower limit.', blank=True, null=True)
	file_name = models.TextField(verbose_name = 'file_name', help_text='Name of the data file only, case sensitive', blank=True, null=True)
	granule_gid = models.TextField(verbose_name = 'granule_gid', help_text='Common to granules of same type (e.g. same map projection, or geometry data products). Can be alphanumeric.', blank=True, null=True)
	granule_uid = models.TextField(verbose_name = 'granule_uid', help_text='Internal table row index, which must be unique within the table. Can be alphanumeric.', blank=True, null=True)
	incidence_max = models.FloatField(verbose_name = 'incidence_max', help_text='Incidence angle (solar zenithal angle) during data acquisition, upper limit', blank=True, null=True)
	incidence_min = models.FloatField(verbose_name = 'incidence_min', help_text='Incidence angle (solar zenithal angle) during data acquisition, lower limit.', blank=True, null=True)
	instrument_host_name = models.TextField(verbose_name = 'instrument_host_name', help_text='Standard name of the observatory or spacecraft', blank=True, null=True)
	instrument_name = models.TextField(verbose_name = 'instrument_name', help_text='Standard name of instrument', blank=True, null=True)
	measurement_type = models.TextField(verbose_name = 'measurement_type', help_text='UCD(s) defining the data, with multiple entries separated by hash (#) characters.', blank=True, null=True)
	modification_date = models.DateTimeField(verbose_name = 'modification_date', help_text='Date of last modification (used to handle mirroring)', blank=True, null=True)
	obs_id = models.TextField(verbose_name = 'obs_id', help_text='Associates granules derived from the same data (e.g. various representations/processing levels). Can be alphanumeric, may be the ID of original observation.', blank=True, null=True)
	phase_max = models.FloatField(verbose_name = 'phase_max', help_text='Phase angle during data acquisition, upper limit', blank=True, null=True)
	phase_min = models.FloatField(verbose_name = 'phase_min', help_text='Phase angle during data acquisition, lower limit.', blank=True, null=True)
	processing_level = models.BigIntegerField(verbose_name = 'processing_level', help_text='Dataset-related encoding, or simplified CODMAC calibration level', blank=True, null=True)
	publisher = models.TextField(verbose_name = 'publisher', help_text='A short string identifying the entity running the data service used', blank=True, null=True)
	release_date = models.DateTimeField(verbose_name = 'release_date', help_text='Start of public access period', blank=True, null=True)
	s_region = models.TextField(verbose_name = 's_region', help_text='ObsCore-like footprint, valid for celestial, spherical, or body-fixed frames', blank=True, null=True)
	service_title = models.TextField(verbose_name = 'service_title', help_text='Title of resource (an acronym really, will be used to handle multiservice results)', blank=True, null=True)
	spatial_coordinate_description = models.TextField(verbose_name = 'spatial_coordinate_description', help_text='ID or specific coordinate system and version', blank=True, null=True)
	spatial_frame_type = models.TextField(verbose_name = 'spatial_frame_type', help_text='Flavor of coordinate system, defines the nature of coordinates. From a controlled vocabulary, where \'none\' means undefined.', blank=True, null=True)
	spatial_origin = models.TextField(verbose_name = 'spatial_origin', help_text='Defines the frame origin', blank=True, null=True)
	spectral_range_max = models.FloatField(verbose_name = 'spectral_range_max', help_text='Spectral range (frequency), upper limit', blank=True, null=True)
	spectral_range_min = models.FloatField(verbose_name = 'spectral_range_min', help_text='Spectral range (frequency), lower limit.', blank=True, null=True)
	spectral_resolution_max = models.FloatField(verbose_name = 'spectral_resolution_max', help_text='Spectral resolution, upper limit', blank=True, null=True)
	spectral_resolution_min = models.FloatField(verbose_name = 'spectral_resolution_min', help_text='Spectral resolution, lower limit.', blank=True, null=True)
	spectral_sampling_step_max = models.FloatField(verbose_name = 'spectral_sampling_step_max', help_text='Spectral sampling step, upper limit', blank=True, null=True)
	spectral_sampling_step_min = models.FloatField(verbose_name = 'spectral_sampling_step_min', help_text='Spectral sampling step, lower limit.', blank=True, null=True)
	target_class = models.TextField(verbose_name = 'target_class', help_text='Type of target, from a controlled vocabulary.', blank=True, null=True)
	target_name = models.TextField(verbose_name = 'target_name', help_text='Standard IAU name of target (from a list related to target class), case sensitive', blank=True, null=True)
	thumbnail_url = models.TextField(verbose_name = 'thumbnail_url', help_text='URL of a thumbnail image with predefined size (png ~200 pix, for use in a client only)', blank=True, null=True)
	time_exp_max = models.FloatField(verbose_name = 'time_exp_max', help_text='Integration time of the measurement, upper limit', blank=True, null=True)
	time_exp_min = models.FloatField(verbose_name = 'time_exp_min', help_text='Integration time of the measurement, lower limit.', blank=True, null=True)
	time_max = models.FloatField(verbose_name = 'time_max', help_text='Acquisition stop time (in JD), as UTC at time_refposition', blank=True, null=True)
	time_min = models.FloatField(verbose_name = 'time_min', help_text='Acquisition start time (in JD), as UTC at time_refposition', blank=True, null=True)
	time_sampling_step_max = models.FloatField(verbose_name = 'time_sampling_step_max', help_text='Sampling time for measurements of dynamical phenomena, upper limit', blank=True, null=True)
	time_sampling_step_min = models.FloatField(verbose_name = 'time_sampling_step_min', help_text='Sampling time for measurements of dynamical phenomena, lower limit.', blank=True, null=True)
	time_scale = models.TextField(verbose_name = 'time_scale', help_text='Defaults to UTC in data services; takes values from http://www.ivoa.net/rdf/time_scale otherwise', blank=True, null=True)
