from django.db import models

from .base import BaseMetadata

class SwapLev1(BaseMetadata):
	artefx = models.TextField('ARTEFX', help_text='(off,on,cosmic rays) on-board artefact removal', blank=True, null=True)
	bscale = models.FloatField('BSCALE', help_text='ratio of physical to array value at 0 offset', blank=True, null=True)
	bunit = models.TextField('BUNIT', help_text='unit of physical value', blank=True, null=True)
	bzero = models.FloatField('BZERO', help_text='physical value for the array value 0', blank=True, null=True)
	cap_mode = models.TextField('CAP_MODE', help_text='(DS,CDS) capture mode', blank=True, null=True)
	cd1_1 = models.FloatField('CD1_1', help_text='WCS coordinate description matrix', blank=True, null=True)
	cd1_2 = models.FloatField('CD1_2', help_text='WCS coordinate description matrix', blank=True, null=True)
	cd2_1 = models.FloatField('CD2_1', help_text='WCS coordinate description matrix', blank=True, null=True)
	cd2_2 = models.FloatField('CD2_2', help_text='WCS coordinate description matrix', blank=True, null=True)
	cdelt1 = models.FloatField('CDELT1', help_text='average pixel scale along axis 1', blank=True, null=True)
	cdelt2 = models.FloatField('CDELT2', help_text='average pixel scale along axis 2', blank=True, null=True)
	compress = models.TextField('COMPRESS', help_text='(off,lzw,jpeg) on-board compression algorithm', blank=True, null=True)
	creator = models.TextField('CREATOR', help_text='FITS creation software', blank=True, null=True)
	crota1 = models.FloatField('CROTA1', help_text='axis 1 to WCS rotation angle', blank=True, null=True)
	crota2 = models.FloatField('CROTA2', help_text='axis 2 to WCS rotation angle', blank=True, null=True)
	crpix1 = models.FloatField('CRPIX1', help_text='reference point axis 1', blank=True, null=True)
	crpix2 = models.FloatField('CRPIX2', help_text='reference point axis 2', blank=True, null=True)
	crval1 = models.FloatField('CRVAL1', help_text='reference point WCS axis X', blank=True, null=True)
	crval2 = models.FloatField('CRVAL2', help_text='reference point WCS axis Y', blank=True, null=True)
	ctype1 = models.TextField('CTYPE1', help_text='WCS axis X', blank=True, null=True)
	ctype2 = models.TextField('CTYPE2', help_text='WCS axis Y', blank=True, null=True)
	cunit1 = models.TextField('CUNIT1', help_text='WCS axis X units', blank=True, null=True)
	cunit2 = models.TextField('CUNIT2', help_text='WCS axis Y units', blank=True, null=True)
	datamax = models.FloatField('DATAMAX', help_text='maximum valid physical value', blank=True, null=True)
	datamin = models.FloatField('DATAMIN', help_text='minimum valid physical value', blank=True, null=True)
	date = models.DateTimeField('DATE', help_text='UTC time of FITS file creation', blank=True, null=True)
	date_obs = models.DateTimeField('DATE-OBS', help_text='UTC time of observation', blank=True, null=True)
	detector = models.TextField('DETECTOR', help_text='HAS CMOS detector 1024x1024 pixels', blank=True, null=True)
	dsun_obs = models.FloatField('DSUN_OBS', help_text='s/c distance from Sun', blank=True, null=True)
	dtplar1 = models.FloatField('DTPLAR1', help_text='predicted time to prev large angle rotation', blank=True, null=True)
	dtplar2 = models.FloatField('DTPLAR2', help_text='predicted time to next large angle rotation', blank=True, null=True)
	eacqtime = models.FloatField('EACQTIME', help_text='end   acquisition time', blank=True, null=True)
	exptime = models.FloatField('EXPTIME', help_text='commanded exposure time', blank=True, null=True)
	filename = models.TextField('FILENAME', help_text='FITS filename', blank=True, null=True)
	file_raw = models.TextField('FILE_RAW', help_text='raw telemetry filename', blank=True, null=True)
	file_tar = models.TextField('FILE_TAR', help_text='raw telemetry package', blank=True, null=True)
	file_tmr = models.TextField('FILE_TMR', help_text='SWTMR filename', blank=True, null=True)
	filter = models.TextField('FILTER', help_text='Aluminum filter', blank=True, null=True)
	firstcol = models.IntegerField('FIRSTCOL', help_text='first read-out detector column', blank=True, null=True)
	firstrow = models.IntegerField('FIRSTROW', help_text='first read-out detector row', blank=True, null=True)
	geod_alt = models.FloatField('GEOD_ALT', help_text='s/c WGS84 altitude', blank=True, null=True)
	geod_lat = models.FloatField('GEOD_LAT', help_text='s/c sub-point geodetic latitude', blank=True, null=True)
	geod_lon = models.FloatField('GEOD_LON', help_text='s/c sub-point longitude', blank=True, null=True)
	gsex_obs = models.FloatField('GSEX_OBS', help_text='s/c Geocentric   Solar Ecliptic X', blank=True, null=True)
	gsey_obs = models.FloatField('GSEY_OBS', help_text='s/c Geocentric   Solar Ecliptic Y', blank=True, null=True)
	gsez_obs = models.FloatField('GSEZ_OBS', help_text='s/c Geocentric   Solar Ecliptic Z', blank=True, null=True)
	hasblack = models.IntegerField('HASBLACK', help_text='HAS detector black  level', blank=True, null=True)
	hasoffst = models.IntegerField('HASOFFST', help_text='HAS detector offset level', blank=True, null=True)
	hasstdby = models.IntegerField('HASSTDBY', help_text='HAS detector standby mode', blank=True, null=True)
	heex_obs = models.FloatField('HEEX_OBS', help_text='s/c Heliocentric Earth Ecliptic X', blank=True, null=True)
	heey_obs = models.FloatField('HEEY_OBS', help_text='s/c Heliocentric Earth Ecliptic Y', blank=True, null=True)
	heez_obs = models.FloatField('HEEZ_OBS', help_text='s/c Heliocentric Earth Ecliptic Z', blank=True, null=True)
	hgln_obs = models.FloatField('HGLN_OBS', help_text='s/c heliographic longitude', blank=True, null=True)
	hglt_obs = models.FloatField('HGLT_OBS', help_text='s/c heliographic latitude', blank=True, null=True)
	instrume = models.TextField('INSTRUME', help_text='instrument name', blank=True, null=True)
	is_proc = models.IntegerField('IS_PROC', help_text='on-board image processing', blank=True, null=True)
	lang_rot = models.FloatField('LANG_ROT', help_text='commanded large angle rotation component', blank=True, null=True)
	last_col = models.IntegerField('LAST_COL', help_text='last  read-out detector column', blank=True, null=True)
	last_row = models.IntegerField('LAST_ROW', help_text='last  read-out detector row', blank=True, null=True)
	led_pow = models.TextField('LED_POW', help_text='calibration LED power', blank=True, null=True)
	led_sel = models.TextField('LED_SEL', help_text='calibration LED selection', blank=True, null=True)
	level = models.IntegerField('LEVEL', help_text='data processing level', blank=True, null=True)
	lonpole = models.FloatField('LONPOLE', help_text='native longitude of the celestial pole', blank=True, null=True)
	los_alt = models.FloatField('LOS_ALT', help_text='s/c LOS altitude (1000000=no atmosphere)', blank=True, null=True)
	lzwdecor = models.TextField('LZWDECOR', help_text='LZW decorrelation', blank=True, null=True)
	naxis = models.IntegerField('NAXIS', help_text='number of data axes', blank=True, null=True)
	naxis1 = models.IntegerField('NAXIS1', help_text='length of data axis 1', blank=True, null=True)
	naxis2 = models.IntegerField('NAXIS2', help_text='length of data axis 2', blank=True, null=True)
	nprescr = models.IntegerField('NPRESCR', help_text='# preserved pixels - cosmic rays', blank=True, null=True)
	npreslzw = models.IntegerField('NPRESLZW', help_text='# preserved pixels - LZW decorrelation', blank=True, null=True)
	object = models.TextField('OBJECT', help_text='object observed', blank=True, null=True)
	obs_mode = models.TextField('OBS_MODE', help_text='sun_cen, fix_off, var_off, cme_track', blank=True, null=True)
	origin = models.TextField('ORIGIN', help_text='Royal Observatory of Belgium', blank=True, null=True)
	p2_roll = models.FloatField('P2_ROLL', help_text='s/c roll', blank=True, null=True)
	p2_x0 = models.FloatField('P2_X0', help_text='s/c yaw', blank=True, null=True)
	p2_y0 = models.FloatField('P2_Y0', help_text='s/c pitch', blank=True, null=True)
	pav_rot0 = models.FloatField('PAV_ROT0', help_text='commanded paving rotation component 0', blank=True, null=True)
	pav_rot1 = models.FloatField('PAV_ROT1', help_text='commanded paving rotation component 1', blank=True, null=True)
	pga_gain = models.IntegerField('PGA_GAIN', help_text='PGA gain', blank=True, null=True)
	pga_offs = models.IntegerField('PGA_OFFS', help_text='PGA offset', blank=True, null=True)
	pn = models.IntegerField('PN', help_text='on-board priority number', blank=True, null=True)
	readrdiv = models.IntegerField('READRDIV', help_text='read-out rate divider', blank=True, null=True)
	rebin = models.TextField('REBIN', help_text='on-board rebin (2x2 pixel average)', blank=True, null=True)
	recbias = models.IntegerField('RECBIAS', help_text='recoding lower limit', blank=True, null=True)
	recnum = models.IntegerField('RECNUM', help_text='recoding upper limit', blank=True, null=True)
	recoding = models.TextField('RECODING', help_text='(off,fixed,adaptive) on-board recoding', blank=True, null=True)
	rsun_arc = models.FloatField('RSUN_ARC', help_text='photospheric solar radius', blank=True, null=True)
	sacqtime = models.FloatField('SACQTIME', help_text='start acquisition time', blank=True, null=True)
	sizcompi = models.IntegerField('SIZCOMPI', help_text='size of on-board compressed image', blank=True, null=True)
	solar_ep = models.FloatField('SOLAR_EP', help_text='s/c ecliptic North to solar North angle', blank=True, null=True)
	swavint = models.FloatField('SWAVINT', help_text='average intensity in calibrated image', blank=True, null=True)
	swxcen = models.FloatField('SWXCEN', help_text='axis 1 location of solar center in lv0', blank=True, null=True)
	swycen = models.FloatField('SWYCEN', help_text='axis 2 location of solar center in lv0', blank=True, null=True)
	telescop = models.TextField('TELESCOP', help_text='satellite name', blank=True, null=True)
	temp1det = models.FloatField('TEMP1DET', help_text='detector temperature (SW HK T CF)', blank=True, null=True)
	temp2det = models.FloatField('TEMP2DET', help_text='detector temperature (SW HK T CF)', blank=True, null=True)
	tempdark = models.FloatField('TEMPDARK', help_text='temperature used in dark subtraction', blank=True, null=True)
	trantime = models.FloatField('TRANTIME', help_text='transferring time', blank=True, null=True)
	trapelec = models.FloatField('TRAPELEC', help_text='AE-8 MAX >  1MeV @ 725km model', blank=True, null=True)
	trapprot = models.FloatField('TRAPPROT', help_text='AP-8 MAX > 10MeV @ 725km model', blank=True, null=True)
	ttemp1 = models.TextField('TTEMP1', help_text='UTC time of detector temp 1st sample', blank=True, null=True)
	ttemp2 = models.TextField('TTEMP2', help_text='UTC time of detector temp 2nd sample', blank=True, null=True)
	wavelnth = models.IntegerField('WAVELNTH', help_text='bandpass peak response', blank=True, null=True)
	wcsname = models.TextField('WCSNAME', help_text='aligned with solar North', blank=True, null=True)
