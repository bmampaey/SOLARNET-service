from django.db import models

from .base_metadata import BaseMetadata

__all__ = ['HmiMagnetogram']

class HmiMagnetogram(BaseMetadata):
	'''Model for the metadata of dataset HMI magnetogram'''
	
	class Meta(BaseMetadata.Meta):
		verbose_name = 'HMI magnetogram'
	
	bld_vers = models.TextField(verbose_name = 'BLD_VERS', help_text='Code release build number of program that created this record', blank=True, null=True)
	bunit = models.TextField(verbose_name = 'BUNIT', help_text='BUNIT: physical units of data, Gauss', blank=True, null=True)
	cadence = models.FloatField(verbose_name = 'CADENCE', help_text='repetition interval', blank=True, null=True)
	cal_fsn = models.IntegerField(verbose_name = 'CAL_FSN', help_text='FSN of the look-up table used to produce the observables', blank=True, null=True)
	calver64 = models.BigIntegerField(verbose_name = 'CALVER64', help_text='Calibration Version', blank=True, null=True)
	camera = models.IntegerField(verbose_name = 'CAMERA', help_text='For HMI: 1 (side camera), 2 (front camera), or 3 (both cameras)', blank=True, null=True)
	car_rot = models.IntegerField(verbose_name = 'CAR_ROT', help_text='Carrington rotation number of CRLN_OBS', blank=True, null=True)
	cdelt1 = models.FloatField(verbose_name = 'CDELT1', help_text='image scale in the x direction', blank=True, null=True)
	cdelt2 = models.FloatField(verbose_name = 'CDELT2', help_text='image scale in the y direction', blank=True, null=True)
	codever0 = models.TextField(verbose_name = 'CODEVER0', help_text='version of the l.o.s. observable code used to produce the data', blank=True, null=True)
	codever1 = models.TextField(verbose_name = 'CODEVER1', help_text='version of the gapfilling subroutine used to produce the data', blank=True, null=True)
	codever2 = models.TextField(verbose_name = 'CODEVER2', help_text='version of the temporal interpolation subroutine used to produce the data', blank=True, null=True)
	codever3 = models.TextField(verbose_name = 'CODEVER3', help_text='version of the polarization calibration subroutine used to produce the data', blank=True, null=True)
	content = models.TextField(verbose_name = 'CONTENT', help_text='CONTENT: MAGNETOGRAM', blank=True, null=True)
	crder1 = models.FloatField(verbose_name = 'CRDER1', help_text='CRDER1: estimate of random error in coordinate x', blank=True, null=True)
	crder2 = models.FloatField(verbose_name = 'CRDER2', help_text='CRDER2: estimate of random error in coordinate y', blank=True, null=True)
	crln_obs = models.FloatField(verbose_name = 'CRLN_OBS', help_text='Carrington longitude of the observer', blank=True, null=True)
	crlt_obs = models.FloatField(verbose_name = 'CRLT_OBS', help_text='Carrington latitude of the observer', blank=True, null=True)
	crota2 = models.FloatField(verbose_name = 'CROTA2', help_text='CROTA2: INST_ROT + SAT_ROT', blank=True, null=True)
	crpix1 = models.FloatField(verbose_name = 'CRPIX1', help_text='CRPIX1: location of the Sun center in CCD x direction', blank=True, null=True)
	crpix2 = models.FloatField(verbose_name = 'CRPIX2', help_text='CRPIX2: location of the Sun center in CCD y direction', blank=True, null=True)
	crval1 = models.FloatField(verbose_name = 'CRVAL1', help_text='CRVAL1: x origin - center of the solar disk', blank=True, null=True)
	crval2 = models.FloatField(verbose_name = 'CRVAL2', help_text='CRVAL2: y origin - center of the solar disk', blank=True, null=True)
	csyser1 = models.FloatField(verbose_name = 'CSYSER1', help_text='CSYSER1: estimate of systematic error in coordinate x', blank=True, null=True)
	csyser2 = models.FloatField(verbose_name = 'CSYSER2', help_text='CSYSER2: estimate of systematic error in coordinate y', blank=True, null=True)
	ctype1 = models.TextField(verbose_name = 'CTYPE1', help_text='CTYPE1: HPLN-TAN (SOLARX)', blank=True, null=True)
	ctype2 = models.TextField(verbose_name = 'CTYPE2', help_text='CTYPE2: HPLT-TAN (SOLARY)', blank=True, null=True)
	cunit1 = models.TextField(verbose_name = 'CUNIT1', help_text='CUNIT1: arcsec', blank=True, null=True)
	cunit2 = models.TextField(verbose_name = 'CUNIT2', help_text='CUNIT2: arcsec', blank=True, null=True)
	datakur2 = models.FloatField(verbose_name = 'DATAKUR2', help_text='Kurtosis of all pixels', blank=True, null=True)
	datakurt = models.FloatField(verbose_name = 'DATAKURT', help_text='Kurtosis of pixels within 99% of solar radius', blank=True, null=True)
	datamax = models.FloatField(verbose_name = 'DATAMAX', help_text='Maximum value from pixels within 99% of solar radius', blank=True, null=True)
	datamax2 = models.FloatField(verbose_name = 'DATAMAX2', help_text='Maximum value from all pixels', blank=True, null=True)
	datamea2 = models.FloatField(verbose_name = 'DATAMEA2', help_text='Mean value from all pixels', blank=True, null=True)
	datamean = models.FloatField(verbose_name = 'DATAMEAN', help_text='Mean value from pixels within 99% of solar radius', blank=True, null=True)
	datamed2 = models.FloatField(verbose_name = 'DATAMED2', help_text='Median value from all pixels', blank=True, null=True)
	datamedn = models.FloatField(verbose_name = 'DATAMEDN', help_text='Median value from pixels within 99% of solar radius', blank=True, null=True)
	datamin = models.FloatField(verbose_name = 'DATAMIN', help_text='Minimum value from pixels within 99% of solar radius', blank=True, null=True)
	datamin2 = models.FloatField(verbose_name = 'DATAMIN2', help_text='Minimum value from all pixels', blank=True, null=True)
	datarms = models.FloatField(verbose_name = 'DATARMS', help_text='Rms deviation from the mean value of pixels within 99% of solar radius', blank=True, null=True)
	datarms2 = models.FloatField(verbose_name = 'DATARMS2', help_text='Rms deviation from the mean value of all pixels', blank=True, null=True)
	datasign = models.IntegerField(verbose_name = 'DATASIGN', help_text='DATASIGN: sign of observable quantity wrt Sun center', blank=True, null=True)
	dataske2 = models.FloatField(verbose_name = 'DATASKE2', help_text='Skewness from the mean value of all pixels', blank=True, null=True)
	dataskew = models.FloatField(verbose_name = 'DATASKEW', help_text='Skewness from the mean value of pixels within 99% of solar radius', blank=True, null=True)
	datavals = models.IntegerField(verbose_name = 'DATAVALS', help_text='Actual number of data values in images (pixels)', blank=True, null=True)
	date = models.DateTimeField(verbose_name = 'DATE', help_text='Date_time of processing; ISO 8601 format UTC', blank=True, null=True)
	date_obs = models.DateTimeField(verbose_name = 'DATE-OBS', help_text='DATE_OBS = T_OBS - EXPTIME/2.0', blank=True, null=True)
	distcoef = models.TextField(verbose_name = 'DISTCOEF', help_text='path to the distortion coefficient table used to produce the data', blank=True, null=True)
	dsun_obs = models.FloatField(verbose_name = 'DSUN_OBS', help_text='Distance from SDO to Sun center.', blank=True, null=True)
	dsun_ref = models.FloatField(verbose_name = 'DSUN_REF', help_text='Astronomical Unit', blank=True, null=True)
	hcamid = models.IntegerField(verbose_name = 'HCAMID', help_text='HMI_SEQ_ID_EXP_PATH', blank=True, null=True)
	hcftid = models.IntegerField(verbose_name = 'HCFTID', help_text='HMI_SEQ_ID_FOCUS', blank=True, null=True)
	hflid = models.IntegerField(verbose_name = 'HFLID', help_text='HMI_SEQ_ID_FRAMELIST', blank=True, null=True)
	instrume = models.TextField(verbose_name = 'INSTRUME', help_text='For HMI: HMI_SIDE1, HMI_FRONT2, or HMI_COMBINED', blank=True, null=True)
	lutquery = models.TextField(verbose_name = 'LUTQUERY', help_text='query used for the look-up tables', blank=True, null=True)
	missvals = models.IntegerField(verbose_name = 'MISSVALS', help_text='Missing values: TOTVALS - DATAVALS', blank=True, null=True)
	obs_vn = models.FloatField(verbose_name = 'OBS_VN', help_text='velocity of the observer solar-northward (heliographic). + to north', blank=True, null=True)
	obs_vr = models.FloatField(verbose_name = 'OBS_VR', help_text='velocity of the observer in radial direction. + is away from Sun', blank=True, null=True)
	obs_vw = models.FloatField(verbose_name = 'OBS_VW', help_text='velocity of the observer solar-westward. + in rough direction of Earth orbit', blank=True, null=True)
	odicoeff = models.IntegerField(verbose_name = 'ODICOEFF', help_text='order of the distortion-coefficient polynomials', blank=True, null=True)
	origin = models.TextField(verbose_name = 'ORIGIN', help_text='ORIGIN: location where file made', blank=True, null=True)
	orocoeff = models.IntegerField(verbose_name = 'OROCOEFF', help_text='order of the differential-rotation polynomials', blank=True, null=True)
	polcalm = models.IntegerField(verbose_name = 'POLCALM', help_text='method used by the polarization calibration subroutine', blank=True, null=True)
	qlook = models.IntegerField(verbose_name = 'QLOOK', help_text='QLOOK: 0=final data, 1=quick-look data', blank=True, null=True)
	quality = models.IntegerField(verbose_name = 'QUALITY', help_text='Level 1.5 Quality word', blank=True, null=True)
	quallev1 = models.IntegerField(verbose_name = 'QUALLEV1', help_text='Logical OR on the bits of the level 1 Quality word', blank=True, null=True)
	recnum = models.BigIntegerField(verbose_name = 'RECNUM', help_text='JSOC Record Number', blank=True, null=True)
	rotcoef = models.TextField(verbose_name = 'ROTCOEF', help_text='path to the differential-rotation coefficient table used to produce the data', blank=True, null=True)
	rsun_obs = models.FloatField(verbose_name = 'RSUN_OBS', help_text='angular radius of Sun. Corresponds to arcsin(RSUN_REF/DSUN_OBS)', blank=True, null=True)
	rsun_ref = models.FloatField(verbose_name = 'RSUN_REF', help_text='Reference radius of the Sun: 696,000,000.0 m', blank=True, null=True)
	satvals = models.IntegerField(verbose_name = 'SATVALS', help_text='Saturated values', blank=True, null=True)
	segment = models.TextField(verbose_name = 'SEGMENT', help_text='JSOC Segment File Name', blank=True, null=True)
	series = models.TextField(verbose_name = 'SERIES', help_text='JSOC Series Name', blank=True, null=True)
	sintnum = models.IntegerField(verbose_name = 'SINTNUM', help_text='number of points used for the spatial interpolation', blank=True, null=True)
	slotnum = models.IntegerField(verbose_name = 'SLOTNUM', help_text='JSOC Slot Number', blank=True, null=True)
	source = models.TextField(verbose_name = 'SOURCE', help_text='level 1 filtergrams used to produce the observables', blank=True, null=True)
	sunum = models.BigIntegerField(verbose_name = 'SUNUM', help_text='JSOC Storage Unit Number', blank=True, null=True)
	t_obs = models.DateTimeField(verbose_name = 'T_OBS', help_text='nominal time', blank=True, null=True)
	t_rec = models.DateTimeField(verbose_name = 'T_REC', help_text='Slot time', blank=True, null=True)
	telescop = models.TextField(verbose_name = 'TELESCOP', help_text='For HMI: SDO/HMI', blank=True, null=True)
	tfront = models.FloatField(verbose_name = 'TFRONT', help_text='temperature keyword for polarization calibration', blank=True, null=True)
	tintnum = models.IntegerField(verbose_name = 'TINTNUM', help_text='number of points used for the temporal interpolation', blank=True, null=True)
	totvals = models.IntegerField(verbose_name = 'TOTVALS', help_text='Expected number of data values (pixels)', blank=True, null=True)
	tsel = models.FloatField(verbose_name = 'TSEL', help_text='temperature keyword for polarization calibration', blank=True, null=True)
	wavelnth = models.FloatField(verbose_name = 'WAVELNTH', help_text='For HMI: 6173.3 Angstroms', blank=True, null=True)
	wcsname = models.TextField(verbose_name = 'WCSNAME', help_text='WCS system name', blank=True, null=True)
