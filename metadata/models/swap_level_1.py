from django.db import models

from .base_metadata import BaseMetadata

__all__ = ['SwapLevel1']

class SwapLevel1(BaseMetadata):
	'''Model for the metadata of dataset SWAP level 1'''
	
	class Meta(BaseMetadata.Meta):
		verbose_name = 'SWAP level 1 metadata'
		verbose_name_plural = 'SWAP level 1 metadata'
	
	fits_header = models.TextField(null=True, blank=True)
	artefx = models.TextField(verbose_name = 'ARTEFX', help_text='(off,on,cosmic rays) on-board artefact removal', blank=True, null=True)
	bscale = models.FloatField(verbose_name = 'BSCALE', help_text='ratio of physical to array value at 0 offset', blank=True, null=True)
	bunit = models.TextField(verbose_name = 'BUNIT', help_text='unit of physical value', blank=True, null=True)
	bzero = models.FloatField(verbose_name = 'BZERO', help_text='physical value for the array value 0', blank=True, null=True)
	cap_mode = models.TextField(verbose_name = 'CAP_MODE', help_text='(DS,CDS) capture mode', blank=True, null=True)
	cd1_1 = models.FloatField(verbose_name = 'CD1_1', help_text='WCS coordinate description matrix', blank=True, null=True)
	cd1_2 = models.FloatField(verbose_name = 'CD1_2', help_text='WCS coordinate description matrix', blank=True, null=True)
	cd2_1 = models.FloatField(verbose_name = 'CD2_1', help_text='WCS coordinate description matrix', blank=True, null=True)
	cd2_2 = models.FloatField(verbose_name = 'CD2_2', help_text='WCS coordinate description matrix', blank=True, null=True)
	cdelt1 = models.FloatField(verbose_name = 'CDELT1', help_text='average pixel scale along axis 1', blank=True, null=True)
	cdelt2 = models.FloatField(verbose_name = 'CDELT2', help_text='average pixel scale along axis 2', blank=True, null=True)
	compress = models.TextField(verbose_name = 'COMPRESS', help_text='(off,lzw,jpeg) on-board compression algorithm', blank=True, null=True)
	creator = models.TextField(verbose_name = 'CREATOR', help_text='FITS creation software', blank=True, null=True)
	crota1 = models.FloatField(verbose_name = 'CROTA1', help_text='axis 1 to WCS rotation angle', blank=True, null=True)
	crota2 = models.FloatField(verbose_name = 'CROTA2', help_text='axis 2 to WCS rotation angle', blank=True, null=True)
	crpix1 = models.FloatField(verbose_name = 'CRPIX1', help_text='reference point axis 1', blank=True, null=True)
	crpix2 = models.FloatField(verbose_name = 'CRPIX2', help_text='reference point axis 2', blank=True, null=True)
	crval1 = models.FloatField(verbose_name = 'CRVAL1', help_text='reference point WCS axis X', blank=True, null=True)
	crval2 = models.FloatField(verbose_name = 'CRVAL2', help_text='reference point WCS axis Y', blank=True, null=True)
	ctype1 = models.TextField(verbose_name = 'CTYPE1', help_text='WCS axis X', blank=True, null=True)
	ctype2 = models.TextField(verbose_name = 'CTYPE2', help_text='WCS axis Y', blank=True, null=True)
	cunit1 = models.TextField(verbose_name = 'CUNIT1', help_text='WCS axis X units', blank=True, null=True)
	cunit2 = models.TextField(verbose_name = 'CUNIT2', help_text='WCS axis Y units', blank=True, null=True)
	datamax = models.FloatField(verbose_name = 'DATAMAX', help_text='maximum valid physical value', blank=True, null=True)
	datamin = models.FloatField(verbose_name = 'DATAMIN', help_text='minimum valid physical value', blank=True, null=True)
	date = models.DateTimeField(verbose_name = 'DATE', help_text='UTC time of FITS file creation', blank=True, null=True)
	date_obs = models.DateTimeField(verbose_name = 'DATE-OBS', help_text='UTC time of observation', blank=True, null=True)
	detector = models.TextField(verbose_name = 'DETECTOR', help_text='HAS CMOS detector 1024x1024 pixels', blank=True, null=True)
	dsun_obs = models.FloatField(verbose_name = 'DSUN_OBS', help_text='s/c distance from Sun', blank=True, null=True)
	dtplar1 = models.FloatField(verbose_name = 'DTPLAR1', help_text='predicted time to prev large angle rotation', blank=True, null=True)
	dtplar2 = models.FloatField(verbose_name = 'DTPLAR2', help_text='predicted time to next large angle rotation', blank=True, null=True)
	eacqtime = models.FloatField(verbose_name = 'EACQTIME', help_text='end   acquisition time', blank=True, null=True)
	exptime = models.FloatField(verbose_name = 'EXPTIME', help_text='commanded exposure time', blank=True, null=True)
	file_raw = models.TextField(verbose_name = 'FILE_RAW', help_text='raw telemetry filename', blank=True, null=True)
	file_tar = models.TextField(verbose_name = 'FILE_TAR', help_text='raw telemetry package', blank=True, null=True)
	file_tmr = models.TextField(verbose_name = 'FILE_TMR', help_text='SWTMR filename', blank=True, null=True)
	filename = models.TextField(verbose_name = 'FILENAME', help_text='FITS filename', blank=True, null=True)
	filter = models.TextField(verbose_name = 'FILTER', help_text='Aluminum filter', blank=True, null=True)
	firstcol = models.IntegerField(verbose_name = 'FIRSTCOL', help_text='first read-out detector column', blank=True, null=True)
	firstrow = models.IntegerField(verbose_name = 'FIRSTROW', help_text='first read-out detector row', blank=True, null=True)
	geod_alt = models.FloatField(verbose_name = 'GEOD_ALT', help_text='s/c WGS84 altitude', blank=True, null=True)
	geod_lat = models.FloatField(verbose_name = 'GEOD_LAT', help_text='s/c sub-point geodetic latitude', blank=True, null=True)
	geod_lon = models.FloatField(verbose_name = 'GEOD_LON', help_text='s/c sub-point longitude', blank=True, null=True)
	gsex_obs = models.FloatField(verbose_name = 'GSEX_OBS', help_text='s/c Geocentric   Solar Ecliptic X', blank=True, null=True)
	gsey_obs = models.FloatField(verbose_name = 'GSEY_OBS', help_text='s/c Geocentric   Solar Ecliptic Y', blank=True, null=True)
	gsez_obs = models.FloatField(verbose_name = 'GSEZ_OBS', help_text='s/c Geocentric   Solar Ecliptic Z', blank=True, null=True)
	hasblack = models.IntegerField(verbose_name = 'HASBLACK', help_text='HAS detector black  level', blank=True, null=True)
	hasoffst = models.IntegerField(verbose_name = 'HASOFFST', help_text='HAS detector offset level', blank=True, null=True)
	hasstdby = models.IntegerField(verbose_name = 'HASSTDBY', help_text='HAS detector standby mode', blank=True, null=True)
	heex_obs = models.FloatField(verbose_name = 'HEEX_OBS', help_text='s/c Heliocentric Earth Ecliptic X', blank=True, null=True)
	heey_obs = models.FloatField(verbose_name = 'HEEY_OBS', help_text='s/c Heliocentric Earth Ecliptic Y', blank=True, null=True)
	heez_obs = models.FloatField(verbose_name = 'HEEZ_OBS', help_text='s/c Heliocentric Earth Ecliptic Z', blank=True, null=True)
	hgln_obs = models.FloatField(verbose_name = 'HGLN_OBS', help_text='s/c heliographic longitude', blank=True, null=True)
	hglt_obs = models.FloatField(verbose_name = 'HGLT_OBS', help_text='s/c heliographic latitude', blank=True, null=True)
	instrume = models.TextField(verbose_name = 'INSTRUME', help_text='instrument name', blank=True, null=True)
	is_proc = models.IntegerField(verbose_name = 'IS_PROC', help_text='on-board image processing', blank=True, null=True)
	lang_rot = models.FloatField(verbose_name = 'LANG_ROT', help_text='commanded large angle rotation component', blank=True, null=True)
	last_col = models.IntegerField(verbose_name = 'LAST_COL', help_text='last  read-out detector column', blank=True, null=True)
	last_row = models.IntegerField(verbose_name = 'LAST_ROW', help_text='last  read-out detector row', blank=True, null=True)
	led_pow = models.TextField(verbose_name = 'LED_POW', help_text='calibration LED power', blank=True, null=True)
	led_sel = models.TextField(verbose_name = 'LED_SEL', help_text='calibration LED selection', blank=True, null=True)
	level = models.IntegerField(verbose_name = 'LEVEL', help_text='data processing level', blank=True, null=True)
	lonpole = models.FloatField(verbose_name = 'LONPOLE', help_text='native longitude of the celestial pole', blank=True, null=True)
	los_alt = models.FloatField(verbose_name = 'LOS_ALT', help_text='s/c LOS altitude (1000000=no atmosphere)', blank=True, null=True)
	lzwdecor = models.TextField(verbose_name = 'LZWDECOR', help_text='LZW decorrelation', blank=True, null=True)
	naxis = models.IntegerField(verbose_name = 'NAXIS', help_text='number of data axes', blank=True, null=True)
	naxis1 = models.IntegerField(verbose_name = 'NAXIS1', help_text='length of data axis 1', blank=True, null=True)
	naxis2 = models.IntegerField(verbose_name = 'NAXIS2', help_text='length of data axis 2', blank=True, null=True)
	nprescr = models.IntegerField(verbose_name = 'NPRESCR', help_text='# preserved pixels - cosmic rays', blank=True, null=True)
	npreslzw = models.IntegerField(verbose_name = 'NPRESLZW', help_text='# preserved pixels - LZW decorrelation', blank=True, null=True)
	object = models.TextField(verbose_name = 'OBJECT', help_text='object observed', blank=True, null=True)
	obs_mode = models.TextField(verbose_name = 'OBS_MODE', help_text='sun_cen, fix_off, var_off, cme_track', blank=True, null=True)
	origin = models.TextField(verbose_name = 'ORIGIN', help_text='Royal Observatory of Belgium', blank=True, null=True)
	p2_roll = models.FloatField(verbose_name = 'P2_ROLL', help_text='s/c roll', blank=True, null=True)
	p2_x0 = models.FloatField(verbose_name = 'P2_X0', help_text='s/c yaw', blank=True, null=True)
	p2_y0 = models.FloatField(verbose_name = 'P2_Y0', help_text='s/c pitch', blank=True, null=True)
	pav_rot0 = models.FloatField(verbose_name = 'PAV_ROT0', help_text='commanded paving rotation component 0', blank=True, null=True)
	pav_rot1 = models.FloatField(verbose_name = 'PAV_ROT1', help_text='commanded paving rotation component 1', blank=True, null=True)
	pga_gain = models.IntegerField(verbose_name = 'PGA_GAIN', help_text='PGA gain', blank=True, null=True)
	pga_offs = models.IntegerField(verbose_name = 'PGA_OFFS', help_text='PGA offset', blank=True, null=True)
	pn = models.IntegerField(verbose_name = 'PN', help_text='on-board priority number', blank=True, null=True)
	readrdiv = models.IntegerField(verbose_name = 'READRDIV', help_text='read-out rate divider', blank=True, null=True)
	rebin = models.TextField(verbose_name = 'REBIN', help_text='on-board rebin (2x2 pixel average)', blank=True, null=True)
	recbias = models.IntegerField(verbose_name = 'RECBIAS', help_text='recoding lower limit', blank=True, null=True)
	recnum = models.IntegerField(verbose_name = 'RECNUM', help_text='recoding upper limit', blank=True, null=True)
	recoding = models.TextField(verbose_name = 'RECODING', help_text='(off,fixed,adaptive) on-board recoding', blank=True, null=True)
	rsun_arc = models.FloatField(verbose_name = 'RSUN_ARC', help_text='photospheric solar radius', blank=True, null=True)
	sacqtime = models.FloatField(verbose_name = 'SACQTIME', help_text='start acquisition time', blank=True, null=True)
	sizcompi = models.IntegerField(verbose_name = 'SIZCOMPI', help_text='size of on-board compressed image', blank=True, null=True)
	solar_ep = models.FloatField(verbose_name = 'SOLAR_EP', help_text='s/c ecliptic North to solar North angle', blank=True, null=True)
	swavint = models.FloatField(verbose_name = 'SWAVINT', help_text='average intensity in calibrated image', blank=True, null=True)
	swxcen = models.FloatField(verbose_name = 'SWXCEN', help_text='axis 1 location of solar center in lv0', blank=True, null=True)
	swycen = models.FloatField(verbose_name = 'SWYCEN', help_text='axis 2 location of solar center in lv0', blank=True, null=True)
	telescop = models.TextField(verbose_name = 'TELESCOP', help_text='satellite name', blank=True, null=True)
	temp1det = models.FloatField(verbose_name = 'TEMP1DET', help_text='detector temperature (SW HK T CF)', blank=True, null=True)
	temp2det = models.FloatField(verbose_name = 'TEMP2DET', help_text='detector temperature (SW HK T CF)', blank=True, null=True)
	tempdark = models.FloatField(verbose_name = 'TEMPDARK', help_text='temperature used in dark subtraction', blank=True, null=True)
	trantime = models.FloatField(verbose_name = 'TRANTIME', help_text='transferring time', blank=True, null=True)
	trapelec = models.FloatField(verbose_name = 'TRAPELEC', help_text='AE-8 MAX >  1MeV @ 725km model', blank=True, null=True)
	trapprot = models.FloatField(verbose_name = 'TRAPPROT', help_text='AP-8 MAX > 10MeV @ 725km model', blank=True, null=True)
	ttemp1 = models.TextField(verbose_name = 'TTEMP1', help_text='UTC time of detector temp 1st sample', blank=True, null=True)
	ttemp2 = models.TextField(verbose_name = 'TTEMP2', help_text='UTC time of detector temp 2nd sample', blank=True, null=True)
	wavelnth = models.IntegerField(verbose_name = 'WAVELNTH', help_text='bandpass peak response', blank=True, null=True)
	wcsname = models.TextField(verbose_name = 'WCSNAME', help_text='aligned with solar North', blank=True, null=True)
