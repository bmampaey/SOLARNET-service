# Generated by command write_metadata_files version 1
from django.db import models

from .base_metadata import BaseMetadata

__all__ = ['UsetHAlphaLevel1']

class UsetHAlphaLevel1(BaseMetadata):
	'''Model for the metadata of dataset USET H-alpha level 1'''
	
	class Meta(BaseMetadata.Meta):
		verbose_name = 'USET H-alpha level 1 metadata'
		verbose_name_plural = 'USET H-alpha level 1 metadata'
	
	bscale = models.BigIntegerField(verbose_name = 'BSCALE', help_text='To be multiplied to the data array values', blank=True, null=True)
	btype = models.TextField(verbose_name = 'BTYPE', help_text='type of data, Unified Content Descriptor', blank=True, null=True)
	bunit = models.TextField(verbose_name = 'BUNIT', help_text='unit of physical value', blank=True, null=True)
	bzero = models.BigIntegerField(verbose_name = 'BZERO', help_text='To be added by the data array values', blank=True, null=True)
	camera = models.TextField(verbose_name = 'CAMERA', help_text='', blank=True, null=True)
	cdelt1 = models.FloatField(verbose_name = 'CDELT1', help_text='pixel scale along axis 1', blank=True, null=True)
	cdelt2 = models.FloatField(verbose_name = 'CDELT2', help_text='pixel scale along axis 2', blank=True, null=True)
	contact = models.TextField(verbose_name = 'CONTACT', help_text='Contact person at the institution', blank=True, null=True)
	creator = models.TextField(verbose_name = 'CREATOR', help_text='Name of software that produced the FITS', blank=True, null=True)
	crota = models.FloatField(verbose_name = 'CROTA', help_text='rotation angle', blank=True, null=True)
	crpix1 = models.FloatField(verbose_name = 'CRPIX1', help_text='reference pixel location along axis 1', blank=True, null=True)
	crpix2 = models.FloatField(verbose_name = 'CRPIX2', help_text='reference pixel location along axis 2', blank=True, null=True)
	crval1 = models.BigIntegerField(verbose_name = 'CRVAL1', help_text='value of reference pixel along axis 1', blank=True, null=True)
	crval2 = models.BigIntegerField(verbose_name = 'CRVAL2', help_text='value of reference pixel along axis 2', blank=True, null=True)
	ctype1 = models.TextField(verbose_name = 'CTYPE1', help_text='Helioproj. westward angle, TAN projection', blank=True, null=True)
	ctype2 = models.TextField(verbose_name = 'CTYPE2', help_text='Helioproj. northward angle, TAN projection', blank=True, null=True)
	cunit1 = models.TextField(verbose_name = 'CUNIT1', help_text='units along axis 1', blank=True, null=True)
	cunit2 = models.TextField(verbose_name = 'CUNIT2', help_text='units along axis 2', blank=True, null=True)
	date = models.DateTimeField(verbose_name = 'DATE', help_text='FITS file creation date', blank=True, null=True)
	date_obs = models.DateTimeField(verbose_name = 'DATE-OBS', help_text='deprecated, same as DATE-BEG', blank=True, null=True)
	doi = models.TextField(verbose_name = 'DOI', help_text='Digital Object Identifier', blank=True, null=True)
	extname = models.TextField(verbose_name = 'EXTNAME', help_text='Extention name', blank=True, null=True)
	filename = models.TextField(verbose_name = 'FILENAME', help_text='', blank=True, null=True)
	instrume = models.TextField(verbose_name = 'INSTRUME', help_text='', blank=True, null=True)
	level = models.BigIntegerField(verbose_name = 'LEVEL', help_text='Data level of fits file', blank=True, null=True)
	naxis = models.BigIntegerField(verbose_name = 'NAXIS', help_text='', blank=True, null=True)
	naxis1 = models.BigIntegerField(verbose_name = 'NAXIS1', help_text='', blank=True, null=True)
	naxis2 = models.BigIntegerField(verbose_name = 'NAXIS2', help_text='', blank=True, null=True)
	obs_hdu = models.BigIntegerField(verbose_name = 'OBS_HDU', help_text='', blank=True, null=True)
	obs_mode = models.TextField(verbose_name = 'OBS_MODE', help_text='Predefined settings used during obs.', blank=True, null=True)
	obsgeo_x = models.BigIntegerField(verbose_name = 'OBSGEO-X', help_text='ECEF X coord of the observer', blank=True, null=True)
	obsgeo_y = models.BigIntegerField(verbose_name = 'OBSGEO-Y', help_text='ECEF Y coord of the observer', blank=True, null=True)
	obsgeo_z = models.BigIntegerField(verbose_name = 'OBSGEO-Z', help_text='ECEF Z coord of the observer', blank=True, null=True)
	obsrvtry = models.TextField(verbose_name = 'OBSRVTRY', help_text='', blank=True, null=True)
	origin = models.TextField(verbose_name = 'ORIGIN', help_text='', blank=True, null=True)
	pc1_1 = models.FloatField(verbose_name = 'PC1_1', help_text='WCS coordinate transformation matrix', blank=True, null=True)
	pc1_2 = models.FloatField(verbose_name = 'PC1_2', help_text='WCS coordinate transformation matrix', blank=True, null=True)
	pc2_1 = models.FloatField(verbose_name = 'PC2_1', help_text='WCS coordinate transformation matrix', blank=True, null=True)
	pc2_2 = models.FloatField(verbose_name = 'PC2_2', help_text='WCS coordinate transformation matrix', blank=True, null=True)
	physpara = models.TextField(verbose_name = 'PHYSPARA', help_text='Physical parameter represented in the data', blank=True, null=True)
	r_error = models.FloatField(verbose_name = 'R_ERROR', help_text='error on the estimated radius', blank=True, null=True)
	solar_b0 = models.FloatField(verbose_name = 'SOLAR_B0', help_text='tilt of the solar North Pole', blank=True, null=True)
	solar_p0 = models.FloatField(verbose_name = 'SOLAR_P0', help_text='celestial North to solar North angle', blank=True, null=True)
	solar_r = models.FloatField(verbose_name = 'SOLAR_R', help_text='estimated radius of the sun', blank=True, null=True)
	solarnet = models.BigIntegerField(verbose_name = 'SOLARNET', help_text='', blank=True, null=True)
	telescop = models.TextField(verbose_name = 'TELESCOP', help_text='', blank=True, null=True)
	vers_sw = models.DateTimeField(verbose_name = 'VERS_SW', help_text='Version of software applied', blank=True, null=True)
	waveban = models.FloatField(verbose_name = 'WAVEBAN', help_text='bandpass description', blank=True, null=True)
	wavelnth = models.FloatField(verbose_name = 'WAVELNTH', help_text='wavelength of observation', blank=True, null=True)
	waveunit = models.BigIntegerField(verbose_name = 'WAVEUNIT', help_text='Power of 10 by which the metre is multiplied', blank=True, null=True)
	xposure = models.FloatField(verbose_name = 'XPOSURE', help_text='Total exposure time', blank=True, null=True)
