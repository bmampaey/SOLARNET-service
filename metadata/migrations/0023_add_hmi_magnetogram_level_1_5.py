# Generated by Django 3.2.13 on 2024-01-19 14:21

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('dataset', '0001_initial'),
        ('metadata', '0022_update_aia_level_2'),
    ]

    operations = [
        migrations.CreateModel(
            name='HmiMagnetogramLevel15',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('bld_vers', models.TextField(blank=True, help_text='Code release build number of program that created this record', null=True, verbose_name='BLD_VERS')),
                ('bunit', models.TextField(blank=True, help_text='BUNIT: physical units of data, Gauss', null=True, verbose_name='BUNIT')),
                ('cadence', models.FloatField(blank=True, help_text='repetition interval', null=True, verbose_name='CADENCE')),
                ('cal_fsn', models.BigIntegerField(blank=True, help_text='FSN of the look-up table used to produce the observables', null=True, verbose_name='CAL_FSN')),
                ('calver64', models.BigIntegerField(blank=True, help_text='Calibration Version', null=True, verbose_name='CALVER64')),
                ('camera', models.BigIntegerField(blank=True, help_text='For HMI: 1 (side camera), 2 (front camera), or 3 (both cameras)', null=True, verbose_name='CAMERA')),
                ('car_rot', models.BigIntegerField(blank=True, help_text='Carrington rotation number of CRLN_OBS', null=True, verbose_name='CAR_ROT')),
                ('cdelt1', models.FloatField(blank=True, help_text='image scale in the x direction', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='image scale in the y direction', null=True, verbose_name='CDELT2')),
                ('codever0', models.TextField(blank=True, help_text='version of the l.o.s. observable code used to produce the data', null=True, verbose_name='CODEVER0')),
                ('codever1', models.TextField(blank=True, help_text='version of the gapfilling subroutine used to produce the data', null=True, verbose_name='CODEVER1')),
                ('codever2', models.TextField(blank=True, help_text='version of the temporal interpolation subroutine used to produce the data', null=True, verbose_name='CODEVER2')),
                ('codever3', models.TextField(blank=True, help_text='version of the polarization calibration subroutine used to produce the data', null=True, verbose_name='CODEVER3')),
                ('content', models.TextField(blank=True, help_text='CONTENT: MAGNETOGRAM', null=True, verbose_name='CONTENT')),
                ('crder1', models.FloatField(blank=True, help_text='CRDER1: estimate of random error in coordinate x', null=True, verbose_name='CRDER1')),
                ('crder2', models.FloatField(blank=True, help_text='CRDER2: estimate of random error in coordinate y', null=True, verbose_name='CRDER2')),
                ('crln_obs', models.FloatField(blank=True, help_text='Carrington longitude of the observer', null=True, verbose_name='CRLN_OBS')),
                ('crlt_obs', models.FloatField(blank=True, help_text='Carrington latitude of the observer', null=True, verbose_name='CRLT_OBS')),
                ('crota2', models.FloatField(blank=True, help_text='CROTA2: INST_ROT + SAT_ROT', null=True, verbose_name='CROTA2')),
                ('crpix1', models.FloatField(blank=True, help_text='CRPIX1: location of the Sun center in CCD x direction', null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, help_text='CRPIX2: location of the Sun center in CCD y direction', null=True, verbose_name='CRPIX2')),
                ('crval1', models.FloatField(blank=True, help_text='CRVAL1: x origin - center of the solar disk', null=True, verbose_name='CRVAL1')),
                ('crval2', models.FloatField(blank=True, help_text='CRVAL2: y origin - center of the solar disk', null=True, verbose_name='CRVAL2')),
                ('csyser1', models.FloatField(blank=True, help_text='CSYSER1: estimate of systematic error in coordinate x', null=True, verbose_name='CSYSER1')),
                ('csyser2', models.FloatField(blank=True, help_text='CSYSER2: estimate of systematic error in coordinate y', null=True, verbose_name='CSYSER2')),
                ('ctype1', models.TextField(blank=True, help_text='CTYPE1: HPLN-TAN (SOLARX)', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='CTYPE2: HPLT-TAN (SOLARY)', null=True, verbose_name='CTYPE2')),
                ('cunit1', models.TextField(blank=True, help_text='CUNIT1: arcsec', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='CUNIT2: arcsec', null=True, verbose_name='CUNIT2')),
                ('datakur2', models.FloatField(blank=True, help_text='Kurtosis of all pixels', null=True, verbose_name='DATAKUR2')),
                ('datakurt', models.FloatField(blank=True, help_text='Kurtosis of pixels within 99% of solar radius', null=True, verbose_name='DATAKURT')),
                ('datamax', models.FloatField(blank=True, help_text='Maximum value from pixels within 99% of solar radius', null=True, verbose_name='DATAMAX')),
                ('datamax2', models.FloatField(blank=True, help_text='Maximum value from all pixels', null=True, verbose_name='DATAMAX2')),
                ('datamea2', models.FloatField(blank=True, help_text='Mean value from all pixels', null=True, verbose_name='DATAMEA2')),
                ('datamean', models.FloatField(blank=True, help_text='Mean value from pixels within 99% of solar radius', null=True, verbose_name='DATAMEAN')),
                ('datamed2', models.FloatField(blank=True, help_text='Median value from all pixels', null=True, verbose_name='DATAMED2')),
                ('datamedn', models.FloatField(blank=True, help_text='Median value from pixels within 99% of solar radius', null=True, verbose_name='DATAMEDN')),
                ('datamin', models.FloatField(blank=True, help_text='Minimum value from pixels within 99% of solar radius', null=True, verbose_name='DATAMIN')),
                ('datamin2', models.FloatField(blank=True, help_text='Minimum value from all pixels', null=True, verbose_name='DATAMIN2')),
                ('datarms', models.FloatField(blank=True, help_text='Rms deviation from the mean value of pixels within 99% of solar radius', null=True, verbose_name='DATARMS')),
                ('datarms2', models.FloatField(blank=True, help_text='Rms deviation from the mean value of all pixels', null=True, verbose_name='DATARMS2')),
                ('datasign', models.BigIntegerField(blank=True, help_text='DATASIGN: sign of observable quantity wrt Sun center', null=True, verbose_name='DATASIGN')),
                ('dataske2', models.FloatField(blank=True, help_text='Skewness from the mean value of all pixels', null=True, verbose_name='DATASKE2')),
                ('dataskew', models.FloatField(blank=True, help_text='Skewness from the mean value of pixels within 99% of solar radius', null=True, verbose_name='DATASKEW')),
                ('datavals', models.BigIntegerField(blank=True, help_text='Actual number of data values in images (pixels)', null=True, verbose_name='DATAVALS')),
                ('date', models.DateTimeField(blank=True, help_text='Date_time of processing; ISO 8601 format UTC', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text='DATE_OBS = T_OBS - EXPTIME/2.0', null=True, verbose_name='DATE-OBS')),
                ('distcoef', models.TextField(blank=True, help_text='path to the distortion coefficient table used to produce the data', null=True, verbose_name='DISTCOEF')),
                ('dsun_obs', models.FloatField(blank=True, help_text='Distance from SDO to Sun center.', null=True, verbose_name='DSUN_OBS')),
                ('dsun_ref', models.FloatField(blank=True, help_text='Astronomical Unit', null=True, verbose_name='DSUN_REF')),
                ('hcamid', models.BigIntegerField(blank=True, help_text='HMI_SEQ_ID_EXP_PATH', null=True, verbose_name='HCAMID')),
                ('hcftid', models.BigIntegerField(blank=True, help_text='HMI_SEQ_ID_FOCUS', null=True, verbose_name='HCFTID')),
                ('hflid', models.BigIntegerField(blank=True, help_text='HMI_SEQ_ID_FRAMELIST', null=True, verbose_name='HFLID')),
                ('instrume', models.TextField(blank=True, help_text='For HMI: HMI_SIDE1, HMI_FRONT2, or HMI_COMBINED', null=True, verbose_name='INSTRUME')),
                ('lutquery', models.TextField(blank=True, help_text='query used for the look-up tables', null=True, verbose_name='LUTQUERY')),
                ('lvl_num', models.FloatField(blank=True, null=True, verbose_name='LVL_NUM')),
                ('missvals', models.BigIntegerField(blank=True, help_text='Missing values: TOTVALS - DATAVALS', null=True, verbose_name='MISSVALS')),
                ('obs_vn', models.FloatField(blank=True, help_text='velocity of the observer solar-northward (heliographic). + to north', null=True, verbose_name='OBS_VN')),
                ('obs_vr', models.FloatField(blank=True, help_text='velocity of the observer in radial direction. + is away from Sun', null=True, verbose_name='OBS_VR')),
                ('obs_vw', models.FloatField(blank=True, help_text='velocity of the observer solar-westward. + in rough direction of Earth orbit', null=True, verbose_name='OBS_VW')),
                ('odicoeff', models.BigIntegerField(blank=True, help_text='order of the distortion-coefficient polynomials', null=True, verbose_name='ODICOEFF')),
                ('origin', models.TextField(blank=True, help_text='ORIGIN: location where file made', null=True, verbose_name='ORIGIN')),
                ('orocoeff', models.BigIntegerField(blank=True, help_text='order of the differential-rotation polynomials', null=True, verbose_name='OROCOEFF')),
                ('polcalm', models.BigIntegerField(blank=True, help_text='method used by the polarization calibration subroutine', null=True, verbose_name='POLCALM')),
                ('qlook', models.BigIntegerField(blank=True, help_text='QLOOK: 0=final data, 1=quick-look data', null=True, verbose_name='QLOOK')),
                ('quality', models.BigIntegerField(blank=True, help_text='Level 1.5 Quality word', null=True, verbose_name='QUALITY')),
                ('quallev1', models.BigIntegerField(blank=True, help_text='Logical OR on the bits of the level 1 Quality word', null=True, verbose_name='QUALLEV1')),
                ('r_sun', models.FloatField(blank=True, null=True, verbose_name='R_SUN')),
                ('recnum', models.BigIntegerField(blank=True, help_text='JSOC Record Number', null=True, verbose_name='RECNUM')),
                ('rotcoef', models.TextField(blank=True, help_text='path to the differential-rotation coefficient table used to produce the data', null=True, verbose_name='ROTCOEF')),
                ('rsun_obs', models.FloatField(blank=True, help_text='angular radius of Sun. Corresponds to arcsin(RSUN_REF/DSUN_OBS)', null=True, verbose_name='RSUN_OBS')),
                ('rsun_ref', models.FloatField(blank=True, help_text='Reference radius of the Sun: 696,000,000.0 m', null=True, verbose_name='RSUN_REF')),
                ('satvals', models.BigIntegerField(blank=True, help_text='Saturated values', null=True, verbose_name='SATVALS')),
                ('segment', models.TextField(blank=True, help_text='JSOC Segment File Name', null=True, verbose_name='SEGMENT')),
                ('series', models.TextField(blank=True, help_text='JSOC Series Name', null=True, verbose_name='SERIES')),
                ('sintnum', models.BigIntegerField(blank=True, help_text='number of points used for the spatial interpolation', null=True, verbose_name='SINTNUM')),
                ('slotnum', models.BigIntegerField(blank=True, help_text='JSOC Slot Number', null=True, verbose_name='SLOTNUM')),
                ('source', models.TextField(blank=True, help_text='level 1 filtergrams used to produce the observables', null=True, verbose_name='SOURCE')),
                ('sunum', models.BigIntegerField(blank=True, help_text='JSOC Storage Unit Number', null=True, verbose_name='SUNUM')),
                ('t_obs', models.DateTimeField(blank=True, help_text='nominal time', null=True, verbose_name='T_OBS')),
                ('t_rec', models.DateTimeField(blank=True, help_text='Slot time', null=True, verbose_name='T_REC')),
                ('telescop', models.TextField(blank=True, help_text='For HMI: SDO/HMI', null=True, verbose_name='TELESCOP')),
                ('tfront', models.FloatField(blank=True, help_text='temperature keyword for polarization calibration', null=True, verbose_name='TFRONT')),
                ('tintnum', models.BigIntegerField(blank=True, help_text='number of points used for the temporal interpolation', null=True, verbose_name='TINTNUM')),
                ('totvals', models.BigIntegerField(blank=True, help_text='Expected number of data values (pixels)', null=True, verbose_name='TOTVALS')),
                ('tsel', models.FloatField(blank=True, help_text='temperature keyword for polarization calibration', null=True, verbose_name='TSEL')),
                ('wavelnth', models.FloatField(blank=True, help_text='For HMI: 6173.3 Angstroms', null=True, verbose_name='WAVELNTH')),
                ('wcsname', models.TextField(blank=True, help_text='WCS system name', null=True, verbose_name='WCSNAME')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_hmimagnetogramlevel15', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_hmimagnetogramlevel15', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'HMI magnetogram level 1.5 metadata',
                'verbose_name_plural': 'HMI magnetogram level 1.5 metadata',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
    ]
