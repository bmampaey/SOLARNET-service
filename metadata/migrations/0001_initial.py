from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dataset', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('name', models.CharField(max_length=30, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Xrt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('achf_ver', models.IntegerField(blank=True, help_text='AC Huffman table version', null=True, verbose_name='ACHF_VER')),
                ('aec_flg', models.TextField(blank=True, help_text='Automatic Exposure Control; 1: Off, 2: On', null=True, verbose_name='AEC_FLG')),
                ('aec_rslt', models.IntegerField(blank=True, help_text='Result of AEC calculation used to determine exposure time; 0: Normal, 1: Underexposure, 2: Overexposure, 3: No feedback', null=True, verbose_name='AEC_RSLT')),
                ('aec_tnum', models.IntegerField(blank=True, help_text='AEC table number; 0: Out of RB, 1: In RB', null=True, verbose_name='AEC_TNUM')),
                ('bitc_ver', models.IntegerField(blank=True, help_text='Bit compression lookup table version', null=True, verbose_name='BITC_VER')),
                ('bitcomp1', models.IntegerField(blank=True, help_text='Compression table keyword', null=True, verbose_name='BITCOMP1')),
                ('bitspp', models.FloatField(blank=True, null=True, verbose_name='BITSPP')),
                ('bytecnt', models.IntegerField(blank=True, null=True, verbose_name='BYTECNT')),
                ('cal_info', models.IntegerField(blank=True, help_text='CCD image type; 0: Calibration image, 1: Observation image', null=True, verbose_name='CAL_INFO')),
                ('calimage', models.TextField(blank=True, help_text='CCD readout port (from CAL INFO)', null=True, verbose_name='CALIMAGE')),
                ('caltype', models.IntegerField(blank=True, null=True, verbose_name='CALTYPE')),
                ('ccd_read', models.IntegerField(blank=True, help_text='CCD readout port; 0: right, 1: left', null=True, verbose_name='CCD_READ')),
                ('ccd_temp', models.IntegerField(blank=True, help_text='CCD temperature raw', null=True, verbose_name='CCD_TEMP')),
                ('ccd_tmpc', models.FloatField(blank=True, help_text='CCD temperature, derived from CCD TEMP', null=True, verbose_name='CCD_TMPC')),
                ('cdelt1', models.FloatField(blank=True, help_text='Horizontal pixel size (PLATESCALE X SUMROW)', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='Vertical pixel size (PLATESCALE X SUMCOL)', null=True, verbose_name='CDELT2')),
                ('chip_sum', models.IntegerField(blank=True, null=True, verbose_name='CHIP_SUM')),
                ('crlt_obs', models.FloatField(blank=True, null=True, verbose_name='CRLT_OBS')),
                ('crota1', models.FloatField(blank=True, help_text='Angle between x-axis of image (same as x-axis of CCD) and E-W axis of heliocentric coordinates (SAT ROT + INST ROT)', null=True, verbose_name='CROTA1')),
                ('crota2', models.FloatField(blank=True, help_text='Angle between y-axis of image and N-S axis of heliocentric coordinates (SAT ROT + INST ROT); CROTA1 and CROTA2 are identical for XRT', null=True, verbose_name='CROTA2')),
                ('crpix1', models.FloatField(blank=True, help_text='Column number of Sun center pixel (sometimes negative)', null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, help_text='Row number of Sun center pixel (sometimes negative)', null=True, verbose_name='CRPIX2')),
                ('crval1', models.FloatField(blank=True, help_text='Number of arcseconds of the center of the sun from the reference position in the elevation direction (N-S); positive is to Solar North', null=True, verbose_name='CRVAL1')),
                ('crval2', models.FloatField(blank=True, help_text='Number of arcseconds of the center of the sun from the reference position in the elevation direction (N-S); positive is to Solar North', null=True, verbose_name='CRVAL2')),
                ('ctime', models.DateTimeField(blank=True, help_text='Same value as DATE OBS, but in a different format', null=True, verbose_name='CTIME')),
                ('ctype1', models.TextField(blank=True, help_text='Type of units (label) of horizontal axis', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='Type of units (label) of vertical axis', null=True, verbose_name='CTYPE2')),
                ('cunit1', models.TextField(blank=True, help_text='Horizontal units', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='Vertical Units', null=True, verbose_name='CUNIT2')),
                ('data_lev', models.IntegerField(blank=True, help_text='Data Level; running xrt prep.pro will change 0 to 1', null=True, verbose_name='DATA_LEV')),
                ('datatype', models.TextField(blank=True, help_text='Science or engineering data; darks and flats are considered engineering data', null=True, verbose_name='DATATYPE')),
                ('date', models.DateTimeField(blank=True, help_text='Date and time of file creation', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text="UTC time when exposure began ('T' is character 'T')", null=True, verbose_name='DATE_OBS')),
                ('date_rf0', models.DateTimeField(blank=True, help_text='Date and time of Level 0 reformatting', null=True, verbose_name='DATE_RF0')),
                ('date_rf1', models.DateTimeField(blank=True, null=True, verbose_name='DATE_RF1')),
                ('dchf_ver', models.IntegerField(blank=True, help_text='DC Huffman table version', null=True, verbose_name='DCHF_VER')),
                ('dsun_obs', models.FloatField(blank=True, null=True, verbose_name='DSUN_OBS')),
                ('e_etim', models.IntegerField(blank=True, null=True, verbose_name='E_ETIM')),
                ('e_etim_e', models.IntegerField(blank=True, null=True, verbose_name='E_ETIM_E')),
                ('e_etim_m', models.IntegerField(blank=True, null=True, verbose_name='E_ETIM_M')),
                ('e_fw1_p', models.DateTimeField(blank=True, help_text='Filter Wheel 1 position', null=True, verbose_name='E_FW1_P')),
                ('e_fw1_po', models.IntegerField(blank=True, help_text='Filter Wheel 1 course position (internal diagnostic format)', null=True, verbose_name='E_FW1_PO')),
                ('e_fw1_st', models.IntegerField(blank=True, help_text='Filter Wheel 1 status', null=True, verbose_name='E_FW1_ST')),
                ('e_fw2_p', models.DateTimeField(blank=True, help_text='Filter Wheel 2 position', null=True, verbose_name='E_FW2_P')),
                ('e_fw2_po', models.IntegerField(blank=True, help_text='Filter Wheel 2 course position (internal diagnostic format)', null=True, verbose_name='E_FW2_PO')),
                ('e_fw2_st', models.IntegerField(blank=True, help_text='Filter Wheel 2 status', null=True, verbose_name='E_FW2_ST')),
                ('e_lclock', models.IntegerField(blank=True, help_text='Time at which exposure command processing began, local clock, converted to microsecond', null=True, verbose_name='E_LCLOCK')),
                ('e_sclock', models.BigIntegerField(blank=True, help_text='Spacecraft clock of most recent status request prior to arrival of exposure command', null=True, verbose_name='E_SCLOCK')),
                ('e_sh_ccw', models.IntegerField(blank=True, help_text='Waiting counterclockwise exposure time', null=True, verbose_name='E_SH_CCW')),
                ('e_sh_clo', models.IntegerField(blank=True, help_text='Time CCD EXPOSE and OPENOUT signals were lowered (low 24 bits), converted to microsecond', null=True, verbose_name='E_SH_CLO')),
                ('e_sh_cw', models.IntegerField(blank=True, help_text='Waiting clockwise exposure time', null=True, verbose_name='E_SH_CW')),
                ('e_sh_err', models.IntegerField(blank=True, help_text='0: No error, 1: Shutter command error', null=True, verbose_name='E_SH_ERR')),
                ('e_sh_ope', models.IntegerField(blank=True, help_text='Time CCD EXPOSE and OPENOUT signals were raised (low 24 bits), converted to microsecond', null=True, verbose_name='E_SH_OPE')),
                ('e_sh_pos', models.IntegerField(blank=True, help_text='Shutter encoder position', null=True, verbose_name='E_SH_POS')),
                ('e_sh_wa', models.IntegerField(blank=True, help_text='Waiting position A', null=True, verbose_name='E_SH_WA')),
                ('e_sh_wb', models.IntegerField(blank=True, help_text='Waiting position B', null=True, verbose_name='E_SH_WB')),
                ('e_sh_wc', models.IntegerField(blank=True, help_text='Waiting position C', null=True, verbose_name='E_SH_WC')),
                ('e_ttn', models.IntegerField(blank=True, help_text='Rev. number of exposure table', null=True, verbose_name='E_TTN')),
                ('e_vlc', models.IntegerField(blank=True, help_text='VLS closed microswitch; 0: Off (VLS not fully open), 1: On (VLS fully open)', null=True, verbose_name='E_VLC')),
                ('e_vlc_s', models.TextField(blank=True, help_text='State of VLS', null=True, verbose_name='E_VLC_')),
                ('e_vlo', models.IntegerField(blank=True, help_text='VLS open microswitch; 0: Off (VLS not fully open), 1: On (VLS fully open)', null=True, verbose_name='E_VLO')),
                ('e_vlo_s', models.TextField(blank=True, help_text='State of VLS', null=True, verbose_name='E_VLO_')),
                ('ec_cd_m_s', models.TextField(blank=True, help_text='Cadence mode as name', null=True, verbose_name='EC_CD_M_')),
                ('ec_cd_mo', models.IntegerField(blank=True, help_text='Cadence mode', null=True, verbose_name='EC_CD_MO')),
                ('ec_einde', models.IntegerField(blank=True, help_text='Exposure Index', null=True, verbose_name='EC_EINDE')),
                ('ec_fw1', models.IntegerField(blank=True, help_text='Filter Wheel 1 position', null=True, verbose_name='EC_FW1')),
                ('ec_fw1_s', models.TextField(blank=True, help_text='Filter Wheel 1 position as name', null=True, verbose_name='EC_FW1_')),
                ('ec_fw2', models.IntegerField(blank=True, help_text='Filter Wheel 2 position', null=True, verbose_name='EC_FW2')),
                ('ec_fw2_s', models.TextField(blank=True, help_text='Filter Wheel 2 position as name', null=True, verbose_name='EC_FW2_')),
                ('ec_id', models.IntegerField(blank=True, help_text="Unique identiffer, 'main ID'", null=True, verbose_name='EC_ID')),
                ('ec_imty_s', models.TextField(blank=True, help_text='Image type; a dark is taken with the shutter closed', null=True, verbose_name='EC_IMTY_')),
                ('ec_imtyp', models.IntegerField(blank=True, help_text='Image type; 0: Normal, 1: Dark (closed shutter)', null=True, verbose_name='EC_IMTYP')),
                ('ec_index', models.IntegerField(blank=True, help_text='Redundant to EC EINDE; consider this keyword obsolete', null=True, verbose_name='EC_INDEX')),
                ('ec_vl', models.IntegerField(blank=True, help_text='Visible light shutter during exposure; 0: Closed, 1: Open', null=True, verbose_name='EC_VL')),
                ('ec_vl_s', models.TextField(blank=True, help_text='Visible light shutter during exposure as name', null=True, verbose_name='EC_VL_')),
                ('effport', models.TextField(blank=True, help_text='Rectified readout port', null=True, verbose_name='EFFPORT')),
                ('exccdex', models.IntegerField(blank=True, help_text='Duration of CCD EXPOSE in microsecond; this is the correct value to use for dark exposure times', null=True, verbose_name='EXCCDEX')),
                ('expmpas', models.DateTimeField(blank=True, help_text='Single or multipass exposure', null=True, verbose_name='EXPMPAS')),
                ('exptime', models.FloatField(blank=True, help_text='Requested exposure time in seconds (calculated from EC_EINDE and exposure table)', null=True, verbose_name='EXPTIME')),
                ('fileorig', models.TextField(blank=True, help_text='Original filename used by level 0 reformatter', null=True, verbose_name='FILEORIG')),
                ('flflg', models.TextField(blank=True, help_text='Indicates if flare flag set or not', null=True, verbose_name='FLFLG')),
                ('foc_pos', models.IntegerField(blank=True, help_text='Focus position', null=True, verbose_name='FOC_POS')),
                ('fovx', models.FloatField(blank=True, help_text='Width of field of view x-axis; equivalent to NAXIS1 X CDELT1', null=True, verbose_name='FOVX')),
                ('fovy', models.FloatField(blank=True, help_text='Width of field of view y-axis; equivalent to NAXIS2 X CDELT2', null=True, verbose_name='FOVY')),
                ('hktsync', models.IntegerField(blank=True, help_text='True if fields derived from housekeeping data have been updated. (That is, they are not missing from the database.) Default is false.', null=True, verbose_name='HKTSYNC')),
                ('hlz', models.TextField(blank=True, help_text='Indicates whether Hinode is in or out of Hight Latitude Zone region', null=True, verbose_name='HLZ')),
                ('img_mode', models.IntegerField(blank=True, help_text='Image mode (source of exposure trigger); 1: Table and manual, 2: Automatic Region Selection Patrol, 3: Flare Detection Patrol', null=True, verbose_name='IMG_MODE')),
                ('imgcomp1', models.IntegerField(blank=True, help_text='Compression table keyword', null=True, verbose_name='IMGCOMP1')),
                ('inst_rot', models.FloatField(blank=True, help_text='Difference between spacecraft y-axis and image y-axis', null=True, verbose_name='INST_ROT')),
                ('instrume', models.TextField(blank=True, help_text='Name of the instrument; reformatter only retrieves XRT records', null=True, verbose_name='INSTRUME')),
                ('join_sb', models.TextField(blank=True, help_text='Joint observation; E=EIS, S=SOT, X=XRT', null=True, verbose_name='JOIN_SB')),
                ('jop_id', models.IntegerField(blank=True, help_text='Identier of JOP', null=True, verbose_name='JOP_ID')),
                ('main_cnt', models.IntegerField(blank=True, help_text='OT number of times to repeat main loop', null=True, verbose_name='MAIN_CNT')),
                ('main_pos', models.IntegerField(blank=True, help_text='OT main-routine position', null=True, verbose_name='MAIN_POS')),
                ('main_rpt', models.IntegerField(blank=True, help_text='OT current main-routine iteration', null=True, verbose_name='MAIN_RPT')),
                ('mdp_clk', models.BigIntegerField(blank=True, help_text='MDP  clock  in  units  of  1/512th   seconds;  same  as E SCLOCK', null=True, verbose_name='MDP_CLK')),
                ('naxis', models.IntegerField(blank=True, help_text='Number of axes in the image', null=True, verbose_name='NAXIS')),
                ('naxis1', models.IntegerField(blank=True, help_text='Full image size in x', null=True, verbose_name='NAXIS1')),
                ('naxis2', models.IntegerField(blank=True, help_text='Full image size in y', null=True, verbose_name='NAXIS2')),
                ('noaa_num', models.IntegerField(blank=True, help_text='AR Number as assigned by NOAA', null=True, verbose_name='NOAA_NUM')),
                ('num_pcks', models.IntegerField(blank=True, help_text='Data packet keyword', null=True, verbose_name='NUM_PCKS')),
                ('obs_dec', models.TextField(blank=True, help_text='A few sentences describing the properties of the obser- vation.', null=True, verbose_name='OBS_DEC')),
                ('obs_mode', models.TextField(blank=True, null=True, verbose_name='OBS_MODE')),
                ('obs_num', models.IntegerField(blank=True, help_text='Equal to OBS ID', null=True, verbose_name='OBS_NUM')),
                ('observer', models.TextField(blank=True, help_text='Name(s) of Chief Observer', null=True, verbose_name='OBSERVER')),
                ('obstitle', models.TextField(blank=True, help_text='Title of observation', null=True, verbose_name='OBSTITLE')),
                ('obt_end', models.BigIntegerField(blank=True, help_text='Spacecraft clock time when CCD EXPOSE was lowered; this is E SH CLO converted to spacecraft clock time', null=True, verbose_name='OBT_END')),
                ('obt_time', models.BigIntegerField(blank=True, help_text='Spacecraft clock time when CCD EXPOSE was raised; this is E SH OPE converted to spacecraft clock time', null=True, verbose_name='OBT_TIME')),
                ('orig_rf0', models.TextField(blank=True, help_text='Where the level 0 file was created', null=True, verbose_name='ORIG_RF0')),
                ('orig_rf1', models.DateTimeField(blank=True, null=True, verbose_name='ORIG_RF1')),
                ('origin', models.TextField(blank=True, help_text='Origin of the Chief Observer', null=True, verbose_name='ORIGIN')),
                ('p1col', models.IntegerField(blank=True, help_text='y-coordinate of beginning, or lower left hand corner, pixel in image FOV; same as RPOS COL', null=True, verbose_name='P1COL')),
                ('p1row', models.IntegerField(blank=True, help_text='x-coordinate of beginning, or lower left hand corner, pixel in image FOV; same as RPOS ROW', null=True, verbose_name='P1ROW')),
                ('p2col', models.IntegerField(blank=True, help_text='y-coordinate of ending, or upper right hand corner, pixel in image FOV; same as RPOS COL + RSIZ COL - 1', null=True, verbose_name='P2COL')),
                ('p2row', models.IntegerField(blank=True, help_text='x-coordinate of ending, or upper right hand corner, pixel in image FOV; same as RPOS ROW + RSIZ ROW - 1', null=True, verbose_name='P2ROW')),
                ('parm_ver', models.IntegerField(blank=True, help_text='OT parameter table version number', null=True, verbose_name='PARM_VER')),
                ('pck_sn0', models.IntegerField(blank=True, help_text='Data packet keyword', null=True, verbose_name='PCK_SN0')),
                ('pck_sn1', models.IntegerField(blank=True, help_text='Data packet keyword', null=True, verbose_name='PCK_SN1')),
                ('pixcnt', models.IntegerField(blank=True, null=True, verbose_name='PIXCNT')),
                ('planner', models.TextField(blank=True, help_text='Name(s) of Chief Planner', null=True, verbose_name='PLANNER')),
                ('platescl', models.FloatField(blank=True, help_text='Platescale, in units of arcseconds per pixel', null=True, verbose_name='PLATESCL')),
                ('pos_col', models.IntegerField(blank=True, help_text='CCD column number of start of image (original value multiplied by 8 to get number of pixels)', null=True, verbose_name='POS_COL')),
                ('pos_row', models.IntegerField(blank=True, help_text='CCD row number of start of image (original value mul- tiplied by 8 to get number of pixels)', null=True, verbose_name='POS_ROW')),
                ('prog_no', models.IntegerField(blank=True, help_text='OT program number', null=True, verbose_name='PROG_NO')),
                ('prog_ver', models.IntegerField(blank=True, help_text='MDP observation table program version number', null=True, verbose_name='PROG_VER')),
                ('qtab_ver', models.IntegerField(blank=True, help_text='Quantization table version', null=True, verbose_name='QTAB_VER')),
                ('qtable1', models.IntegerField(blank=True, help_text='Compression table keyword', null=True, verbose_name='QTABLE1')),
                ('readport', models.TextField(blank=True, help_text='CCD readout port', null=True, verbose_name='READPORT')),
                ('rectify', models.IntegerField(blank=True, help_text='Status of rectification to put solar south-east corner at the start of the CCD image', null=True, verbose_name='RECTIFY')),
                ('roi_h_si', models.IntegerField(blank=True, help_text='ROI horizontal size; 1: 64, 2: 128, 3: 192, 4: 256, 6: 384, 8: 512, 12: 768, 16: 1024, 24: 1540, 32: 2048; (original value multiplied by 64 to get number of pixels)', null=True, verbose_name='ROI_H_SI')),
                ('roi_v_si', models.IntegerField(blank=True, help_text='ROI vertical size; 1: 64, 2: 128, 3: 192, 4: 256, 6: 384, 8: 512, 12: 768, 16: 1024, 24: 1540, 32: 2048; (original value multiplied by 64 to get number of pixels)', null=True, verbose_name='ROI_V_SI')),
                ('rpos_col', models.IntegerField(blank=True, help_text='The rectified coordinate, equivalent to POS COL, as though the image had been read out with this coordinate.  If READPORT=R, RPOS COL=POS COL; otherwise RPOS CPOS COL.', null=True, verbose_name='RPOS_COL')),
                ('rpos_row', models.IntegerField(blank=True, help_text='Rectified POS ROW. Always the same as POS ROW.', null=True, verbose_name='RPOS_ROW')),
                ('rsiz_col', models.IntegerField(blank=True, help_text='Rectified SIZ COL. Always the same as SIZ COL.', null=True, verbose_name='RSIZ_COL')),
                ('rsiz_row', models.IntegerField(blank=True, help_text='Rectified SIZ ROW. Always the same as SIZ ROW.', null=True, verbose_name='RSIZ_ROW')),
                ('rsun_obs', models.FloatField(blank=True, null=True, verbose_name='RSUN_OBS')),
                ('rsun_ref', models.FloatField(blank=True, null=True, verbose_name='RSUN_REF')),
                ('s_dat_id', models.IntegerField(blank=True, help_text='Type of status packet this record was created from: 0: Not used, 1: Normal status, 2: Normal and extended status, 3: Normal status and memory, 4: Not used, 5: Standard HDR only, 6: Extended status, 7: Memory', null=True, verbose_name='S_DAT_ID')),
                ('s_dat_m', models.IntegerField(blank=True, help_text='0: Transfer to Kagoshima Space Center (KSC) and Sagamihara Satellite Operation Center (SSOC); 1: Mon- itor only at KSC', null=True, verbose_name='S_DAT_M')),
                ('s_instru', models.IntegerField(blank=True, help_text='Instrument number', null=True, verbose_name='S_INSTRU')),
                ('s_sp_siz', models.IntegerField(blank=True, help_text='Status packet size; maximum value is 609, including header.', null=True, verbose_name='S_SP_SIZ')),
                ('saa', models.TextField(blank=True, help_text='Indicates whether Hinode is in or out of a South Atlantic Anomaly region', null=True, verbose_name='SAA')),
                ('sat_rot', models.FloatField(blank=True, help_text='Difference between Solar north and y-axis of the satellite', null=True, verbose_name='SAT_ROT')),
                ('satellit', models.IntegerField(blank=True, help_text='Satellite number', null=True, verbose_name='SATELLIT')),
                ('sc_attx', models.FloatField(blank=True, help_text='Spacecraft attitude in longitude', null=True, verbose_name='SC_ATTX')),
                ('sc_atty', models.FloatField(blank=True, help_text='Spacecraft attitude in latitude', null=True, verbose_name='SC_ATTY')),
                ('sci_obj', models.DateTimeField(blank=True, help_text='Up to 5 target phenomena selected from list.', null=True, verbose_name='SCI_OBJ')),
                ('sci_obs', models.DateTimeField(blank=True, help_text='Target phenomena.', null=True, verbose_name='SCI_OBS')),
                ('seqn_cnt', models.IntegerField(blank=True, help_text='OT current sequence table repeat count', null=True, verbose_name='SEQN_CNT')),
                ('seqn_no', models.IntegerField(blank=True, help_text='OT sequence table number', null=True, verbose_name='SEQN_NO')),
                ('seqn_pos', models.IntegerField(blank=True, help_text='OT sequence table position', null=True, verbose_name='SEQN_POS')),
                ('seqn_rpt', models.IntegerField(blank=True, help_text='OT sequence table repeat count', null=True, verbose_name='SEQN_RPT')),
                ('seqn_ver', models.IntegerField(blank=True, help_text='OT sequence table version number', null=True, verbose_name='SEQN_VER')),
                ('siz_col', models.IntegerField(blank=True, help_text='Horizontal size of ROI, derived from above; value is 0 if ROI H SIZE is reserved', null=True, verbose_name='SIZ_COL')),
                ('siz_row', models.IntegerField(blank=True, help_text='Vertical size of ROI, derived from above; value is 0 if ROI V SIZE is reserved', null=True, verbose_name='SIZ_ROW')),
                ('solar_b0', models.FloatField(blank=True, null=True, verbose_name='SOLAR_B0')),
                ('subr_cnt', models.IntegerField(blank=True, help_text='OT sequential number of this subroutine in the main rou- tine', null=True, verbose_name='SUBR_CNT')),
                ('subr_no', models.IntegerField(blank=True, help_text='OT subroutine number being executed', null=True, verbose_name='SUBR_NO')),
                ('subr_pos', models.IntegerField(blank=True, help_text='OT loop count for current subroutine', null=True, verbose_name='SUBR_POS')),
                ('subr_rpt', models.IntegerField(blank=True, help_text='OT number of times current subroutine is repeated', null=True, verbose_name='SUBR_RPT')),
                ('target', models.TextField(blank=True, help_text='Indicates the observation region. Flare site used when flare flag is set. Source of information observation planning database, or telemetry if flare flag is set.', null=True, verbose_name='TARGET')),
                ('telescop', models.TextField(blank=True, null=True, verbose_name='TELESCOP')),
                ('time_obs', models.DateTimeField(blank=True, help_text='Same value as DATE OBS, but in a different format', null=True, verbose_name='TIME-OBS')),
                ('timesys', models.TextField(blank=True, help_text='Time system of file header', null=True, verbose_name='TIMESYS')),
                ('tohbans', models.TextField(blank=True, help_text='Name(s) of Tohbans', null=True, verbose_name='TOHBANS')),
                ('tr_mode', models.TextField(blank=True, help_text='Tracking mode', null=True, verbose_name='TR_MODE')),
                ('ver_rf0', models.TextField(blank=True, help_text='Version of Level 0 reformatter', null=True, verbose_name='VER_RF0')),
                ('ver_rf1', models.TextField(blank=True, null=True, verbose_name='VER_RF1')),
                ('xcen', models.FloatField(blank=True, help_text='X-coordinate of center of field of view', null=True, verbose_name='XCEN')),
                ('xscale', models.FloatField(blank=True, help_text='Same as PLATESCL', null=True, verbose_name='XSCALE')),
                ('ycen', models.FloatField(blank=True, help_text='Filter Wheel 1 course position (internal diagnostic format)', null=True, verbose_name='YCEN')),
                ('yscale', models.FloatField(blank=True, help_text='Same as PLATESCL', null=True, verbose_name='YSCALE')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_xrt', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_xrt', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'XRT',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Themis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('accumul', models.IntegerField(blank=True, null=True, verbose_name='ACCUMUL')),
                ('actifmir', models.BooleanField(blank=True, null=True, verbose_name='ACTIFMIR')),
                ('alpha', models.FloatField(blank=True, null=True, verbose_name='ALPHA')),
                ('analys', models.TextField(blank=True, null=True, verbose_name='ANALYS')),
                ('angle', models.IntegerField(blank=True, null=True, verbose_name='ANGLE')),
                ('author', models.TextField(blank=True, null=True, verbose_name='AUTHOR')),
                ('azimuth', models.FloatField(blank=True, null=True, verbose_name='AZIMUTH')),
                ('beamex', models.BooleanField(blank=True, null=True, verbose_name='BEAMEX')),
                ('binning', models.TextField(blank=True, null=True, verbose_name='BINNING')),
                ('blank', models.IntegerField(blank=True, null=True, verbose_name='BLANK')),
                ('bscale', models.IntegerField(blank=True, null=True, verbose_name='BSCALE')),
                ('bunit', models.TextField(blank=True, null=True, verbose_name='BUNIT')),
                ('bzero', models.IntegerField(blank=True, null=True, verbose_name='BZERO')),
                ('cam_c', models.IntegerField(blank=True, null=True, verbose_name='CAM_C')),
                ('cam_f', models.IntegerField(blank=True, null=True, verbose_name='CAM_F')),
                ('camhl', models.TextField(blank=True, null=True, verbose_name='CAMHL')),
                ('cmp_desc', models.TextField(blank=True, null=True, verbose_name='CMP_DESC')),
                ('cmp_name', models.TextField(blank=True, null=True, verbose_name='CMP_NAME')),
                ('cmp_no', models.IntegerField(blank=True, null=True, verbose_name='CMP_NO')),
                ('cmp_type', models.TextField(blank=True, null=True, verbose_name='CMP_TYPE')),
                ('colstart', models.IntegerField(blank=True, null=True, verbose_name='COLSTART')),
                ('contact', models.TextField(blank=True, null=True, verbose_name='CONTACT')),
                ('count', models.IntegerField(blank=True, null=True, verbose_name='COUNT')),
                ('ctype1', models.TextField(blank=True, null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, null=True, verbose_name='CTYPE2')),
                ('ctype3', models.TextField(blank=True, null=True, verbose_name='CTYPE3')),
                ('date_obs', models.DateTimeField(blank=True, null=True, verbose_name='DATE_OBS')),
                ('delta', models.FloatField(blank=True, null=True, verbose_name='DELTA')),
                ('detector', models.TextField(blank=True, null=True, verbose_name='DETECTOR')),
                ('dimpix', models.TextField(blank=True, null=True, verbose_name='DIMPIX')),
                ('dist_ew', models.FloatField(blank=True, null=True, verbose_name='DIST_EW')),
                ('dist_ns', models.FloatField(blank=True, null=True, verbose_name='DIST_NS')),
                ('eleva', models.FloatField(blank=True, null=True, verbose_name='ELEVA')),
                ('email', models.TextField(blank=True, null=True, verbose_name='EMAIL')),
                ('emgain', models.IntegerField(blank=True, null=True, verbose_name='EMGAIN')),
                ('exptime', models.FloatField(blank=True, null=True, verbose_name='EXPTIME')),
                ('extend', models.BooleanField(blank=True, null=True, verbose_name='EXTEND')),
                ('fileacq', models.TextField(blank=True, null=True, verbose_name='FILEACQ')),
                ('filename', models.TextField(blank=True, null=True, verbose_name='FILENAME')),
                ('filterch', models.TextField(blank=True, null=True, verbose_name='FILTERCH')),
                ('filterfe', models.TextField(blank=True, null=True, verbose_name='FILTERFE')),
                ('filtersp', models.TextField(blank=True, null=True, verbose_name='FILTERSP')),
                ('grechel', models.TextField(blank=True, null=True, verbose_name='GRECHEL')),
                ('grpred', models.TextField(blank=True, null=True, verbose_name='GRPRED')),
                ('indlambd', models.IntegerField(blank=True, null=True, verbose_name='INDLAMBD')),
                ('indreg', models.IntegerField(blank=True, null=True, verbose_name='INDREG')),
                ('indstep', models.IntegerField(blank=True, null=True, verbose_name='INDSTEP')),
                ('indstepx', models.IntegerField(blank=True, null=True, verbose_name='INDSTEPX')),
                ('indstepy', models.IntegerField(blank=True, null=True, verbose_name='INDSTEPY')),
                ('institut', models.TextField(blank=True, null=True, verbose_name='INSTITUT')),
                ('instrume', models.TextField(blank=True, null=True, verbose_name='INSTRUME')),
                ('ixwidth', models.IntegerField(blank=True, null=True, verbose_name='IXWIDTH')),
                ('iywidth', models.IntegerField(blank=True, null=True, verbose_name='IYWIDTH')),
                ('latirc', models.FloatField(blank=True, null=True, verbose_name='LATIRC')),
                ('latitud', models.FloatField(blank=True, null=True, verbose_name='LATITUD')),
                ('latstart', models.IntegerField(blank=True, null=True, verbose_name='LATSTART')),
                ('lngstart', models.FloatField(blank=True, null=True, verbose_name='LNGSTART')),
                ('longcarr', models.FloatField(blank=True, null=True, verbose_name='LONGCARR')),
                ('longitud', models.FloatField(blank=True, null=True, verbose_name='LONGITUD')),
                ('longtrc', models.IntegerField(blank=True, null=True, verbose_name='LONGTRC')),
                ('naxis', models.IntegerField(blank=True, null=True, verbose_name='NAXIS')),
                ('naxis1', models.IntegerField(blank=True, null=True, verbose_name='NAXIS1')),
                ('naxis2', models.IntegerField(blank=True, null=True, verbose_name='NAXIS2')),
                ('naxis3', models.IntegerField(blank=True, null=True, verbose_name='NAXIS3')),
                ('nbcam', models.IntegerField(blank=True, null=True, verbose_name='NBCAM')),
                ('nblambd', models.IntegerField(blank=True, null=True, verbose_name='NBLAMBD')),
                ('nbreg', models.IntegerField(blank=True, null=True, verbose_name='NBREG')),
                ('nbstep', models.IntegerField(blank=True, null=True, verbose_name='NBSTEP')),
                ('nbstep_x', models.IntegerField(blank=True, null=True, verbose_name='NBSTEP_X')),
                ('nbstep_y', models.IntegerField(blank=True, null=True, verbose_name='NBSTEP_Y')),
                ('nburst', models.IntegerField(blank=True, null=True, verbose_name='NBURST')),
                ('nbwin', models.IntegerField(blank=True, null=True, verbose_name='NBWIN')),
                ('nobuf', models.IntegerField(blank=True, null=True, verbose_name='NOBUF')),
                ('nocam', models.IntegerField(blank=True, null=True, verbose_name='NOCAM')),
                ('nomask', models.TextField(blank=True, null=True, verbose_name='NOMASK')),
                ('nowin', models.IntegerField(blank=True, null=True, verbose_name='NOWIN')),
                ('nshutter', models.IntegerField(blank=True, null=True, verbose_name='NSHUTTER')),
                ('obj_id', models.TextField(blank=True, null=True, verbose_name='OBJ_ID')),
                ('object', models.TextField(blank=True, null=True, verbose_name='OBJECT')),
                ('obs_mode', models.TextField(blank=True, null=True, verbose_name='OBS_MODE')),
                ('obs_prog', models.TextField(blank=True, null=True, verbose_name='OBS_PROG')),
                ('obs_type', models.TextField(blank=True, null=True, verbose_name='OBS_TYPE')),
                ('observer', models.TextField(blank=True, null=True, verbose_name='OBSERVER')),
                ('offname', models.TextField(blank=True, null=True, verbose_name='OFFNAME')),
                ('offsets', models.BooleanField(blank=True, null=True, verbose_name='OFFSETS')),
                ('origin', models.TextField(blank=True, null=True, verbose_name='ORIGIN')),
                ('physpara', models.TextField(blank=True, null=True, verbose_name='PHYSPARA')),
                ('pipeline', models.BooleanField(blank=True, null=True, verbose_name='PIPELINE')),
                ('pol_conf', models.TextField(blank=True, null=True, verbose_name='POL_CONF')),
                ('pol_val', models.TextField(blank=True, null=True, verbose_name='POL_VAL')),
                ('polarang', models.FloatField(blank=True, null=True, verbose_name='POLARANG')),
                ('posrot', models.FloatField(blank=True, null=True, verbose_name='POSROT')),
                ('predang', models.IntegerField(blank=True, null=True, verbose_name='PREDANG')),
                ('prefente', models.FloatField(blank=True, null=True, verbose_name='PREFENTE')),
                ('pregain', models.IntegerField(blank=True, null=True, verbose_name='PREGAIN')),
                ('prog_id', models.TextField(blank=True, null=True, verbose_name='PROG_ID')),
                ('prog_num', models.IntegerField(blank=True, null=True, verbose_name='PROG_NUM')),
                ('qwp_name', models.TextField(blank=True, null=True, verbose_name='QWP_NAME')),
                ('rescient', models.TextField(blank=True, null=True, verbose_name='RESCIENT')),
                ('rowstart', models.IntegerField(blank=True, null=True, verbose_name='ROWSTART')),
                ('sci_obj', models.TextField(blank=True, null=True, verbose_name='SCI_OBJ')),
                ('seq_ind', models.IntegerField(blank=True, null=True, verbose_name='SEQ_IND')),
                ('seq_stok', models.TextField(blank=True, null=True, verbose_name='SEQ_STOK')),
                ('solar_b0', models.FloatField(blank=True, null=True, verbose_name='SOLAR_B0')),
                ('solar_p0', models.FloatField(blank=True, null=True, verbose_name='SOLAR_P0')),
                ('solar_r', models.FloatField(blank=True, null=True, verbose_name='SOLAR_R')),
                ('solrot_n', models.IntegerField(blank=True, null=True, verbose_name='SOLROT_N')),
                ('spatscal', models.FloatField(blank=True, null=True, verbose_name='SPATSCAL')),
                ('specscal', models.FloatField(blank=True, null=True, verbose_name='SPECSCAL')),
                ('step_x', models.IntegerField(blank=True, null=True, verbose_name='STEP_X')),
                ('step_y', models.IntegerField(blank=True, null=True, verbose_name='STEP_Y')),
                ('svector', models.FloatField(blank=True, null=True, verbose_name='SVECTOR')),
                ('syscoord', models.TextField(blank=True, null=True, verbose_name='SYSCOORD')),
                ('tcycle', models.IntegerField(blank=True, null=True, verbose_name='TCYCLE')),
                ('telescop', models.TextField(blank=True, null=True, verbose_name='TELESCOP')),
                ('tempbmsp', models.IntegerField(blank=True, null=True, verbose_name='TEMPBMSP')),
                ('tempcam', models.IntegerField(blank=True, null=True, verbose_name='TEMPCAM')),
                ('tempqwp1', models.IntegerField(blank=True, null=True, verbose_name='TEMPQWP1')),
                ('tempqwp2', models.IntegerField(blank=True, null=True, verbose_name='TEMPQWP2')),
                ('themisff', models.IntegerField(blank=True, null=True, verbose_name='THEMISFF')),
                ('timestep', models.IntegerField(blank=True, null=True, verbose_name='TIMESTEP')),
                ('tregion', models.IntegerField(blank=True, null=True, verbose_name='TREGION')),
                ('wavelnth', models.IntegerField(blank=True, null=True, verbose_name='WAVELNTH')),
                ('waveunit', models.IntegerField(blank=True, null=True, verbose_name='WAVEUNIT')),
                ('yfirst', models.BooleanField(blank=True, null=True, verbose_name='YFIRST')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_themis', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_themis', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'Themis',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SwapLevel1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('artefx', models.TextField(blank=True, help_text='(off,on,cosmic rays) on-board artefact removal', null=True, verbose_name='ARTEFX')),
                ('bscale', models.FloatField(blank=True, help_text='ratio of physical to array value at 0 offset', null=True, verbose_name='BSCALE')),
                ('bunit', models.TextField(blank=True, help_text='unit of physical value', null=True, verbose_name='BUNIT')),
                ('bzero', models.FloatField(blank=True, help_text='physical value for the array value 0', null=True, verbose_name='BZERO')),
                ('cap_mode', models.TextField(blank=True, help_text='(DS,CDS) capture mode', null=True, verbose_name='CAP_MODE')),
                ('cd1_1', models.FloatField(blank=True, help_text='WCS coordinate description matrix', null=True, verbose_name='CD1_1')),
                ('cd1_2', models.FloatField(blank=True, help_text='WCS coordinate description matrix', null=True, verbose_name='CD1_2')),
                ('cd2_1', models.FloatField(blank=True, help_text='WCS coordinate description matrix', null=True, verbose_name='CD2_1')),
                ('cd2_2', models.FloatField(blank=True, help_text='WCS coordinate description matrix', null=True, verbose_name='CD2_2')),
                ('cdelt1', models.FloatField(blank=True, help_text='average pixel scale along axis 1', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='average pixel scale along axis 2', null=True, verbose_name='CDELT2')),
                ('compress', models.TextField(blank=True, help_text='(off,lzw,jpeg) on-board compression algorithm', null=True, verbose_name='COMPRESS')),
                ('creator', models.TextField(blank=True, help_text='FITS creation software', null=True, verbose_name='CREATOR')),
                ('crota1', models.FloatField(blank=True, help_text='axis 1 to WCS rotation angle', null=True, verbose_name='CROTA1')),
                ('crota2', models.FloatField(blank=True, help_text='axis 2 to WCS rotation angle', null=True, verbose_name='CROTA2')),
                ('crpix1', models.FloatField(blank=True, help_text='reference point axis 1', null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, help_text='reference point axis 2', null=True, verbose_name='CRPIX2')),
                ('crval1', models.FloatField(blank=True, help_text='reference point WCS axis X', null=True, verbose_name='CRVAL1')),
                ('crval2', models.FloatField(blank=True, help_text='reference point WCS axis Y', null=True, verbose_name='CRVAL2')),
                ('ctype1', models.TextField(blank=True, help_text='WCS axis X', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='WCS axis Y', null=True, verbose_name='CTYPE2')),
                ('cunit1', models.TextField(blank=True, help_text='WCS axis X units', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='WCS axis Y units', null=True, verbose_name='CUNIT2')),
                ('datamax', models.FloatField(blank=True, help_text='maximum valid physical value', null=True, verbose_name='DATAMAX')),
                ('datamin', models.FloatField(blank=True, help_text='minimum valid physical value', null=True, verbose_name='DATAMIN')),
                ('date', models.DateTimeField(blank=True, help_text='UTC time of FITS file creation', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text='UTC time of observation', null=True, verbose_name='DATE-OBS')),
                ('detector', models.TextField(blank=True, help_text='HAS CMOS detector 1024x1024 pixels', null=True, verbose_name='DETECTOR')),
                ('dsun_obs', models.FloatField(blank=True, help_text='s/c distance from Sun', null=True, verbose_name='DSUN_OBS')),
                ('dtplar1', models.FloatField(blank=True, help_text='predicted time to prev large angle rotation', null=True, verbose_name='DTPLAR1')),
                ('dtplar2', models.FloatField(blank=True, help_text='predicted time to next large angle rotation', null=True, verbose_name='DTPLAR2')),
                ('eacqtime', models.FloatField(blank=True, help_text='end   acquisition time', null=True, verbose_name='EACQTIME')),
                ('exptime', models.FloatField(blank=True, help_text='commanded exposure time', null=True, verbose_name='EXPTIME')),
                ('file_raw', models.TextField(blank=True, help_text='raw telemetry filename', null=True, verbose_name='FILE_RAW')),
                ('file_tar', models.TextField(blank=True, help_text='raw telemetry package', null=True, verbose_name='FILE_TAR')),
                ('file_tmr', models.TextField(blank=True, help_text='SWTMR filename', null=True, verbose_name='FILE_TMR')),
                ('filename', models.TextField(blank=True, help_text='FITS filename', null=True, verbose_name='FILENAME')),
                ('filter', models.TextField(blank=True, help_text='Aluminum filter', null=True, verbose_name='FILTER')),
                ('firstcol', models.IntegerField(blank=True, help_text='first read-out detector column', null=True, verbose_name='FIRSTCOL')),
                ('firstrow', models.IntegerField(blank=True, help_text='first read-out detector row', null=True, verbose_name='FIRSTROW')),
                ('geod_alt', models.FloatField(blank=True, help_text='s/c WGS84 altitude', null=True, verbose_name='GEOD_ALT')),
                ('geod_lat', models.FloatField(blank=True, help_text='s/c sub-point geodetic latitude', null=True, verbose_name='GEOD_LAT')),
                ('geod_lon', models.FloatField(blank=True, help_text='s/c sub-point longitude', null=True, verbose_name='GEOD_LON')),
                ('gsex_obs', models.FloatField(blank=True, help_text='s/c Geocentric   Solar Ecliptic X', null=True, verbose_name='GSEX_OBS')),
                ('gsey_obs', models.FloatField(blank=True, help_text='s/c Geocentric   Solar Ecliptic Y', null=True, verbose_name='GSEY_OBS')),
                ('gsez_obs', models.FloatField(blank=True, help_text='s/c Geocentric   Solar Ecliptic Z', null=True, verbose_name='GSEZ_OBS')),
                ('hasblack', models.IntegerField(blank=True, help_text='HAS detector black  level', null=True, verbose_name='HASBLACK')),
                ('hasoffst', models.IntegerField(blank=True, help_text='HAS detector offset level', null=True, verbose_name='HASOFFST')),
                ('hasstdby', models.IntegerField(blank=True, help_text='HAS detector standby mode', null=True, verbose_name='HASSTDBY')),
                ('heex_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Ecliptic X', null=True, verbose_name='HEEX_OBS')),
                ('heey_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Ecliptic Y', null=True, verbose_name='HEEY_OBS')),
                ('heez_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Ecliptic Z', null=True, verbose_name='HEEZ_OBS')),
                ('hgln_obs', models.FloatField(blank=True, help_text='s/c heliographic longitude', null=True, verbose_name='HGLN_OBS')),
                ('hglt_obs', models.FloatField(blank=True, help_text='s/c heliographic latitude', null=True, verbose_name='HGLT_OBS')),
                ('instrume', models.TextField(blank=True, help_text='instrument name', null=True, verbose_name='INSTRUME')),
                ('is_proc', models.IntegerField(blank=True, help_text='on-board image processing', null=True, verbose_name='IS_PROC')),
                ('lang_rot', models.FloatField(blank=True, help_text='commanded large angle rotation component', null=True, verbose_name='LANG_ROT')),
                ('last_col', models.IntegerField(blank=True, help_text='last  read-out detector column', null=True, verbose_name='LAST_COL')),
                ('last_row', models.IntegerField(blank=True, help_text='last  read-out detector row', null=True, verbose_name='LAST_ROW')),
                ('led_pow', models.TextField(blank=True, help_text='calibration LED power', null=True, verbose_name='LED_POW')),
                ('led_sel', models.TextField(blank=True, help_text='calibration LED selection', null=True, verbose_name='LED_SEL')),
                ('level', models.IntegerField(blank=True, help_text='data processing level', null=True, verbose_name='LEVEL')),
                ('lonpole', models.FloatField(blank=True, help_text='native longitude of the celestial pole', null=True, verbose_name='LONPOLE')),
                ('los_alt', models.FloatField(blank=True, help_text='s/c LOS altitude (1000000=no atmosphere)', null=True, verbose_name='LOS_ALT')),
                ('lzwdecor', models.TextField(blank=True, help_text='LZW decorrelation', null=True, verbose_name='LZWDECOR')),
                ('naxis', models.IntegerField(blank=True, help_text='number of data axes', null=True, verbose_name='NAXIS')),
                ('naxis1', models.IntegerField(blank=True, help_text='length of data axis 1', null=True, verbose_name='NAXIS1')),
                ('naxis2', models.IntegerField(blank=True, help_text='length of data axis 2', null=True, verbose_name='NAXIS2')),
                ('nprescr', models.IntegerField(blank=True, help_text='# preserved pixels - cosmic rays', null=True, verbose_name='NPRESCR')),
                ('npreslzw', models.IntegerField(blank=True, help_text='# preserved pixels - LZW decorrelation', null=True, verbose_name='NPRESLZW')),
                ('object', models.TextField(blank=True, help_text='object observed', null=True, verbose_name='OBJECT')),
                ('obs_mode', models.TextField(blank=True, help_text='sun_cen, fix_off, var_off, cme_track', null=True, verbose_name='OBS_MODE')),
                ('origin', models.TextField(blank=True, help_text='Royal Observatory of Belgium', null=True, verbose_name='ORIGIN')),
                ('p2_roll', models.FloatField(blank=True, help_text='s/c roll', null=True, verbose_name='P2_ROLL')),
                ('p2_x0', models.FloatField(blank=True, help_text='s/c yaw', null=True, verbose_name='P2_X0')),
                ('p2_y0', models.FloatField(blank=True, help_text='s/c pitch', null=True, verbose_name='P2_Y0')),
                ('pav_rot0', models.FloatField(blank=True, help_text='commanded paving rotation component 0', null=True, verbose_name='PAV_ROT0')),
                ('pav_rot1', models.FloatField(blank=True, help_text='commanded paving rotation component 1', null=True, verbose_name='PAV_ROT1')),
                ('pga_gain', models.IntegerField(blank=True, help_text='PGA gain', null=True, verbose_name='PGA_GAIN')),
                ('pga_offs', models.IntegerField(blank=True, help_text='PGA offset', null=True, verbose_name='PGA_OFFS')),
                ('pn', models.IntegerField(blank=True, help_text='on-board priority number', null=True, verbose_name='PN')),
                ('readrdiv', models.IntegerField(blank=True, help_text='read-out rate divider', null=True, verbose_name='READRDIV')),
                ('rebin', models.TextField(blank=True, help_text='on-board rebin (2x2 pixel average)', null=True, verbose_name='REBIN')),
                ('recbias', models.IntegerField(blank=True, help_text='recoding lower limit', null=True, verbose_name='RECBIAS')),
                ('recnum', models.IntegerField(blank=True, help_text='recoding upper limit', null=True, verbose_name='RECNUM')),
                ('recoding', models.TextField(blank=True, help_text='(off,fixed,adaptive) on-board recoding', null=True, verbose_name='RECODING')),
                ('rsun_arc', models.FloatField(blank=True, help_text='photospheric solar radius', null=True, verbose_name='RSUN_ARC')),
                ('sacqtime', models.FloatField(blank=True, help_text='start acquisition time', null=True, verbose_name='SACQTIME')),
                ('sizcompi', models.IntegerField(blank=True, help_text='size of on-board compressed image', null=True, verbose_name='SIZCOMPI')),
                ('solar_ep', models.FloatField(blank=True, help_text='s/c ecliptic North to solar North angle', null=True, verbose_name='SOLAR_EP')),
                ('swavint', models.FloatField(blank=True, help_text='average intensity in calibrated image', null=True, verbose_name='SWAVINT')),
                ('swxcen', models.FloatField(blank=True, help_text='axis 1 location of solar center in lv0', null=True, verbose_name='SWXCEN')),
                ('swycen', models.FloatField(blank=True, help_text='axis 2 location of solar center in lv0', null=True, verbose_name='SWYCEN')),
                ('telescop', models.TextField(blank=True, help_text='satellite name', null=True, verbose_name='TELESCOP')),
                ('temp1det', models.FloatField(blank=True, help_text='detector temperature (SW HK T CF)', null=True, verbose_name='TEMP1DET')),
                ('temp2det', models.FloatField(blank=True, help_text='detector temperature (SW HK T CF)', null=True, verbose_name='TEMP2DET')),
                ('tempdark', models.FloatField(blank=True, help_text='temperature used in dark subtraction', null=True, verbose_name='TEMPDARK')),
                ('trantime', models.FloatField(blank=True, help_text='transferring time', null=True, verbose_name='TRANTIME')),
                ('trapelec', models.FloatField(blank=True, help_text='AE-8 MAX >  1MeV @ 725km model', null=True, verbose_name='TRAPELEC')),
                ('trapprot', models.FloatField(blank=True, help_text='AP-8 MAX > 10MeV @ 725km model', null=True, verbose_name='TRAPPROT')),
                ('ttemp1', models.TextField(blank=True, help_text='UTC time of detector temp 1st sample', null=True, verbose_name='TTEMP1')),
                ('ttemp2', models.TextField(blank=True, help_text='UTC time of detector temp 2nd sample', null=True, verbose_name='TTEMP2')),
                ('wavelnth', models.IntegerField(blank=True, help_text='bandpass peak response', null=True, verbose_name='WAVELNTH')),
                ('wcsname', models.TextField(blank=True, help_text='aligned with solar North', null=True, verbose_name='WCSNAME')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_swaplevel1', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_swaplevel1', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'SWAP level 1',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Rosa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('cadence', models.FloatField(blank=True, null=True, verbose_name='CADENCE')),
                ('cdelt1', models.FloatField(blank=True, help_text='Coordinate increment', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='Coordinate increment', null=True, verbose_name='CDELT2')),
                ('channel', models.TextField(blank=True, null=True, verbose_name='CHANNEL')),
                ('cunit1', models.TextField(blank=True, help_text='Axis units', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='Axis units', null=True, verbose_name='CUNIT2')),
                ('date', models.TextField(blank=True, help_text='Creation UTC (CCCC-MM-DD) date of FITS header', null=True, verbose_name='DATE')),
                ('extend', models.BigIntegerField(blank=True, help_text='FITS data may contain extensions', null=True, verbose_name='EXTEND')),
                ('goes_cls', models.TextField(blank=True, null=True, verbose_name='GOES_CLS')),
                ('instrume', models.TextField(blank=True, null=True, verbose_name='INSTRUME')),
                ('naxis', models.BigIntegerField(blank=True, help_text='Number of data axes', null=True, verbose_name='NAXIS')),
                ('naxis1', models.BigIntegerField(blank=True, null=True, verbose_name='NAXIS1')),
                ('naxis2', models.BigIntegerField(blank=True, null=True, verbose_name='NAXIS2')),
                ('obsrvtry', models.TextField(blank=True, null=True, verbose_name='OBSRVTRY')),
                ('pointing', models.TextField(blank=True, null=True, verbose_name='POINTING')),
                ('solarnet', models.FloatField(blank=True, null=True, verbose_name='SOLARNET')),
                ('target', models.TextField(blank=True, null=True, verbose_name='TARGET')),
                ('telescop', models.TextField(blank=True, null=True, verbose_name='TELESCOP')),
                ('wavelnth', models.FloatField(blank=True, help_text='Central wavelength of filter', null=True, verbose_name='WAVELNTH')),
                ('xposure', models.FloatField(blank=True, help_text='Exposure', null=True, verbose_name='XPOSURE')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_rosa', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_rosa', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'ROSA',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ibis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('baseclmp', models.BigIntegerField(blank=True, help_text='Baseline clamp value', null=True, verbose_name='BASECLMP')),
                ('binning', models.BigIntegerField(blank=True, help_text='BINNING FACTOR', null=True, verbose_name='BINNING')),
                ('bscale', models.FloatField(blank=True, help_text='TRUE=(FITS VALUE)*BSCALE + BZERO', null=True, verbose_name='BSCALE')),
                ('buf_info', models.BigIntegerField(blank=True, null=True, verbose_name='BUF_INFO')),
                ('bunit', models.TextField(blank=True, help_text='PIXEL VALUE', null=True, verbose_name='BUNIT')),
                ('bzero', models.FloatField(blank=True, help_text='THE OFFSET', null=True, verbose_name='BZERO')),
                ('ccd_temp', models.BigIntegerField(blank=True, help_text='CCD SENSOR TEMP', null=True, verbose_name='CCD_TEMP')),
                ('channel', models.TextField(blank=True, help_text='CAMERA IDENTIFER', null=True, verbose_name='CHANNEL')),
                ('date', models.DateTimeField(blank=True, help_text='DATE THE FILE WAS WRITTEN yyyy-mm-dd', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text='STARTING DATE AND TIME IN U.T.', null=True, verbose_name='DATE-OBS')),
                ('detector', models.TextField(blank=True, help_text='DETECTOR USED TO ACQUIRE THE DATA', null=True, verbose_name='DETECTOR')),
                ('dst_az', models.FloatField(blank=True, null=True, verbose_name='DST_AZ')),
                ('dst_bee0', models.FloatField(blank=True, null=True, verbose_name='DST_BEE0')),
                ('dst_el', models.FloatField(blank=True, null=True, verbose_name='DST_EL')),
                ('dst_ell0', models.FloatField(blank=True, null=True, verbose_name='DST_ELL0')),
                ('dst_gdrn', models.FloatField(blank=True, null=True, verbose_name='DST_GDRN')),
                ('dst_gpa', models.FloatField(blank=True, null=True, verbose_name='DST_GPA')),
                ('dst_hpa', models.FloatField(blank=True, null=True, verbose_name='DST_HPA')),
                ('dst_llvl', models.FloatField(blank=True, null=True, verbose_name='DST_LLVL')),
                ('dst_pee', models.FloatField(blank=True, null=True, verbose_name='DST_PEE')),
                ('dst_rv', models.FloatField(blank=True, null=True, verbose_name='DST_RV')),
                ('dst_saz', models.FloatField(blank=True, null=True, verbose_name='DST_SAZ')),
                ('dst_sdim', models.FloatField(blank=True, null=True, verbose_name='DST_SDIM')),
                ('dst_see', models.FloatField(blank=True, null=True, verbose_name='DST_SEE')),
                ('dst_sel', models.FloatField(blank=True, null=True, verbose_name='DST_SEL')),
                ('dst_slat', models.FloatField(blank=True, null=True, verbose_name='DST_SLAT')),
                ('dst_slng', models.FloatField(blank=True, null=True, verbose_name='DST_SLNG')),
                ('dst_tbl', models.FloatField(blank=True, null=True, verbose_name='DST_TBL')),
                ('dst_time', models.TextField(blank=True, null=True, verbose_name='DST_TIME')),
                ('dst_xgdr', models.FloatField(blank=True, null=True, verbose_name='DST_XGDR')),
                ('dst_ygdr', models.FloatField(blank=True, null=True, verbose_name='DST_YGDR')),
                ('exp_eff', models.FloatField(blank=True, help_text='ACTUAL EXPOSURE TIME SEC', null=True, verbose_name='EXP_EFF')),
                ('exptime', models.FloatField(blank=True, null=True, verbose_name='EXPTIME')),
                ('extend', models.BigIntegerField(blank=True, help_text='True = EXTENSIONS MAY BE PRESENT IN FILE', null=True, verbose_name='EXTEND')),
                ('filename', models.TextField(blank=True, help_text='DA', null=True, verbose_name='FILENAME')),
                ('fileorig', models.TextField(blank=True, help_text='OR', null=True, verbose_name='FILEORIG')),
                ('filter', models.BigIntegerField(blank=True, null=True, verbose_name='FILTER')),
                ('fp1_volt', models.FloatField(blank=True, null=True, verbose_name='FP1_VOLT')),
                ('fp2_volt', models.FloatField(blank=True, null=True, verbose_name='FP2_VOLT')),
                ('framenum', models.BigIntegerField(blank=True, null=True, verbose_name='FRAMENUM')),
                ('gain_em', models.BigIntegerField(blank=True, help_text='ELECTRON MULTIPIER GAIN', null=True, verbose_name='GAIN_EM')),
                ('gain_pre', models.TextField(blank=True, help_text='PRE-AMPLIFIER GAIN', null=True, verbose_name='GAIN_PRE')),
                ('gcount', models.BigIntegerField(blank=True, null=True, verbose_name='GCOUNT')),
                ('instrume', models.TextField(blank=True, help_text='INSTRUMENT USED TO ACQUIRE THE DATA', null=True, verbose_name='INSTRUME')),
                ('lcvr1_re', models.FloatField(blank=True, null=True, verbose_name='LCVR1_RE')),
                ('lcvr1_v', models.FloatField(blank=True, null=True, verbose_name='LCVR1_V')),
                ('lcvr2_re', models.FloatField(blank=True, null=True, verbose_name='LCVR2_RE')),
                ('lcvr2_v', models.FloatField(blank=True, null=True, verbose_name='LCVR2_V')),
                ('naxis', models.BigIntegerField(blank=True, help_text='NUMBER OF AXES', null=True, verbose_name='NAXIS')),
                ('naxis1', models.BigIntegerField(blank=True, null=True, verbose_name='NAXIS1')),
                ('naxis2', models.BigIntegerField(blank=True, null=True, verbose_name='NAXIS2')),
                ('nimages', models.BigIntegerField(blank=True, null=True, verbose_name='NIMAGES')),
                ('observer', models.TextField(blank=True, help_text='TELESCOPE OPERATORS', null=True, verbose_name='OBSERVER')),
                ('origin', models.TextField(blank=True, help_text='DST', null=True, verbose_name='ORIGIN')),
                ('pcount', models.BigIntegerField(blank=True, null=True, verbose_name='PCOUNT')),
                ('pt4_fs', models.TextField(blank=True, null=True, verbose_name='PT4_FS')),
                ('pt4_mir', models.TextField(blank=True, null=True, verbose_name='PT4_MIR')),
                ('pt4_pol', models.FloatField(blank=True, null=True, verbose_name='PT4_POL')),
                ('pt4_pstg', models.TextField(blank=True, null=True, verbose_name='PT4_PSTG')),
                ('pt4_ret', models.FloatField(blank=True, null=True, verbose_name='PT4_RET')),
                ('pt4_rstg', models.TextField(blank=True, null=True, verbose_name='PT4_RSTG')),
                ('pt4_time', models.TextField(blank=True, null=True, verbose_name='PT4_TIME')),
                ('rel_wave', models.FloatField(blank=True, null=True, verbose_name='REL_WAVE')),
                ('seq_ctr', models.BigIntegerField(blank=True, null=True, verbose_name='SEQ_CTR')),
                ('seq_num', models.TextField(blank=True, help_text='SEQUENCE NUMBER  (sxxx)', null=True, verbose_name='SEQ_NUM')),
                ('ser_num', models.BigIntegerField(blank=True, help_text='CAMERA SERIAL NUMBER', null=True, verbose_name='SER_NUM')),
                ('seriesid', models.TextField(blank=True, help_text='SAME TEXT AS PARENT DIRECTORY', null=True, verbose_name='SERIESID')),
                ('stokes', models.TextField(blank=True, null=True, verbose_name='STOKES')),
                ('target', models.TextField(blank=True, help_text='Indicates the observation region', null=True, verbose_name='TARGET')),
                ('telescop', models.TextField(blank=True, help_text='NAME OF THE TELESCOPE', null=True, verbose_name='TELESCOP')),
                ('wavelnth', models.FloatField(blank=True, help_text='THE (APPROXIMATE ABS) WAVELENGTH OF THE OBSERVA', null=True, verbose_name='WAVELNTH')),
                ('waveunit', models.BigIntegerField(blank=True, null=True, verbose_name='WAVEUNIT')),
                ('wl_prflt', models.TextField(blank=True, help_text='WHITE LIGHT CAMERA PRE-FILTER WAVELENGTH', null=True, verbose_name='WL_PRFLT')),
                ('x_start', models.BigIntegerField(blank=True, help_text='X Start position of image', null=True, verbose_name='X_START')),
                ('xtension', models.TextField(blank=True, null=True, verbose_name='XTENSION')),
                ('y_start', models.BigIntegerField(blank=True, help_text='Y Start position of image', null=True, verbose_name='Y_START')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_ibis', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_ibis', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'IBIS',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HmiMagnetogram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('bld_vers', models.TextField(blank=True, help_text='Code release build number of program that created this record', null=True, verbose_name='BLD_VERS')),
                ('bunit', models.TextField(blank=True, help_text='BUNIT: physical units of data, Gauss', null=True, verbose_name='BUNIT')),
                ('cadence', models.FloatField(blank=True, help_text='repetition interval', null=True, verbose_name='CADENCE')),
                ('cal_fsn', models.IntegerField(blank=True, help_text='FSN of the look-up table used to produce the observables', null=True, verbose_name='CAL_FSN')),
                ('calver64', models.BigIntegerField(blank=True, help_text='Calibration Version', null=True, verbose_name='CALVER64')),
                ('camera', models.IntegerField(blank=True, help_text='For HMI: 1 (side camera), 2 (front camera), or 3 (both cameras)', null=True, verbose_name='CAMERA')),
                ('car_rot', models.IntegerField(blank=True, help_text='Carrington rotation number of CRLN_OBS', null=True, verbose_name='CAR_ROT')),
                ('cdelt1', models.FloatField(blank=True, help_text='image scale in the x direction', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='image scale in the y direction', null=True, verbose_name='CDELT2')),
                ('codever0', models.TextField(blank=True, help_text='version of the l.o.s. observable code used to produce the data', null=True, verbose_name='CODEVER0')),
                ('codever1', models.TextField(blank=True, help_text='version of the gapfilling subroutine used to produce the data', null=True, verbose_name='CODEVER1')),
                ('codever2', models.TextField(blank=True, help_text='version of the temporal interpolation subroutine used to produce the data', null=True, verbose_name='CODEVER2')),
                ('codever3', models.TextField(blank=True, help_text='version of the polarization calibration subroutine used to produce the data', null=True, verbose_name='CODEVER3')),
                ('content', models.TextField(blank=True, help_text='CONTENT: MAGNETOGRAM', null=True, verbose_name='CONTENT')),
                ('crder1', models.FloatField(blank=True, help_text='CRDER1: estimate of random error in coordinate x', null=True, verbose_name='CRDER1')),
                ('crder2', models.FloatField(blank=True, help_text='CRDER2: estimate of random error in coordinate y', null=True, verbose_name='CRDER2')),
                ('crln_obs', models.FloatField(blank=True, help_text='Carrington longitude of the observer', null=True, verbose_name='CRLN_OBS')),
                ('crlt_obs', models.FloatField(blank=True, help_text='Carrington latitude of the observer', null=True, verbose_name='CRLT_OBS')),
                ('crota2', models.FloatField(blank=True, help_text='CROTA2: INST_ROT + SAT_ROT', null=True, verbose_name='CROTA2')),
                ('crpix1', models.FloatField(blank=True, help_text='CRPIX1: location of the Sun center in CCD x direction', null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, help_text='CRPIX2: location of the Sun center in CCD y direction', null=True, verbose_name='CRPIX2')),
                ('crval1', models.FloatField(blank=True, help_text='CRVAL1: x origin - center of the solar disk', null=True, verbose_name='CRVAL1')),
                ('crval2', models.FloatField(blank=True, help_text='CRVAL2: y origin - center of the solar disk', null=True, verbose_name='CRVAL2')),
                ('csyser1', models.FloatField(blank=True, help_text='CSYSER1: estimate of systematic error in coordinate x', null=True, verbose_name='CSYSER1')),
                ('csyser2', models.FloatField(blank=True, help_text='CSYSER2: estimate of systematic error in coordinate y', null=True, verbose_name='CSYSER2')),
                ('ctype1', models.TextField(blank=True, help_text='CTYPE1: HPLN-TAN (SOLARX)', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='CTYPE2: HPLT-TAN (SOLARY)', null=True, verbose_name='CTYPE2')),
                ('cunit1', models.TextField(blank=True, help_text='CUNIT1: arcsec', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='CUNIT2: arcsec', null=True, verbose_name='CUNIT2')),
                ('datakur2', models.FloatField(blank=True, help_text='Kurtosis of all pixels', null=True, verbose_name='DATAKUR2')),
                ('datakurt', models.FloatField(blank=True, help_text='Kurtosis of pixels within 99% of solar radius', null=True, verbose_name='DATAKURT')),
                ('datamax', models.FloatField(blank=True, help_text='Maximum value from pixels within 99% of solar radius', null=True, verbose_name='DATAMAX')),
                ('datamax2', models.FloatField(blank=True, help_text='Maximum value from all pixels', null=True, verbose_name='DATAMAX2')),
                ('datamea2', models.FloatField(blank=True, help_text='Mean value from all pixels', null=True, verbose_name='DATAMEA2')),
                ('datamean', models.FloatField(blank=True, help_text='Mean value from pixels within 99% of solar radius', null=True, verbose_name='DATAMEAN')),
                ('datamed2', models.FloatField(blank=True, help_text='Median value from all pixels', null=True, verbose_name='DATAMED2')),
                ('datamedn', models.FloatField(blank=True, help_text='Median value from pixels within 99% of solar radius', null=True, verbose_name='DATAMEDN')),
                ('datamin', models.FloatField(blank=True, help_text='Minimum value from pixels within 99% of solar radius', null=True, verbose_name='DATAMIN')),
                ('datamin2', models.FloatField(blank=True, help_text='Minimum value from all pixels', null=True, verbose_name='DATAMIN2')),
                ('datarms', models.FloatField(blank=True, help_text='Rms deviation from the mean value of pixels within 99% of solar radius', null=True, verbose_name='DATARMS')),
                ('datarms2', models.FloatField(blank=True, help_text='Rms deviation from the mean value of all pixels', null=True, verbose_name='DATARMS2')),
                ('datasign', models.IntegerField(blank=True, help_text='DATASIGN: sign of observable quantity wrt Sun center', null=True, verbose_name='DATASIGN')),
                ('dataske2', models.FloatField(blank=True, help_text='Skewness from the mean value of all pixels', null=True, verbose_name='DATASKE2')),
                ('dataskew', models.FloatField(blank=True, help_text='Skewness from the mean value of pixels within 99% of solar radius', null=True, verbose_name='DATASKEW')),
                ('datavals', models.IntegerField(blank=True, help_text='Actual number of data values in images (pixels)', null=True, verbose_name='DATAVALS')),
                ('date', models.DateTimeField(blank=True, help_text='Date_time of processing; ISO 8601 format UTC', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text='DATE_OBS = T_OBS - EXPTIME/2.0', null=True, verbose_name='DATE-OBS')),
                ('distcoef', models.TextField(blank=True, help_text='path to the distortion coefficient table used to produce the data', null=True, verbose_name='DISTCOEF')),
                ('dsun_obs', models.FloatField(blank=True, help_text='Distance from SDO to Sun center.', null=True, verbose_name='DSUN_OBS')),
                ('dsun_ref', models.FloatField(blank=True, help_text='Astronomical Unit', null=True, verbose_name='DSUN_REF')),
                ('hcamid', models.IntegerField(blank=True, help_text='HMI_SEQ_ID_EXP_PATH', null=True, verbose_name='HCAMID')),
                ('hcftid', models.IntegerField(blank=True, help_text='HMI_SEQ_ID_FOCUS', null=True, verbose_name='HCFTID')),
                ('hflid', models.IntegerField(blank=True, help_text='HMI_SEQ_ID_FRAMELIST', null=True, verbose_name='HFLID')),
                ('instrume', models.TextField(blank=True, help_text='For HMI: HMI_SIDE1, HMI_FRONT2, or HMI_COMBINED', null=True, verbose_name='INSTRUME')),
                ('lutquery', models.TextField(blank=True, help_text='query used for the look-up tables', null=True, verbose_name='LUTQUERY')),
                ('missvals', models.IntegerField(blank=True, help_text='Missing values: TOTVALS - DATAVALS', null=True, verbose_name='MISSVALS')),
                ('obs_vn', models.FloatField(blank=True, help_text='velocity of the observer solar-northward (heliographic). + to north', null=True, verbose_name='OBS_VN')),
                ('obs_vr', models.FloatField(blank=True, help_text='velocity of the observer in radial direction. + is away from Sun', null=True, verbose_name='OBS_VR')),
                ('obs_vw', models.FloatField(blank=True, help_text='velocity of the observer solar-westward. + in rough direction of Earth orbit', null=True, verbose_name='OBS_VW')),
                ('odicoeff', models.IntegerField(blank=True, help_text='order of the distortion-coefficient polynomials', null=True, verbose_name='ODICOEFF')),
                ('origin', models.TextField(blank=True, help_text='ORIGIN: location where file made', null=True, verbose_name='ORIGIN')),
                ('orocoeff', models.IntegerField(blank=True, help_text='order of the differential-rotation polynomials', null=True, verbose_name='OROCOEFF')),
                ('polcalm', models.IntegerField(blank=True, help_text='method used by the polarization calibration subroutine', null=True, verbose_name='POLCALM')),
                ('qlook', models.IntegerField(blank=True, help_text='QLOOK: 0=final data, 1=quick-look data', null=True, verbose_name='QLOOK')),
                ('quality', models.IntegerField(blank=True, help_text='Level 1.5 Quality word', null=True, verbose_name='QUALITY')),
                ('quallev1', models.IntegerField(blank=True, help_text='Logical OR on the bits of the level 1 Quality word', null=True, verbose_name='QUALLEV1')),
                ('recnum', models.BigIntegerField(blank=True, help_text='JSOC Record Number', null=True, verbose_name='RECNUM')),
                ('rotcoef', models.TextField(blank=True, help_text='path to the differential-rotation coefficient table used to produce the data', null=True, verbose_name='ROTCOEF')),
                ('rsun_obs', models.FloatField(blank=True, help_text='angular radius of Sun. Corresponds to arcsin(RSUN_REF/DSUN_OBS)', null=True, verbose_name='RSUN_OBS')),
                ('rsun_ref', models.FloatField(blank=True, help_text='Reference radius of the Sun: 696,000,000.0 m', null=True, verbose_name='RSUN_REF')),
                ('satvals', models.IntegerField(blank=True, help_text='Saturated values', null=True, verbose_name='SATVALS')),
                ('segment', models.TextField(blank=True, help_text='JSOC Segment File Name', null=True, verbose_name='SEGMENT')),
                ('series', models.TextField(blank=True, help_text='JSOC Series Name', null=True, verbose_name='SERIES')),
                ('sintnum', models.IntegerField(blank=True, help_text='number of points used for the spatial interpolation', null=True, verbose_name='SINTNUM')),
                ('slotnum', models.IntegerField(blank=True, help_text='JSOC Slot Number', null=True, verbose_name='SLOTNUM')),
                ('source', models.TextField(blank=True, help_text='level 1 filtergrams used to produce the observables', null=True, verbose_name='SOURCE')),
                ('sunum', models.BigIntegerField(blank=True, help_text='JSOC Storage Unit Number', null=True, verbose_name='SUNUM')),
                ('t_obs', models.DateTimeField(blank=True, help_text='nominal time', null=True, verbose_name='T_OBS')),
                ('t_rec', models.DateTimeField(blank=True, help_text='Slot time', null=True, verbose_name='T_REC')),
                ('telescop', models.TextField(blank=True, help_text='For HMI: SDO/HMI', null=True, verbose_name='TELESCOP')),
                ('tfront', models.FloatField(blank=True, help_text='temperature keyword for polarization calibration', null=True, verbose_name='TFRONT')),
                ('tintnum', models.IntegerField(blank=True, help_text='number of points used for the temporal interpolation', null=True, verbose_name='TINTNUM')),
                ('totvals', models.IntegerField(blank=True, help_text='Expected number of data values (pixels)', null=True, verbose_name='TOTVALS')),
                ('tsel', models.FloatField(blank=True, help_text='temperature keyword for polarization calibration', null=True, verbose_name='TSEL')),
                ('wavelnth', models.FloatField(blank=True, help_text='For HMI: 6173.3 Angstroms', null=True, verbose_name='WAVELNTH')),
                ('wcsname', models.TextField(blank=True, help_text='WCS system name', null=True, verbose_name='WCSNAME')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_hmimagnetogram', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_hmimagnetogram', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'HMI magnetogram',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GrisLevel1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('accumula', models.BigIntegerField(blank=True, help_text='number of accumulations', null=True, verbose_name='ACCUMULA')),
                ('adunorm', models.BigIntegerField(blank=True, help_text='normalization factor to ADU', null=True, verbose_name='ADUNORM')),
                ('aosystem', models.TextField(blank=True, help_text='adaptative optic system', null=True, verbose_name='AOSYSTEM')),
                ('azimut', models.FloatField(blank=True, help_text='Sun center azimut (degrees)', null=True, verbose_name='AZIMUT')),
                ('b0angle', models.FloatField(blank=True, help_text='B0 angle (degrees)', null=True, verbose_name='B0ANGLE')),
                ('bscale', models.FloatField(blank=True, help_text='data = pixel * BSCALE + BZERO', null=True, verbose_name='BSCALE')),
                ('bzero', models.FloatField(blank=True, help_text='offset applied to true pixel values', null=True, verbose_name='BZERO')),
                ('camera', models.TextField(blank=True, help_text='camera', null=True, verbose_name='CAMERA')),
                ('campos', models.FloatField(blank=True, help_text='camera mirror position (mm)', null=True, verbose_name='CAMPOS')),
                ('coefi_1', models.FloatField(blank=True, help_text='coefficient I of state 1', null=True, verbose_name='COEFI-1')),
                ('coefi_2', models.FloatField(blank=True, help_text='coefficient I of state 2', null=True, verbose_name='COEFI-2')),
                ('coefi_3', models.FloatField(blank=True, help_text='coefficient I of state 3', null=True, verbose_name='COEFI-3')),
                ('coefi_4', models.FloatField(blank=True, help_text='coefficient I of state 4', null=True, verbose_name='COEFI-4')),
                ('coefq_1', models.FloatField(blank=True, help_text='coefficient Q of state 1', null=True, verbose_name='COEFQ-1')),
                ('coefq_2', models.FloatField(blank=True, help_text='coefficient Q of state 2', null=True, verbose_name='COEFQ-2')),
                ('coefq_3', models.FloatField(blank=True, help_text='coefficient Q of state 3', null=True, verbose_name='COEFQ-3')),
                ('coefq_4', models.FloatField(blank=True, help_text='coefficient Q of state 4', null=True, verbose_name='COEFQ-4')),
                ('coefu_1', models.FloatField(blank=True, help_text='coefficient U of state 1', null=True, verbose_name='COEFU-1')),
                ('coefu_2', models.FloatField(blank=True, help_text='coefficient U of state 2', null=True, verbose_name='COEFU-2')),
                ('coefu_3', models.FloatField(blank=True, help_text='coefficient U of state 3', null=True, verbose_name='COEFU-3')),
                ('coefu_4', models.FloatField(blank=True, help_text='coefficient U of state 4', null=True, verbose_name='COEFU-4')),
                ('coefv_1', models.FloatField(blank=True, help_text='coefficient V of state 1', null=True, verbose_name='COEFV-1')),
                ('coefv_2', models.FloatField(blank=True, help_text='coefficient V of state 2', null=True, verbose_name='COEFV-2')),
                ('coefv_3', models.FloatField(blank=True, help_text='coefficient V of state 3', null=True, verbose_name='COEFV-3')),
                ('coefv_4', models.FloatField(blank=True, help_text='coefficient V of state 4', null=True, verbose_name='COEFV-4')),
                ('colpos', models.FloatField(blank=True, help_text='collimator mirror position (mm)', null=True, verbose_name='COLPOS')),
                ('datafram', models.TextField(blank=True, help_text='image portion', null=True, verbose_name='DATAFRAM')),
                ('datavers', models.BigIntegerField(blank=True, help_text='data version (0 means raw data)', null=True, verbose_name='DATAVERS')),
                ('date_obs', models.DateTimeField(blank=True, help_text='data acquisition date (yyyy-mm-dd)', null=True, verbose_name='DATE-OBS')),
                ('dec', models.FloatField(blank=True, help_text='Sun center declination (degrees)', null=True, verbose_name='DEC')),
                ('eimgacc', models.BigIntegerField(blank=True, help_text='number of extra images to make an accumulation', null=True, verbose_name='EIMGACC')),
                ('elevatio', models.FloatField(blank=True, help_text='Sun center elevation (degrees)', null=True, verbose_name='ELEVATIO')),
                ('elperadu', models.BigIntegerField(blank=True, help_text='electrons per adu', null=True, verbose_name='ELPERADU')),
                ('exptime', models.FloatField(blank=True, help_text='integration time of each image (msec)', null=True, verbose_name='EXPTIME')),
                ('filename', models.TextField(blank=True, help_text='file name', null=True, verbose_name='FILENAME')),
                ('filestat', models.TextField(blank=True, help_text='file final status', null=True, verbose_name='FILESTAT')),
                ('fullfram', models.TextField(blank=True, help_text='original full frame size', null=True, verbose_name='FULLFRAM')),
                ('gratangl', models.FloatField(blank=True, help_text='grating angle (degrees)', null=True, verbose_name='GRATANGL')),
                ('hourangl', models.FloatField(blank=True, help_text='Sun center hour angle (degrees)', null=True, verbose_name='HOURANGL')),
                ('ifile', models.BigIntegerField(blank=True, help_text='file index', null=True, verbose_name='IFILE')),
                ('imagtype', models.TextField(blank=True, help_text='image type', null=True, verbose_name='IMAGTYPE')),
                ('irfilter', models.TextField(blank=True, help_text='camera filter', null=True, verbose_name='IRFILTER')),
                ('iserie', models.BigIntegerField(blank=True, help_text='serie index', null=True, verbose_name='ISERIE')),
                ('l0angle', models.FloatField(blank=True, help_text='L0 angle (degrees)', null=True, verbose_name='L0ANGLE')),
                ('lc1_1', models.BigIntegerField(blank=True, help_text='state 1 of crystal 1', null=True, verbose_name='LC1-1')),
                ('lc1_2', models.BigIntegerField(blank=True, help_text='state 2 of crystal 1', null=True, verbose_name='LC1-2')),
                ('lc1_3', models.BigIntegerField(blank=True, help_text='state 3 of crystal 1', null=True, verbose_name='LC1-3')),
                ('lc1_4', models.BigIntegerField(blank=True, help_text='state 4 of crystal 1', null=True, verbose_name='LC1-4')),
                ('lc2_1', models.BigIntegerField(blank=True, help_text='state 1 of crystal 2', null=True, verbose_name='LC2-1')),
                ('lc2_2', models.BigIntegerField(blank=True, help_text='state 2 of crystal 2', null=True, verbose_name='LC2-2')),
                ('lc2_3', models.BigIntegerField(blank=True, help_text='state 3 of crystal 2', null=True, verbose_name='LC2-3')),
                ('lc2_4', models.BigIntegerField(blank=True, help_text='state 4 of crystal 2', null=True, verbose_name='LC2-4')),
                ('lcs', models.BigIntegerField(blank=True, help_text='number of liquid crystals', null=True, verbose_name='LCS')),
                ('measure', models.TextField(blank=True, help_text='measure type', null=True, verbose_name='MEASURE')),
                ('naxis', models.BigIntegerField(blank=True, help_text='number of axes', null=True, verbose_name='NAXIS')),
                ('naxis1', models.BigIntegerField(blank=True, help_text='x', null=True, verbose_name='NAXIS1')),
                ('naxis2', models.BigIntegerField(blank=True, help_text='lambda', null=True, verbose_name='NAXIS2')),
                ('naxis3', models.BigIntegerField(blank=True, help_text='number of frames in this file', null=True, verbose_name='NAXIS3')),
                ('nfiles', models.BigIntegerField(blank=True, help_text='number of split files', null=True, verbose_name='NFILES')),
                ('p0angle', models.FloatField(blank=True, help_text='P0 angle (degrees)', null=True, verbose_name='P0ANGLE')),
                ('paraangl', models.FloatField(blank=True, help_text='parallactic angle (degrees)', null=True, verbose_name='PARAANGL')),
                ('r0radius', models.FloatField(blank=True, help_text='solar radius (arcsec)', null=True, verbose_name='R0RADIUS')),
                ('ra', models.FloatField(blank=True, help_text='Sun center right ascension (degrees)', null=True, verbose_name='RA')),
                ('rotangle', models.FloatField(blank=True, help_text='rotator angle (degrees)', null=True, verbose_name='ROTANGLE')),
                ('rotcode', models.BigIntegerField(blank=True, help_text='0 means rotator inserted', null=True, verbose_name='ROTCODE')),
                ('series', models.BigIntegerField(blank=True, help_text='number of repetitions of the measure', null=True, verbose_name='SERIES')),
                ('spsystem', models.TextField(blank=True, help_text='scanning positioner system', null=True, verbose_name='SPSYSTEM')),
                ('states', models.BigIntegerField(blank=True, help_text='number of modulation states', null=True, verbose_name='STATES')),
                ('stepangl', models.FloatField(blank=True, help_text='scanning step angle (degrees)', null=True, verbose_name='STEPANGL')),
                ('steps', models.BigIntegerField(blank=True, help_text='steps of each measure', null=True, verbose_name='STEPS')),
                ('stepsh', models.BigIntegerField(blank=True, help_text='steps in the axis parallel to the slit', null=True, verbose_name='STEPSH')),
                ('stepsize', models.FloatField(blank=True, help_text='scanning step size (arcsec)', null=True, verbose_name='STEPSIZE')),
                ('stepsv', models.BigIntegerField(blank=True, help_text='steps in the axis perpendicular to the slit', null=True, verbose_name='STEPSV')),
                ('telescop', models.TextField(blank=True, help_text='telescope', null=True, verbose_name='TELESCOP')),
                ('temp_lc1', models.FloatField(blank=True, help_text='temperature of crystal 1 (C)', null=True, verbose_name='TEMP-LC1')),
                ('temp_lc2', models.FloatField(blank=True, help_text='temperature of crystal 2 (C)', null=True, verbose_name='TEMP-LC2')),
                ('waveleng', models.BigIntegerField(blank=True, help_text='spectrograph wavelength (nm)', null=True, verbose_name='WAVELENG')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_grislevel1', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_grislevel1', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'GRIS level 1',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EitLevel0',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('blocks_horz', models.IntegerField(blank=True, null=True, verbose_name='BLOCKS_HORZ')),
                ('blocks_vert', models.IntegerField(blank=True, null=True, verbose_name='BLOCKS_VERT')),
                ('camera_err', models.TextField(blank=True, null=True, verbose_name='CAMERA_ERR')),
                ('car_rot', models.FloatField(blank=True, help_text='Carrington rotation at earth ', null=True, verbose_name='CAR_ROT')),
                ('ccdtemp', models.FloatField(blank=True, help_text='CCD temperature (DN/100) ', null=True, verbose_name='CCDTEMP')),
                ('cdelt1', models.FloatField(blank=True, help_text='Pixel scale x', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='Pixel scale y', null=True, verbose_name='CDELT2')),
                ('cftemp', models.FloatField(blank=True, help_text='CCD cold finger temperature', null=True, verbose_name='CFTEMP')),
                ('cmp_no', models.IntegerField(blank=True, help_text='Unique campaign instance (1 = synoptic) ', null=True, verbose_name='CMP_NO')),
                ('commanded_exposure_time', models.TextField(blank=True, null=True, verbose_name='COMMANDED_EXPOSURE_TIME')),
                ('corrected_date_obs', models.DateTimeField(blank=True, null=True, verbose_name='CORRECTED_DATE_OBS')),
                ('crpix1', models.FloatField(blank=True, help_text='Sun center x, EIT pixels', null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, help_text='Sun center y, EIT pixels', null=True, verbose_name='CRPIX2')),
                ('datasrc', models.TextField(blank=True, null=True, verbose_name='DATASRC')),
                ('date', models.DateTimeField(blank=True, help_text='Date of file creation', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text='UTC at spacecraft ', null=True, verbose_name='DATE_OBS')),
                ('expmode', models.TextField(blank=True, null=True, verbose_name='EXPMODE')),
                ('exptime', models.FloatField(blank=True, help_text='Exposure time (total commanded + shutter close)', null=True, verbose_name='EXPTIME')),
                ('filename', models.TextField(blank=True, null=True, verbose_name='FILENAME')),
                ('filter', models.TextField(blank=True, null=True, verbose_name='FILTER')),
                ('image_of_seq', models.IntegerField(blank=True, null=True, verbose_name='IMAGE_OF_SEQ')),
                ('instrume', models.TextField(blank=True, null=True, verbose_name='INSTRUME')),
                ('leb_proc', models.TextField(blank=True, null=True, verbose_name='LEB_PROC')),
                ('line_sync', models.TextField(blank=True, null=True, verbose_name='LINE_SYNC')),
                ('n_missing_blocks', models.IntegerField(blank=True, null=True, verbose_name='N_MISSING_BLOCKS')),
                ('num_leb_proc', models.IntegerField(blank=True, null=True, verbose_name='NUM_LEB_PROC')),
                ('object', models.TextField(blank=True, null=True, verbose_name='OBJECT')),
                ('obs_prog', models.TextField(blank=True, null=True, verbose_name='OBS_PROG')),
                ('origin', models.TextField(blank=True, help_text='Rocket Science = NASA GSFC', null=True, verbose_name='ORIGIN')),
                ('readout_port', models.TextField(blank=True, null=True, verbose_name='READOUT_PORT')),
                ('sc_roll', models.FloatField(blank=True, help_text='s/c roll (Solar north + CCW from nominal)', null=True, verbose_name='SC_ROLL')),
                ('sci_obj', models.TextField(blank=True, null=True, verbose_name='SCI_OBJ')),
                ('shutter_close_time', models.TextField(blank=True, null=True, verbose_name='SHUTTER_CLOSE_TIME')),
                ('solar_b0', models.FloatField(blank=True, null=True, verbose_name='SOLAR_B0')),
                ('solar_r', models.FloatField(blank=True, help_text='Solar photospheric radius, EIT pixels', null=True, verbose_name='SOLAR_R')),
                ('telescop', models.TextField(blank=True, null=True, verbose_name='TELESCOP')),
                ('wavelnth', models.IntegerField(blank=True, help_text='Wavelength 284 / 171 = Fe IX/X, 195 = Fe XII, / 284 = Fe XV, 304 = He ', null=True, verbose_name='WAVELNTH')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_eitlevel0', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_eitlevel0', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'EIT level 0',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Crisp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('ao_lock', models.FloatField(blank=True, help_text='Fraction of time the AO was locking, 2s average', null=True, verbose_name='AO_LOCK')),
                ('ao_nmode', models.BigIntegerField(blank=True, help_text='Number of AO corrected Mirror modes', null=True, verbose_name='AO_NMODE')),
                ('atmos_r0', models.FloatField(blank=True, help_text='Atmospheric coherence length (mean value)', null=True, verbose_name='ATMOS_R0')),
                ('btype', models.TextField(blank=True, help_text='Type of data in array', null=True, verbose_name='BTYPE')),
                ('bunit', models.TextField(blank=True, help_text='Units in array', null=True, verbose_name='BUNIT')),
                ('cadavg', models.FloatField(blank=True, help_text='Average of actual cadence', null=True, verbose_name='CADAVG')),
                ('cadmax', models.FloatField(blank=True, help_text='Maximum of actual cadence', null=True, verbose_name='CADMAX')),
                ('cadmin', models.FloatField(blank=True, help_text='Minimum of actual cadence', null=True, verbose_name='CADMIN')),
                ('cadvar', models.FloatField(blank=True, help_text='Variance of actual cadence', null=True, verbose_name='CADVAR')),
                ('camera', models.TextField(blank=True, null=True, verbose_name='CAMERA')),
                ('cdelt1', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT1')),
                ('cdelt1a', models.FloatField(blank=True, help_text='Zero FOV extent', null=True, verbose_name='CDELT1A')),
                ('cdelt2', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT2')),
                ('cdelt2a', models.FloatField(blank=True, help_text='Zero FOV extent', null=True, verbose_name='CDELT2A')),
                ('cdelt3', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT3')),
                ('cdelt4', models.BigIntegerField(blank=True, help_text='Stokes indices [1,2,3,4] --> [I,Q,U,V]', null=True, verbose_name='CDELT4')),
                ('cdelt5', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT5')),
                ('cname1', models.TextField(blank=True, null=True, verbose_name='CNAME1')),
                ('cname2', models.TextField(blank=True, null=True, verbose_name='CNAME2')),
                ('cname3', models.TextField(blank=True, null=True, verbose_name='CNAME3')),
                ('cname5', models.TextField(blank=True, null=True, verbose_name='CNAME5')),
                ('crpix1', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX1')),
                ('crpix1a', models.FloatField(blank=True, help_text='Center pixel of image array', null=True, verbose_name='CRPIX1A')),
                ('crpix2', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX2')),
                ('crpix2a', models.FloatField(blank=True, help_text='Center pixel of image array', null=True, verbose_name='CRPIX2A')),
                ('crpix3', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX3')),
                ('crpix4', models.BigIntegerField(blank=True, help_text='Index of Stokes components in pixel 1', null=True, verbose_name='CRPIX4')),
                ('crpix5', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX5')),
                ('crval1', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL1')),
                ('crval1a', models.FloatField(blank=True, help_text='Coordinates of center of image array', null=True, verbose_name='CRVAL1A')),
                ('crval2', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL2')),
                ('crval2a', models.FloatField(blank=True, help_text='Coordinates of center of image array', null=True, verbose_name='CRVAL2A')),
                ('crval3', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL3')),
                ('crval4', models.BigIntegerField(blank=True, help_text='The first Stokes index is 1', null=True, verbose_name='CRVAL4')),
                ('crval5', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL5')),
                ('csyer1', models.BigIntegerField(blank=True, help_text='Orientation unknown', null=True, verbose_name='CSYER1')),
                ('csyer2', models.BigIntegerField(blank=True, help_text='Orientation unknown', null=True, verbose_name='CSYER2')),
                ('ctype1', models.TextField(blank=True, help_text='SOLAR X', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='SOLAR Y', null=True, verbose_name='CTYPE2')),
                ('ctype3', models.TextField(blank=True, help_text='Wavelength, function of tuning and scan number', null=True, verbose_name='CTYPE3')),
                ('ctype4', models.TextField(blank=True, help_text='Stokes vector [I,Q,U,V]', null=True, verbose_name='CTYPE4')),
                ('ctype5', models.TextField(blank=True, help_text='Time, function of tuning and scan number', null=True, verbose_name='CTYPE5')),
                ('cunit1', models.TextField(blank=True, help_text='Unit along axis 1', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='Unit along axis 2', null=True, verbose_name='CUNIT2')),
                ('cunit3', models.TextField(blank=True, help_text='Wavelength unit, tabulated for dim. 3 and 5', null=True, verbose_name='CUNIT3')),
                ('cunit5', models.TextField(blank=True, null=True, verbose_name='CUNIT5')),
                ('cwdis3', models.TextField(blank=True, help_text='WAVE distortions in lookup table', null=True, verbose_name='CWDIS3')),
                ('cwerr3', models.FloatField(blank=True, help_text='Max total distortion', null=True, verbose_name='CWERR3')),
                ('datakurt', models.FloatField(blank=True, help_text='The excess kurtosis of the data (provided value', null=True, verbose_name='DATAKURT')),
                ('datamax', models.FloatField(blank=True, help_text='The maximum data value (provided value)', null=True, verbose_name='DATAMAX')),
                ('datamean', models.FloatField(blank=True, help_text='The average data value (provided value)', null=True, verbose_name='DATAMEAN')),
                ('datamedn', models.FloatField(blank=True, help_text='The 50 percentile of the data (provided value)', null=True, verbose_name='DATAMEDN')),
                ('datamin', models.FloatField(blank=True, help_text='The minimum data value (provided value)', null=True, verbose_name='DATAMIN')),
                ('datap01', models.FloatField(blank=True, help_text='The 01 percentile of the data (provided value)', null=True, verbose_name='DATAP01')),
                ('datap10', models.FloatField(blank=True, help_text='The 10 percentile of the data (provided value)', null=True, verbose_name='DATAP10')),
                ('datap25', models.FloatField(blank=True, help_text='The 25 percentile of the data (provided value)', null=True, verbose_name='DATAP25')),
                ('datap75', models.FloatField(blank=True, help_text='The 75 percentile of the data (provided value)', null=True, verbose_name='DATAP75')),
                ('datap90', models.FloatField(blank=True, help_text='The 90 percentile of the data (provided value)', null=True, verbose_name='DATAP90')),
                ('datap95', models.FloatField(blank=True, help_text='The 95 percentile of the data (provided value)', null=True, verbose_name='DATAP95')),
                ('datap98', models.FloatField(blank=True, help_text='The 98 percentile of the data (provided value)', null=True, verbose_name='DATAP98')),
                ('datap99', models.FloatField(blank=True, help_text='The 99 percentile of the data (provided value)', null=True, verbose_name='DATAP99')),
                ('datarms', models.FloatField(blank=True, help_text='The RMS deviation from the mean (provided value', null=True, verbose_name='DATARMS')),
                ('dataskew', models.FloatField(blank=True, help_text='The skewness of the data (provided value)', null=True, verbose_name='DATASKEW')),
                ('date', models.TextField(blank=True, help_text='Creation UTC date of FITS header', null=True, verbose_name='DATE')),
                ('date_avg', models.DateTimeField(blank=True, help_text='Average time of observation (provided va', null=True, verbose_name='DATE-AVG')),
                ('date_obs', models.DateTimeField(blank=True, help_text='Inferred from directory.', null=True, verbose_name='DATE-OBS')),
                ('dateref', models.TextField(blank=True, help_text='Reference time in ISO-8601', null=True, verbose_name='DATEREF')),
                ('detector', models.TextField(blank=True, null=True, verbose_name='DETECTOR')),
                ('dw3_apply', models.FloatField(blank=True, help_text='Application stage (world coordinates)', null=True, verbose_name='DW3.APPLY')),
                ('dw3_associate', models.FloatField(blank=True, help_text='Association stage (pixel coordinates)', null=True, verbose_name='DW3.ASSOCIATE')),
                ('dw3_axis1', models.BigIntegerField(blank=True, help_text='Spatial X', null=True, verbose_name='DW3 AXIS1')),
                ('dw3_axis2', models.BigIntegerField(blank=True, help_text='Spatial Y', null=True, verbose_name='DW3 AXIS2')),
                ('dw3_axis3', models.BigIntegerField(blank=True, help_text='Scan number', null=True, verbose_name='DW3 AXIS3')),
                ('dw3_axis_1', models.FloatField(blank=True, help_text='Spatial X', null=True, verbose_name='DW3.AXIS.1')),
                ('dw3_axis_2', models.FloatField(blank=True, help_text='Spatial Y', null=True, verbose_name='DW3.AXIS.2')),
                ('dw3_axis_3', models.FloatField(blank=True, help_text='Scan number', null=True, verbose_name='DW3.AXIS.3')),
                ('dw3_cwdis_lookup', models.FloatField(blank=True, help_text='Distortions in lookup table', null=True, verbose_name='DW3.CWDIS.LOOKUP')),
                ('dw3_cwerr', models.FloatField(blank=True, help_text='Max distortion (this correction step)', null=True, verbose_name='DW3 CWERR')),
                ('dw3_extver', models.FloatField(blank=True, help_text='Extension version number', null=True, verbose_name='DW3.EXTVER')),
                ('dw3_name', models.TextField(blank=True, help_text='Type of correction', null=True, verbose_name='DW3 NAME')),
                ('dw3_naxes', models.BigIntegerField(blank=True, help_text='3 axes in the lookup table', null=True, verbose_name='DW3 NAXES')),
                ('elev_ang', models.FloatField(blank=True, help_text='Elevation angle (mean value)', null=True, verbose_name='ELEV_ANG')),
                ('filename', models.TextField(blank=True, null=True, verbose_name='FILENAME')),
                ('filled', models.BigIntegerField(blank=True, help_text='Missing pixels have been filled.', null=True, verbose_name='FILLED')),
                ('filter1', models.TextField(blank=True, help_text='Inferred from filename.', null=True, verbose_name='FILTER1')),
                ('fnumsum', models.TextField(blank=True, help_text='List of frame numbers in the sum', null=True, verbose_name='FNUMSUM')),
                ('instrume', models.TextField(blank=True, help_text='Name of instrument', null=True, verbose_name='INSTRUME')),
                ('longstrn', models.TextField(blank=True, help_text='The OGIP long string convention may be used.', null=True, verbose_name='LONGSTRN')),
                ('naxis', models.BigIntegerField(blank=True, help_text='Number of data axes', null=True, verbose_name='NAXIS')),
                ('naxis1', models.BigIntegerField(blank=True, help_text='Number of positions along axis 1', null=True, verbose_name='NAXIS1')),
                ('naxis2', models.BigIntegerField(blank=True, help_text='Number of positions along axis 2', null=True, verbose_name='NAXIS2')),
                ('naxis3', models.BigIntegerField(blank=True, help_text='Number of positions along axis 3', null=True, verbose_name='NAXIS3')),
                ('naxis4', models.BigIntegerField(blank=True, help_text='Number of positions along axis 4', null=True, verbose_name='NAXIS4')),
                ('naxis5', models.BigIntegerField(blank=True, help_text='Number of positions along axis 5', null=True, verbose_name='NAXIS5')),
                ('npixels', models.BigIntegerField(blank=True, help_text='Number of pixels (provided value)', null=True, verbose_name='NPIXELS')),
                ('nsumexp', models.FloatField(blank=True, help_text='Number of summed exposures (median value)', null=True, verbose_name='NSUMEXP')),
                ('object', models.TextField(blank=True, null=True, verbose_name='OBJECT')),
                ('obs_hdu', models.BigIntegerField(blank=True, null=True, verbose_name='OBS_HDU')),
                ('observer', models.TextField(blank=True, null=True, verbose_name='OBSERVER')),
                ('obsgeo_x', models.BigIntegerField(blank=True, help_text='SST location', null=True, verbose_name='OBSGEO-X')),
                ('obsgeo_y', models.BigIntegerField(blank=True, help_text='SST location', null=True, verbose_name='OBSGEO-Y')),
                ('obsgeo_z', models.BigIntegerField(blank=True, help_text='SST location', null=True, verbose_name='OBSGEO-Z')),
                ('obsrvtry', models.TextField(blank=True, help_text='Name of observatory', null=True, verbose_name='OBSRVTRY')),
                ('pc1_1', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC1_1')),
                ('pc2_2', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC2_2')),
                ('pc3_3', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC3_3')),
                ('pc4_4', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC4_4')),
                ('pc5_5', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC5_5')),
                ('prbra1', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA1')),
                ('prbra2', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA2')),
                ('prbra3', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA3')),
                ('prbra4', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA4')),
                ('prbra5', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA5')),
                ('prbra6', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA6')),
                ('prlib1', models.TextField(blank=True, help_text='Software library', null=True, verbose_name='PRLIB1')),
                ('prlib1a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1A')),
                ('prlib1b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1B')),
                ('prlib1c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1C')),
                ('prlib1d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1D')),
                ('prlib1e', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1E')),
                ('prlib2', models.TextField(blank=True, help_text='Software library containing red::make_wb_cube', null=True, verbose_name='PRLIB2')),
                ('prlib2a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2A')),
                ('prlib2b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2B')),
                ('prlib2c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2C')),
                ('prlib2d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2D')),
                ('prlib3', models.TextField(blank=True, help_text='Software library containing crisp::demodulate', null=True, verbose_name='PRLIB3')),
                ('prlib3a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3A')),
                ('prlib3b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3B')),
                ('prlib3c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3C')),
                ('prlib3d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3D')),
                ('prlib4', models.TextField(blank=True, help_text='Software library containing crisp::make_nb_cube', null=True, verbose_name='PRLIB4')),
                ('prlib4a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4A')),
                ('prlib4b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4B')),
                ('prlib4c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4C')),
                ('prlib4d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4D')),
                ('prlib5', models.TextField(blank=True, help_text='Software library containing red::fitscube_cross', null=True, verbose_name='PRLIB5')),
                ('prlib5a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB5A')),
                ('prlib5b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB5B')),
                ('prlib5c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB5C')),
                ('prlib5d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB5D')),
                ('prlib6', models.TextField(blank=True, help_text='Software library containing red::fitscube_expor', null=True, verbose_name='PRLIB6')),
                ('prlib6a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB6A')),
                ('prlib6b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB6B')),
                ('prlib6c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB6C')),
                ('prlib6d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB6D')),
                ('prmode1', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE1')),
                ('prmode3', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE3')),
                ('prmode4', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE4')),
                ('prmode5', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE5')),
                ('prmode6', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE6')),
                ('prpara1', models.TextField(blank=True, help_text='List of parameters/options for PRPROC1', null=True, verbose_name='PRPARA1')),
                ('prpara2', models.TextField(blank=True, help_text='List o', null=True, verbose_name='PRPARA2')),
                ('prpara3', models.TextField(blank=True, help_text='List of parameters/options for PRPROC2', null=True, verbose_name='PRPARA3')),
                ('prpara4', models.TextField(blank=True, help_text='List of parameters/options for PRPROC4', null=True, verbose_name='PRPARA4')),
                ('prpara6', models.TextField(blank=True, help_text='List of parameters/options for PRPROC6', null=True, verbose_name='PRPARA6')),
                ('prproc2', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC2')),
                ('prproc3', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC3')),
                ('prproc4', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC4')),
                ('prproc5', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC5')),
                ('prproc6', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC6')),
                ('prstep1', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP1')),
                ('prstep2', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP2')),
                ('prstep3', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP3')),
                ('prstep4', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP4')),
                ('prstep5', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP5')),
                ('prstep6', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP6')),
                ('prver1', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1')),
                ('prver1a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1A')),
                ('prver1b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1B')),
                ('prver1c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1C')),
                ('prver1d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1D')),
                ('prver1e', models.TextField(blank=True, help_text='Library version/MJD of last update (From .momfb', null=True, verbose_name='PRVER1E')),
                ('prver2', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2')),
                ('prver2a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2A')),
                ('prver2b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2B')),
                ('prver2c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2C')),
                ('prver2d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2D')),
                ('prver3', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3')),
                ('prver3a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3A')),
                ('prver3b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3B')),
                ('prver3c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3C')),
                ('prver3d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3D')),
                ('prver4', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4')),
                ('prver4a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4A')),
                ('prver4b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4B')),
                ('prver4c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4C')),
                ('prver4d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4D')),
                ('prver5', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER5')),
                ('prver5a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER5A')),
                ('prver5b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER5B')),
                ('prver5c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER5C')),
                ('prver5d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER5D')),
                ('prver6', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER6')),
                ('prver6a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER6A')),
                ('prver6b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER6B')),
                ('prver6c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER6C')),
                ('prver6d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER6D')),
                ('ps1_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS1_0')),
                ('ps1_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS1_1')),
                ('ps1_2', models.TextField(blank=True, help_text='TTYPE for INDEX', null=True, verbose_name='PS1_2')),
                ('ps2_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS2_0')),
                ('ps2_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS2_1')),
                ('ps2_2', models.TextField(blank=True, help_text='TTYPE for INDEX', null=True, verbose_name='PS2_2')),
                ('ps3_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS3_0')),
                ('ps3_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS3_1')),
                ('ps5_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS5_0')),
                ('ps5_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS5_1')),
                ('pv1_3', models.BigIntegerField(blank=True, help_text='Coord. 1 tabulated coordinate number', null=True, verbose_name='PV1_3')),
                ('pv2_3', models.BigIntegerField(blank=True, help_text='Coord. 2 tabulated coordinate number', null=True, verbose_name='PV2_3')),
                ('pv3_3', models.BigIntegerField(blank=True, help_text='Coord. 3 tabulated coordinate number', null=True, verbose_name='PV3_3')),
                ('pv5_3', models.BigIntegerField(blank=True, help_text='Coord. 5 tabulated coordinate number', null=True, verbose_name='PV5_3')),
                ('release', models.TextField(blank=True, null=True, verbose_name='RELEASE')),
                ('releasec', models.TextField(blank=True, null=True, verbose_name='RELEASEC')),
                ('requestr', models.TextField(blank=True, null=True, verbose_name='REQUESTR')),
                ('scannum', models.BigIntegerField(blank=True, help_text='Scan number (first value)', null=True, verbose_name='SCANNUM')),
                ('solarnet', models.FloatField(blank=True, help_text='Fully SOLARNET-compliant=1.0, partially=0.5', null=True, verbose_name='SOLARNET')),
                ('startobs', models.DateTimeField(blank=True, null=True, verbose_name='STARTOBS')),
                ('telconfg', models.TextField(blank=True, help_text='Telescope configuration', null=True, verbose_name='TELCONFG')),
                ('telescop', models.TextField(blank=True, help_text='Name of telescope', null=True, verbose_name='TELESCOP')),
                ('texposur', models.FloatField(blank=True, help_text='Single-exposure time (median value)', null=True, verbose_name='TEXPOSUR')),
                ('timesys', models.TextField(blank=True, null=True, verbose_name='TIMESYS')),
                ('var_keys', models.TextField(blank=True, help_text='SOLARNET variable-keywords', null=True, verbose_name='VAR_KEYS')),
                ('waveband', models.TextField(blank=True, null=True, verbose_name='WAVEBAND')),
                ('wavelnth', models.FloatField(blank=True, help_text='Prefilter peak wavelength', null=True, verbose_name='WAVELNTH')),
                ('waveunit', models.BigIntegerField(blank=True, help_text='WAVELNTH in units 10^WAVEUNIT m = nm', null=True, verbose_name='WAVEUNIT')),
                ('wcsnamea', models.TextField(blank=True, null=True, verbose_name='WCSNAMEA')),
                ('xposure', models.FloatField(blank=True, help_text='Summed exposure times (median value)', null=True, verbose_name='XPOSURE')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_crisp', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_crisp', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'CRISP',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chrotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('azimuth', models.FloatField(blank=True, help_text='telescope azimuth', null=True, verbose_name='AZIMUTH')),
                ('bkpltemp', models.FloatField(blank=True, help_text='Camera backplane temperature', null=True, verbose_name='BKPLTEMP')),
                ('bscale', models.FloatField(blank=True, null=True, verbose_name='BSCALE')),
                ('bunit', models.TextField(blank=True, help_text='Data is encoded in A/D units', null=True, verbose_name='BUNIT')),
                ('bzero', models.IntegerField(blank=True, help_text='Data is Unsigned Integer', null=True, verbose_name='BZERO')),
                ('ccdgain', models.FloatField(blank=True, help_text='CCD gain', null=True, verbose_name='CCDGAIN')),
                ('ccdpress', models.FloatField(blank=True, help_text='CCD chamber pressure', null=True, verbose_name='CCDPRESS')),
                ('ccdtemp', models.FloatField(blank=True, help_text='CCD temperature', null=True, verbose_name='CCDTEMP')),
                ('cdelt1', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1')),
                ('cdelt1a', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1A')),
                ('cdelt1b', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1B')),
                ('cdelt1c', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1C')),
                ('cdelt1d', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1D')),
                ('cdelt1e', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1E')),
                ('cdelt1f', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1F')),
                ('cdelt1g', models.FloatField(blank=True, help_text='Plate scale X-axis at CRPIX1', null=True, verbose_name='CDELT1G')),
                ('cdelt2', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2')),
                ('cdelt2a', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2A')),
                ('cdelt2b', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2B')),
                ('cdelt2c', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2C')),
                ('cdelt2d', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2D')),
                ('cdelt2e', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2E')),
                ('cdelt2f', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2F')),
                ('cdelt2g', models.FloatField(blank=True, help_text='Plate scale Y-axis at CRPIX2', null=True, verbose_name='CDELT2G')),
                ('cdrcrev', models.TextField(blank=True, help_text='source code revision', null=True, verbose_name='CDRCREV')),
                ('cdrcvers', models.TextField(blank=True, help_text='data reduction code version', null=True, verbose_name='CDRCVERS')),
                ('content', models.TextField(blank=True, null=True, verbose_name='CONTENT')),
                ('creator', models.TextField(blank=True, help_text='chrotel data reduction code', null=True, verbose_name='CREATOR')),
                ('crln_obs', models.FloatField(blank=True, help_text='sub-observer carrington longitude', null=True, verbose_name='CRLN_OBS')),
                ('crpix1', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1')),
                ('crpix1a', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1A')),
                ('crpix1b', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1B')),
                ('crpix1c', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1C')),
                ('crpix1d', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1D')),
                ('crpix1e', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1E')),
                ('crpix1f', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1F')),
                ('crpix1g', models.FloatField(blank=True, help_text='Reference pixel X-axis (Disk center)', null=True, verbose_name='CRPIX1G')),
                ('crpix2', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2')),
                ('crpix2a', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2A')),
                ('crpix2b', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2B')),
                ('crpix2c', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2C')),
                ('crpix2d', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2D')),
                ('crpix2e', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2E')),
                ('crpix2f', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2F')),
                ('crpix2g', models.FloatField(blank=True, help_text='Reference pixel Y-axis (Disk center)', null=True, verbose_name='CRPIX2G')),
                ('crval1', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1')),
                ('crval1a', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1A')),
                ('crval1b', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1B')),
                ('crval1c', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1C')),
                ('crval1d', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1D')),
                ('crval1e', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1E')),
                ('crval1f', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1F')),
                ('crval1g', models.FloatField(blank=True, help_text='X Coordinate at reference pixel', null=True, verbose_name='CRVAL1G')),
                ('crval2', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2')),
                ('crval2a', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2A')),
                ('crval2b', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2B')),
                ('crval2c', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2C')),
                ('crval2d', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2D')),
                ('crval2e', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2E')),
                ('crval2f', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2F')),
                ('crval2g', models.FloatField(blank=True, help_text='Y Coordinate at reference pixel', null=True, verbose_name='CRVAL2G')),
                ('ctype1', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1')),
                ('ctype1a', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1A')),
                ('ctype1b', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1B')),
                ('ctype1c', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1C')),
                ('ctype1d', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1D')),
                ('ctype1e', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1E')),
                ('ctype1f', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1F')),
                ('ctype1g', models.TextField(blank=True, help_text='Label X-axis', null=True, verbose_name='CTYPE1G')),
                ('ctype2', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2')),
                ('ctype2a', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2A')),
                ('ctype2b', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2B')),
                ('ctype2c', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2C')),
                ('ctype2d', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2D')),
                ('ctype2e', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2E')),
                ('ctype2f', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2F')),
                ('ctype2g', models.TextField(blank=True, help_text='Label Y-axis', null=True, verbose_name='CTYPE2G')),
                ('cunit1', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1')),
                ('cunit1a', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1A')),
                ('cunit1b', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1B')),
                ('cunit1c', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1C')),
                ('cunit1d', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1D')),
                ('cunit1e', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1E')),
                ('cunit1f', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1F')),
                ('cunit1g', models.TextField(blank=True, help_text='Unit X-axis', null=True, verbose_name='CUNIT1G')),
                ('cunit2', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2')),
                ('cunit2a', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2A')),
                ('cunit2b', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2B')),
                ('cunit2c', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2C')),
                ('cunit2d', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2D')),
                ('cunit2e', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2E')),
                ('cunit2f', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2F')),
                ('cunit2g', models.TextField(blank=True, help_text='Unit Y-axis', null=True, verbose_name='CUNIT2G')),
                ('darkfile', models.TextField(blank=True, help_text='darkframe used for calibration', null=True, verbose_name='DARKFILE')),
                ('datamax', models.IntegerField(blank=True, help_text='max data value', null=True, verbose_name='DATAMAX')),
                ('datamin', models.IntegerField(blank=True, help_text='min data value', null=True, verbose_name='DATAMIN')),
                ('datavers', models.TextField(blank=True, help_text='data format version', null=True, verbose_name='DATAVERS')),
                ('date', models.DateTimeField(blank=True, help_text='UTC time of FITS file creation', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text='UTC time of observation', null=True, verbose_name='DATE-OBS')),
                ('diskmax', models.IntegerField(blank=True, help_text='max data value on solar disk', null=True, verbose_name='DISKMAX')),
                ('diskmean', models.FloatField(blank=True, help_text='mean data value on solar disk', null=True, verbose_name='DISKMEAN')),
                ('diskmedn', models.FloatField(blank=True, help_text='median data value on solar disk', null=True, verbose_name='DISKMEDN')),
                ('diskmin', models.IntegerField(blank=True, help_text='min data value on solar disk', null=True, verbose_name='DISKMIN')),
                ('diskrms', models.FloatField(blank=True, help_text='standard deviation of on-disk data values', null=True, verbose_name='DISKRMS')),
                ('dsun_obs', models.FloatField(blank=True, help_text='distance to Sun', null=True, verbose_name='DSUN_OBS')),
                ('elevat', models.FloatField(blank=True, help_text='telescope elevation', null=True, verbose_name='ELEVAT')),
                ('exptime', models.FloatField(blank=True, help_text='exposure time', null=True, verbose_name='EXPTIME')),
                ('filename', models.TextField(blank=True, help_text='name of this data set', null=True, verbose_name='FILENAME')),
                ('filter', models.TextField(blank=True, help_text='The used ChroTel bandpass filter', null=True, verbose_name='FILTER')),
                ('filtfwhm', models.FloatField(blank=True, help_text='filter passband FWHM', null=True, verbose_name='FILTFWHM')),
                ('fitsfile', models.TextField(blank=True, help_text='name of this data set', null=True, verbose_name='FITSFILE')),
                ('flatdark', models.TextField(blank=True, help_text='flatfield dark used for calibration', null=True, verbose_name='FLATDARK')),
                ('flatfile', models.TextField(blank=True, help_text='flatfield used for calibration', null=True, verbose_name='FLATFILE')),
                ('glocked', models.IntegerField(blank=True, help_text='true if guiding system was locked on sun', null=True, verbose_name='GLOCKED')),
                ('hgln_obs', models.FloatField(blank=True, help_text='sub-observer stonyhurst longitude', null=True, verbose_name='HGLN_OBS')),
                ('hglt_obs', models.FloatField(blank=True, help_text='sub-observer heliographic latitude', null=True, verbose_name='HGLT_OBS')),
                ('img_rot', models.FloatField(blank=True, help_text='image rotation wrt geocentric north', null=True, verbose_name='IMG_ROT')),
                ('instrume', models.TextField(blank=True, null=True, verbose_name='INSTRUME')),
                ('level', models.TextField(blank=True, help_text='processing level of this dataset', null=True, verbose_name='LEVEL')),
                ('naxis', models.IntegerField(blank=True, null=True, verbose_name='NAXIS')),
                ('naxis1', models.IntegerField(blank=True, null=True, verbose_name='NAXIS1')),
                ('naxis2', models.IntegerField(blank=True, null=True, verbose_name='NAXIS2')),
                ('naxis3', models.IntegerField(blank=True, null=True, verbose_name='NAXIS3')),
                ('object', models.TextField(blank=True, null=True, verbose_name='OBJECT')),
                ('obsnfile', models.TextField(blank=True, help_text='raw observation data', null=True, verbose_name='OBSNFILE')),
                ('origin', models.TextField(blank=True, help_text='Kiepenheuer-Institut fuer Sonnenphysik', null=True, verbose_name='ORIGIN')),
                ('pc1_1', models.FloatField(blank=True, null=True, verbose_name='PC1_1')),
                ('pc1_1a', models.FloatField(blank=True, null=True, verbose_name='PC1_1A')),
                ('pc1_1b', models.FloatField(blank=True, null=True, verbose_name='PC1_1B')),
                ('pc1_1c', models.FloatField(blank=True, null=True, verbose_name='PC1_1C')),
                ('pc1_1d', models.FloatField(blank=True, null=True, verbose_name='PC1_1D')),
                ('pc1_1e', models.FloatField(blank=True, null=True, verbose_name='PC1_1E')),
                ('pc1_1f', models.FloatField(blank=True, null=True, verbose_name='PC1_1F')),
                ('pc1_1g', models.FloatField(blank=True, null=True, verbose_name='PC1_1G')),
                ('pc1_2', models.FloatField(blank=True, null=True, verbose_name='PC1_2')),
                ('pc1_2a', models.FloatField(blank=True, null=True, verbose_name='PC1_2A')),
                ('pc1_2b', models.FloatField(blank=True, null=True, verbose_name='PC1_2B')),
                ('pc1_2c', models.FloatField(blank=True, null=True, verbose_name='PC1_2C')),
                ('pc1_2d', models.FloatField(blank=True, null=True, verbose_name='PC1_2D')),
                ('pc1_2e', models.FloatField(blank=True, null=True, verbose_name='PC1_2E')),
                ('pc1_2f', models.FloatField(blank=True, null=True, verbose_name='PC1_2F')),
                ('pc1_2g', models.FloatField(blank=True, null=True, verbose_name='PC1_2G')),
                ('pc2_1', models.FloatField(blank=True, null=True, verbose_name='PC2_1')),
                ('pc2_1a', models.FloatField(blank=True, null=True, verbose_name='PC2_1A')),
                ('pc2_1b', models.FloatField(blank=True, null=True, verbose_name='PC2_1B')),
                ('pc2_1c', models.FloatField(blank=True, null=True, verbose_name='PC2_1C')),
                ('pc2_1d', models.FloatField(blank=True, null=True, verbose_name='PC2_1D')),
                ('pc2_1e', models.FloatField(blank=True, null=True, verbose_name='PC2_1E')),
                ('pc2_1f', models.FloatField(blank=True, null=True, verbose_name='PC2_1F')),
                ('pc2_1g', models.FloatField(blank=True, null=True, verbose_name='PC2_1G')),
                ('pc2_2', models.FloatField(blank=True, null=True, verbose_name='PC2_2')),
                ('pc2_2a', models.FloatField(blank=True, null=True, verbose_name='PC2_2A')),
                ('pc2_2b', models.FloatField(blank=True, null=True, verbose_name='PC2_2B')),
                ('pc2_2c', models.FloatField(blank=True, null=True, verbose_name='PC2_2C')),
                ('pc2_2d', models.FloatField(blank=True, null=True, verbose_name='PC2_2D')),
                ('pc2_2e', models.FloatField(blank=True, null=True, verbose_name='PC2_2E')),
                ('pc2_2f', models.FloatField(blank=True, null=True, verbose_name='PC2_2F')),
                ('pc2_2g', models.FloatField(blank=True, null=True, verbose_name='PC2_2G')),
                ('pressure', models.FloatField(blank=True, help_text='CCD chamber pressure', null=True, verbose_name='PRESSURE')),
                ('psd_ll', models.FloatField(blank=True, help_text='PSD light level', null=True, verbose_name='PSD_LL')),
                ('realtime', models.IntegerField(blank=True, help_text='true if data was processed in realtime mode', null=True, verbose_name='REALTIME')),
                ('rot_offs', models.FloatField(blank=True, help_text='filter specific offset to IMG_ROT', null=True, verbose_name='ROT_OFFS')),
                ('rsun_obs', models.FloatField(blank=True, help_text='apparent radius of solar disk', null=True, verbose_name='RSUN_OBS')),
                ('rsun_ref', models.IntegerField(blank=True, help_text='reference radius of the Sun', null=True, verbose_name='RSUN_REF')),
                ('solar_b0', models.FloatField(blank=True, help_text='Solar B0 angle', null=True, verbose_name='SOLAR_B0')),
                ('solar_p0', models.FloatField(blank=True, help_text='Solar P0 angle', null=True, verbose_name='SOLAR_P0')),
                ('telescop', models.TextField(blank=True, help_text='Chromospheric Telescope', null=True, verbose_name='TELESCOP')),
                ('temp_bpt', models.FloatField(blank=True, help_text='Camera backplate temperature', null=True, verbose_name='TEMP_BPT')),
                ('temp_ccd', models.FloatField(blank=True, help_text='CCD temperature', null=True, verbose_name='TEMP_CCD')),
                ('tt_rms', models.FloatField(blank=True, help_text='Tip-Tilt motion', null=True, verbose_name='TT_RMS')),
                ('wavelnth', models.FloatField(blank=True, help_text='filter center wavelength', null=True, verbose_name='WAVELNTH')),
                ('wcsname', models.TextField(blank=True, null=True, verbose_name='WCSNAME')),
                ('wcsnamea', models.TextField(blank=True, null=True, verbose_name='WCSNAMEA')),
                ('wcsnameb', models.TextField(blank=True, null=True, verbose_name='WCSNAMEB')),
                ('wcsnamec', models.TextField(blank=True, null=True, verbose_name='WCSNAMEC')),
                ('wcsnamed', models.TextField(blank=True, null=True, verbose_name='WCSNAMED')),
                ('wcsnamee', models.TextField(blank=True, null=True, verbose_name='WCSNAMEE')),
                ('wcsnamef', models.TextField(blank=True, null=True, verbose_name='WCSNAMEF')),
                ('wcsnameg', models.TextField(blank=True, null=True, verbose_name='WCSNAMEG')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_chrotel', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_chrotel', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'ChroTel',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chromis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('ao_lock', models.FloatField(blank=True, help_text='Fraction of time the AO was locking, 2s average', null=True, verbose_name='AO_LOCK')),
                ('ao_nmode', models.BigIntegerField(blank=True, help_text='Number of AO corrected Mirror modes', null=True, verbose_name='AO_NMODE')),
                ('atmos_r0', models.FloatField(blank=True, help_text='Atmospheric coherence length (mean value)', null=True, verbose_name='ATMOS_R0')),
                ('btype', models.TextField(blank=True, help_text='Type of data in array', null=True, verbose_name='BTYPE')),
                ('bunit', models.TextField(blank=True, help_text='Units in array', null=True, verbose_name='BUNIT')),
                ('cadavg', models.FloatField(blank=True, help_text='Average of actual cadence', null=True, verbose_name='CADAVG')),
                ('cadmax', models.FloatField(blank=True, help_text='Maximum of actual cadence', null=True, verbose_name='CADMAX')),
                ('cadmin', models.FloatField(blank=True, help_text='Minimum of actual cadence', null=True, verbose_name='CADMIN')),
                ('cadvar', models.FloatField(blank=True, help_text='Variance of actual cadence', null=True, verbose_name='CADVAR')),
                ('camera', models.TextField(blank=True, null=True, verbose_name='CAMERA')),
                ('cdelt1', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT1')),
                ('cdelt1a', models.FloatField(blank=True, help_text='Zero FOV extent', null=True, verbose_name='CDELT1A')),
                ('cdelt2', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT2')),
                ('cdelt2a', models.FloatField(blank=True, help_text='Zero FOV extent', null=True, verbose_name='CDELT2A')),
                ('cdelt3', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT3')),
                ('cdelt4', models.BigIntegerField(blank=True, help_text='Stokes indices [1,2,3,4] --> [I,Q,U,V]', null=True, verbose_name='CDELT4')),
                ('cdelt5', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CDELT5')),
                ('cname1', models.TextField(blank=True, null=True, verbose_name='CNAME1')),
                ('cname2', models.TextField(blank=True, null=True, verbose_name='CNAME2')),
                ('cname3', models.TextField(blank=True, null=True, verbose_name='CNAME3')),
                ('cname5', models.TextField(blank=True, null=True, verbose_name='CNAME5')),
                ('crpix1', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX1')),
                ('crpix1a', models.FloatField(blank=True, help_text='Center pixel of image array', null=True, verbose_name='CRPIX1A')),
                ('crpix2', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX2')),
                ('crpix2a', models.FloatField(blank=True, help_text='Center pixel of image array', null=True, verbose_name='CRPIX2A')),
                ('crpix3', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX3')),
                ('crpix4', models.BigIntegerField(blank=True, help_text='Index of Stokes components in pixel 1', null=True, verbose_name='CRPIX4')),
                ('crpix5', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRPIX5')),
                ('crval1', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL1')),
                ('crval1a', models.FloatField(blank=True, help_text='Coordinates of center of image array', null=True, verbose_name='CRVAL1A')),
                ('crval2', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL2')),
                ('crval2a', models.FloatField(blank=True, help_text='Coordinates of center of image array', null=True, verbose_name='CRVAL2A')),
                ('crval3', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL3')),
                ('crval4', models.BigIntegerField(blank=True, help_text='The first Stokes index is 1', null=True, verbose_name='CRVAL4')),
                ('crval5', models.BigIntegerField(blank=True, help_text='Unity transform', null=True, verbose_name='CRVAL5')),
                ('csyer1', models.BigIntegerField(blank=True, help_text='Orientation unknown', null=True, verbose_name='CSYER1')),
                ('csyer2', models.BigIntegerField(blank=True, help_text='Orientation unknown', null=True, verbose_name='CSYER2')),
                ('ctype1', models.TextField(blank=True, help_text='SOLAR X', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='SOLAR Y', null=True, verbose_name='CTYPE2')),
                ('ctype3', models.TextField(blank=True, help_text='Wavelength, function of tuning and scan number', null=True, verbose_name='CTYPE3')),
                ('ctype4', models.TextField(blank=True, help_text='Stokes vector [I,Q,U,V]', null=True, verbose_name='CTYPE4')),
                ('ctype5', models.TextField(blank=True, help_text='Time, function of tuning and scan number', null=True, verbose_name='CTYPE5')),
                ('cunit1', models.TextField(blank=True, help_text='Unit along axis 1', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='Unit along axis 2', null=True, verbose_name='CUNIT2')),
                ('cunit3', models.TextField(blank=True, help_text='Wavelength unit, tabulated for dim. 3 and 5', null=True, verbose_name='CUNIT3')),
                ('cunit5', models.TextField(blank=True, null=True, verbose_name='CUNIT5')),
                ('cwdis3', models.TextField(blank=True, help_text='WAVE distortions in lookup table', null=True, verbose_name='CWDIS3')),
                ('cwerr3', models.FloatField(blank=True, help_text='Max total distortion', null=True, verbose_name='CWERR3')),
                ('datakurt', models.FloatField(blank=True, help_text='The kurtosis (provided value)', null=True, verbose_name='DATAKURT')),
                ('datamax', models.FloatField(blank=True, help_text='The maximum data value (provided value)', null=True, verbose_name='DATAMAX')),
                ('datamean', models.FloatField(blank=True, help_text='The average data value (provided value)', null=True, verbose_name='DATAMEAN')),
                ('datamedn', models.FloatField(blank=True, help_text='The median data value (provided value)', null=True, verbose_name='DATAMEDN')),
                ('datamin', models.FloatField(blank=True, help_text='The minimum data value (provided value)', null=True, verbose_name='DATAMIN')),
                ('datap01', models.FloatField(blank=True, help_text='The 01 percentile (provided value)', null=True, verbose_name='DATAP01')),
                ('datap10', models.FloatField(blank=True, help_text='The 10 percentile (provided value)', null=True, verbose_name='DATAP10')),
                ('datap25', models.FloatField(blank=True, help_text='The 25 percentile (provided value)', null=True, verbose_name='DATAP25')),
                ('datap75', models.FloatField(blank=True, help_text='The 75 percentile (provided value)', null=True, verbose_name='DATAP75')),
                ('datap90', models.FloatField(blank=True, help_text='The 90 percentile (provided value)', null=True, verbose_name='DATAP90')),
                ('datap95', models.FloatField(blank=True, help_text='The 95 percentile (provided value)', null=True, verbose_name='DATAP95')),
                ('datap98', models.FloatField(blank=True, help_text='The 98 percentile (provided value)', null=True, verbose_name='DATAP98')),
                ('datap99', models.FloatField(blank=True, help_text='The 99 percentile (provided value)', null=True, verbose_name='DATAP99')),
                ('datarms', models.FloatField(blank=True, help_text='The RMS deviation from the mean (provided value', null=True, verbose_name='DATARMS')),
                ('dataskew', models.FloatField(blank=True, help_text='The skewness (provided value)', null=True, verbose_name='DATASKEW')),
                ('date', models.DateTimeField(blank=True, help_text='Creation UTC date of FITS header', null=True, verbose_name='DATE')),
                ('date_avg', models.DateTimeField(blank=True, help_text='Average time of observation (provided value)', null=True, verbose_name='DATE-AVG')),
                ('date_obs', models.DateTimeField(blank=True, help_text='Inferred from directory.', null=True, verbose_name='DATE-OBS')),
                ('dateref', models.DateTimeField(blank=True, help_text='Reference time in ISO-8601', null=True, verbose_name='DATEREF')),
                ('detector', models.TextField(blank=True, help_text='Inferred from filename.', null=True, verbose_name='DETECTOR')),
                ('detfirm', models.TextField(blank=True, null=True, verbose_name='DETFIRM')),
                ('detgain', models.FloatField(blank=True, help_text='or camera specific unit', null=True, verbose_name='DETGAIN')),
                ('detmodel', models.TextField(blank=True, null=True, verbose_name='DETMODEL')),
                ('detoffs', models.BigIntegerField(blank=True, help_text='or camera specific unit', null=True, verbose_name='DETOFFS')),
                ('dw3_apply', models.FloatField(blank=True, help_text='Application stage (world coordinates)', null=True, verbose_name='DW3.APPLY')),
                ('dw3_associate', models.FloatField(blank=True, help_text='Association stage (pixel coordinates)', null=True, verbose_name='DW3.ASSOCIATE')),
                ('dw3_axis1', models.BigIntegerField(blank=True, help_text='Spatial X', null=True, verbose_name='DW3 AXIS1')),
                ('dw3_axis2', models.BigIntegerField(blank=True, help_text='Spatial Y', null=True, verbose_name='DW3 AXIS2')),
                ('dw3_axis3', models.BigIntegerField(blank=True, help_text='Scan number', null=True, verbose_name='DW3 AXIS3')),
                ('dw3_axis_1', models.FloatField(blank=True, help_text='Spatial X', null=True, verbose_name='DW3.AXIS.1')),
                ('dw3_axis_2', models.FloatField(blank=True, help_text='Spatial Y', null=True, verbose_name='DW3.AXIS.2')),
                ('dw3_axis_3', models.FloatField(blank=True, help_text='Scan number', null=True, verbose_name='DW3.AXIS.3')),
                ('dw3_cwdis_lookup', models.FloatField(blank=True, help_text='Distortions in lookup table', null=True, verbose_name='DW3.CWDIS.LOOKUP')),
                ('dw3_cwerr', models.FloatField(blank=True, help_text='Max distortion (this correction step)', null=True, verbose_name='DW3 CWERR')),
                ('dw3_extver', models.FloatField(blank=True, help_text='Extension version number', null=True, verbose_name='DW3.EXTVER')),
                ('dw3_name', models.TextField(blank=True, help_text='Type of correction', null=True, verbose_name='DW3 NAME')),
                ('dw3_naxes', models.BigIntegerField(blank=True, help_text='3 axes in the lookup table', null=True, verbose_name='DW3 NAXES')),
                ('elev_ang', models.FloatField(blank=True, help_text='Elevation angle (mean value)', null=True, verbose_name='ELEV_ANG')),
                ('extname', models.TextField(blank=True, null=True, verbose_name='EXTNAME')),
                ('filename', models.TextField(blank=True, null=True, verbose_name='FILENAME')),
                ('filled', models.BigIntegerField(blank=True, help_text='Missing pixels have been filled.', null=True, verbose_name='FILLED')),
                ('filter1', models.TextField(blank=True, help_text='Inferred from filename.', null=True, verbose_name='FILTER1')),
                ('instrume', models.TextField(blank=True, help_text='Name of instrument', null=True, verbose_name='INSTRUME')),
                ('longstrn', models.TextField(blank=True, help_text='The OGIP long string convention may be used.', null=True, verbose_name='LONGSTRN')),
                ('naxis', models.BigIntegerField(blank=True, help_text='Number of data axes', null=True, verbose_name='NAXIS')),
                ('naxis1', models.BigIntegerField(blank=True, help_text='Number of positions along axis 1', null=True, verbose_name='NAXIS1')),
                ('naxis2', models.BigIntegerField(blank=True, help_text='Number of positions along axis 2', null=True, verbose_name='NAXIS2')),
                ('naxis3', models.BigIntegerField(blank=True, help_text='Number of positions along axis 3', null=True, verbose_name='NAXIS3')),
                ('naxis4', models.BigIntegerField(blank=True, help_text='Number of positions along axis 4', null=True, verbose_name='NAXIS4')),
                ('naxis5', models.BigIntegerField(blank=True, help_text='Number of positions along axis 5', null=True, verbose_name='NAXIS5')),
                ('nsumexp', models.FloatField(blank=True, help_text='Number of summed exposures (median value)', null=True, verbose_name='NSUMEXP')),
                ('object', models.TextField(blank=True, null=True, verbose_name='OBJECT')),
                ('obs_hdu', models.BigIntegerField(blank=True, help_text='Observational Header and Data Unit', null=True, verbose_name='OBS_HDU')),
                ('observer', models.TextField(blank=True, null=True, verbose_name='OBSERVER')),
                ('obsgeo_x', models.BigIntegerField(blank=True, help_text='SST location', null=True, verbose_name='OBSGEO-X')),
                ('obsgeo_y', models.BigIntegerField(blank=True, help_text='SST location', null=True, verbose_name='OBSGEO-Y')),
                ('obsgeo_z', models.BigIntegerField(blank=True, help_text='SST location', null=True, verbose_name='OBSGEO-Z')),
                ('obsrvtry', models.TextField(blank=True, help_text='Name of observatory', null=True, verbose_name='OBSRVTRY')),
                ('origin', models.TextField(blank=True, null=True, verbose_name='ORIGIN')),
                ('pc1_1', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC1_1')),
                ('pc2_2', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC2_2')),
                ('pc3_3', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC3_3')),
                ('pc4_4', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC4_4')),
                ('pc5_5', models.FloatField(blank=True, help_text='No rotations', null=True, verbose_name='PC5_5')),
                ('prbra1', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA1')),
                ('prbra2', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA2')),
                ('prbra3', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA3')),
                ('prbra4', models.TextField(blank=True, help_text='Version control branch', null=True, verbose_name='PRBRA4')),
                ('prlib1', models.TextField(blank=True, help_text='Software library', null=True, verbose_name='PRLIB1')),
                ('prlib1a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1A')),
                ('prlib1b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1B')),
                ('prlib1c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1C')),
                ('prlib1d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1D')),
                ('prlib1e', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB1E')),
                ('prlib2', models.TextField(blank=True, help_text='Software library containing chromis::make_wb_cu', null=True, verbose_name='PRLIB2')),
                ('prlib2a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2A')),
                ('prlib2b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2B')),
                ('prlib2c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2C')),
                ('prlib2d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB2D')),
                ('prlib3', models.TextField(blank=True, help_text='Software library containing chromis::make_nb_cu', null=True, verbose_name='PRLIB3')),
                ('prlib3a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3A')),
                ('prlib3b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3B')),
                ('prlib3c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3C')),
                ('prlib3d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB3D')),
                ('prlib4', models.TextField(blank=True, help_text='Software library containing red::fitscube_expor', null=True, verbose_name='PRLIB4')),
                ('prlib4a', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4A')),
                ('prlib4b', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4B')),
                ('prlib4c', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4C')),
                ('prlib4d', models.TextField(blank=True, help_text='Additional software library', null=True, verbose_name='PRLIB4D')),
                ('prmode1', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE1')),
                ('prmode2', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE2')),
                ('prmode3', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE3')),
                ('prmode4', models.TextField(blank=True, help_text='Processing mode', null=True, verbose_name='PRMODE4')),
                ('prpara1', models.TextField(blank=True, help_text='List of parameters/options for PRPROC1', null=True, verbose_name='PRPARA1')),
                ('prpara2', models.TextField(blank=True, help_text='List of parameters/opt', null=True, verbose_name='PRPARA2')),
                ('prpara3', models.TextField(blank=True, help_text='List of parameters/options for PRPROC2', null=True, verbose_name='PRPARA3')),
                ('prpara4', models.TextField(blank=True, help_text='List of parameters/options for PRPROC4', null=True, verbose_name='PRPARA4')),
                ('prproc2', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC2')),
                ('prproc3', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC3')),
                ('prproc4', models.TextField(blank=True, help_text='Name of procedure used', null=True, verbose_name='PRPROC4')),
                ('prstep1', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP1')),
                ('prstep2', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP2')),
                ('prstep3', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP3')),
                ('prstep4', models.TextField(blank=True, help_text='Processing step name', null=True, verbose_name='PRSTEP4')),
                ('prver1', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1')),
                ('prver1a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1A')),
                ('prver1b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1B')),
                ('prver1c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1C')),
                ('prver1d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER1D')),
                ('prver1e', models.TextField(blank=True, help_text='Library version/MJD of last update (From .momfb', null=True, verbose_name='PRVER1E')),
                ('prver2', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2')),
                ('prver2a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2A')),
                ('prver2b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2B')),
                ('prver2c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2C')),
                ('prver2d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER2D')),
                ('prver3', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3')),
                ('prver3a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3A')),
                ('prver3b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3B')),
                ('prver3c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3C')),
                ('prver3d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER3D')),
                ('prver4', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4')),
                ('prver4a', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4A')),
                ('prver4b', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4B')),
                ('prver4c', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4C')),
                ('prver4d', models.TextField(blank=True, help_text='Library version/MJD of last update', null=True, verbose_name='PRVER4D')),
                ('ps1_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS1_0')),
                ('ps1_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS1_1')),
                ('ps1_2', models.TextField(blank=True, help_text='TTYPE for INDEX', null=True, verbose_name='PS1_2')),
                ('ps2_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS2_0')),
                ('ps2_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS2_1')),
                ('ps2_2', models.TextField(blank=True, help_text='TTYPE for INDEX', null=True, verbose_name='PS2_2')),
                ('ps3_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS3_0')),
                ('ps3_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS3_1')),
                ('ps5_0', models.TextField(blank=True, help_text='EXTNAME; EXTVER=EXTLEVEL=1 is default', null=True, verbose_name='PS5_0')),
                ('ps5_1', models.TextField(blank=True, help_text='TTYPE for column w/coordinates', null=True, verbose_name='PS5_1')),
                ('pv1_3', models.BigIntegerField(blank=True, help_text='Coord. 1 tabulated coordinate number', null=True, verbose_name='PV1_3')),
                ('pv2_3', models.BigIntegerField(blank=True, help_text='Coord. 2 tabulated coordinate number', null=True, verbose_name='PV2_3')),
                ('pv3_3', models.BigIntegerField(blank=True, help_text='Coord. 3 tabulated coordinate number', null=True, verbose_name='PV3_3')),
                ('pv5_3', models.BigIntegerField(blank=True, help_text='Coord. 5 tabulated coordinate number', null=True, verbose_name='PV5_3')),
                ('release', models.TextField(blank=True, null=True, verbose_name='RELEASE')),
                ('releasec', models.TextField(blank=True, null=True, verbose_name='RELEASEC')),
                ('requestr', models.TextField(blank=True, null=True, verbose_name='REQUESTR')),
                ('scannum', models.BigIntegerField(blank=True, help_text='Scan number (first value)', null=True, verbose_name='SCANNUM')),
                ('solarnet', models.FloatField(blank=True, null=True, verbose_name='SOLARNET')),
                ('startobs', models.DateTimeField(blank=True, null=True, verbose_name='STARTOBS')),
                ('telconfg', models.TextField(blank=True, help_text='Telescope configuration', null=True, verbose_name='TELCONFG')),
                ('telescop', models.TextField(blank=True, help_text='Name of telescope', null=True, verbose_name='TELESCOP')),
                ('texposur', models.FloatField(blank=True, help_text='Single-exposure time (median value)', null=True, verbose_name='TEXPOSUR')),
                ('timesys', models.TextField(blank=True, null=True, verbose_name='TIMESYS')),
                ('var_keys', models.TextField(blank=True, help_text='SOLARNET variable-keywords', null=True, verbose_name='VAR_KEYS')),
                ('waveband', models.TextField(blank=True, null=True, verbose_name='WAVEBAND')),
                ('wavelnth', models.FloatField(blank=True, help_text='Prefilter peak wavelength', null=True, verbose_name='WAVELNTH')),
                ('waveunit', models.BigIntegerField(blank=True, help_text='WAVELNTH in units 10^WAVEUNIT m = nm', null=True, verbose_name='WAVEUNIT')),
                ('wcsnamea', models.TextField(blank=True, null=True, verbose_name='WCSNAMEA')),
                ('xposure', models.FloatField(blank=True, help_text='Summed exposure times (median value)', null=True, verbose_name='XPOSURE')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_chromis', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_chromis', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'CHROMIS',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AiaLevel1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('acs_cgt', models.TextField(blank=True, help_text='ACS ID of Controlling Guide Telescope - ACS_AN_NUM_CGT', null=True, verbose_name='ACS_CGT')),
                ('acs_eclp', models.TextField(blank=True, help_text='ACS eclipse flag - ACS_AN_FLAG_CSS_ECLIPSE', null=True, verbose_name='ACS_ECLP')),
                ('acs_mode', models.TextField(blank=True, help_text='ACS pointing mode - ACS_AN_ACS_MODE', null=True, verbose_name='ACS_MODE')),
                ('acs_safe', models.TextField(blank=True, help_text='ACS safe hold flag - ACS_AN_FLAG_ACE_INSAFEHOLD', null=True, verbose_name='ACS_SAFE')),
                ('acs_sunp', models.TextField(blank=True, help_text='ACS sun presense flag - ACS_AN_FLAG_DSS_SUNPRES', null=True, verbose_name='ACS_SUNP')),
                ('aecdelay', models.IntegerField(blank=True, help_text='AIA_IMG_AEC_DELAY', null=True, verbose_name='AECDELAY')),
                ('aecmode', models.TextField(blank=True, help_text='AIA_IMG_AEC_MODE', null=True, verbose_name='AECMODE')),
                ('aectype', models.IntegerField(blank=True, help_text='AIA_IMG_AEC_TYPE', null=True, verbose_name='AECTYPE')),
                ('agt1svy', models.IntegerField(blank=True, help_text='AIA_GT1_SUNVECTOR_Y', null=True, verbose_name='AGT1SVY')),
                ('agt1svz', models.IntegerField(blank=True, help_text='AIA_GT1_SUNVECTOR_Z', null=True, verbose_name='AGT1SVZ')),
                ('agt2svy', models.IntegerField(blank=True, help_text='AIA_GT2_SUNVECTOR_Y', null=True, verbose_name='AGT2SVY')),
                ('agt2svz', models.IntegerField(blank=True, help_text='AIA_GT2_SUNVECTOR_Z', null=True, verbose_name='AGT2SVZ')),
                ('agt3svy', models.IntegerField(blank=True, help_text='AIA_GT3_SUNVECTOR_Y', null=True, verbose_name='AGT3SVY')),
                ('agt3svz', models.IntegerField(blank=True, help_text='AIA_GT3_SUNVECTOR_Z', null=True, verbose_name='AGT3SVZ')),
                ('agt4svy', models.IntegerField(blank=True, help_text='AIA_GT4_SUNVECTOR_Y', null=True, verbose_name='AGT4SVY')),
                ('agt4svz', models.IntegerField(blank=True, help_text='AIA_GT4_SUNVECTOR_Z', null=True, verbose_name='AGT4SVZ')),
                ('aiaecenf', models.IntegerField(blank=True, help_text='AIA_IMG_AEC_ENA_FLAG', null=True, verbose_name='AIAECENF')),
                ('aiaecti', models.IntegerField(blank=True, help_text='AIA_IMG_AEC_TABLE_ID', null=True, verbose_name='AIAECTI')),
                ('aiagp1', models.IntegerField(blank=True, help_text='AIA_IMG_GP1', null=True, verbose_name='AIAGP1')),
                ('aiagp10', models.IntegerField(blank=True, help_text='AIA_IMG_GP10', null=True, verbose_name='AIAGP10')),
                ('aiagp2', models.IntegerField(blank=True, help_text='AIA_IMG_GP2', null=True, verbose_name='AIAGP2')),
                ('aiagp3', models.IntegerField(blank=True, help_text='AIA_IMG_GP3', null=True, verbose_name='AIAGP3')),
                ('aiagp4', models.IntegerField(blank=True, help_text='AIA_IMG_GP4', null=True, verbose_name='AIAGP4')),
                ('aiagp5', models.IntegerField(blank=True, help_text='AIA_IMG_GP5', null=True, verbose_name='AIAGP5')),
                ('aiagp6', models.IntegerField(blank=True, help_text='AIA_IMG_GP6', null=True, verbose_name='AIAGP6')),
                ('aiagp7', models.IntegerField(blank=True, help_text='AIA_IMG_GP7', null=True, verbose_name='AIAGP7')),
                ('aiagp8', models.IntegerField(blank=True, help_text='AIA_IMG_GP8', null=True, verbose_name='AIAGP8')),
                ('aiagp9', models.IntegerField(blank=True, help_text='AIA_IMG_GP9', null=True, verbose_name='AIAGP9')),
                ('aiahfsn', models.IntegerField(blank=True, help_text='AIA_IMG_HIST_FSN', null=True, verbose_name='AIAHFSN')),
                ('aiasen', models.IntegerField(blank=True, help_text='AIA_IMG_AS_ENCODER', null=True, verbose_name='AIASEN')),
                ('aiawvlen', models.IntegerField(blank=True, help_text='AIA_IMG_WAVELENGTH', null=True, verbose_name='AIAWVLEN')),
                ('aicfgdl1', models.IntegerField(blank=True, help_text='AIA_IMG_CFG_DELAY_1', null=True, verbose_name='AICFGDL1')),
                ('aicfgdl2', models.IntegerField(blank=True, help_text='AIA_IMG_CFG_DELAY_2', null=True, verbose_name='AICFGDL2')),
                ('aicfgdl3', models.IntegerField(blank=True, help_text='AIA_IMG_CFG_DELAY_3', null=True, verbose_name='AICFGDL3')),
                ('aicfgdl4', models.IntegerField(blank=True, help_text='AIA_IMG_CFG_DELAY_4', null=True, verbose_name='AICFGDL4')),
                ('aifcps', models.IntegerField(blank=True, help_text='AIA_IMG_FC_POSITION', null=True, verbose_name='AIFCPS')),
                ('aifdbid', models.IntegerField(blank=True, help_text='AIA_IMG_FDB_ID', null=True, verbose_name='AIFDBID')),
                ('aifiltyp', models.IntegerField(blank=True, help_text='AIA_IMG_FILTER_TYPE', null=True, verbose_name='AIFILTYP')),
                ('aifoenfl', models.IntegerField(blank=True, help_text='AIA_IMG_FOCUS_ENA_FLAG', null=True, verbose_name='AIFOENFL')),
                ('aifrmlid', models.IntegerField(blank=True, help_text='AIA_IMG_FRMLIST_ID', null=True, verbose_name='AIFRMLID')),
                ('aiftsid', models.IntegerField(blank=True, help_text='AIA_IMG_FTS_ID', null=True, verbose_name='AIFTSID')),
                ('aiftswth', models.IntegerField(blank=True, help_text='AIA_IMG_FLT_TYPE_SW_TH', null=True, verbose_name='AIFTSWTH')),
                ('aifwen', models.IntegerField(blank=True, help_text='AIA_IMG_FW_ENCODER', null=True, verbose_name='AIFWEN')),
                ('aihis192', models.IntegerField(blank=True, help_text='AIA_IMG_HISTC_BN_192', null=True, verbose_name='AIHIS192')),
                ('aihis348', models.IntegerField(blank=True, help_text='AIA_IMG_HISTC_BN_348', null=True, verbose_name='AIHIS348')),
                ('aihis604', models.IntegerField(blank=True, help_text='AIA_IMG_HISTC_BN_604', null=True, verbose_name='AIHIS604')),
                ('aihis860', models.IntegerField(blank=True, help_text='AIA_IMG_HISTC_BN_860', null=True, verbose_name='AIHIS860')),
                ('aihismxb', models.IntegerField(blank=True, help_text='AIA_IMG_HIST_MAX_BIN', null=True, verbose_name='AIHISMXB')),
                ('aimgfsn', models.IntegerField(blank=True, help_text='AIA_IMG_FRLIST_POS', null=True, verbose_name='AIMGFSN')),
                ('aimgots', models.IntegerField(blank=True, help_text='AIA_IMG_OBT_TIME_SH_SEC', null=True, verbose_name='AIMGOTS')),
                ('aimgotss', models.IntegerField(blank=True, help_text='AIA_IMG_OBT_TIME_SH_SS', null=True, verbose_name='AIMGOTSS')),
                ('aimgshce', models.IntegerField(blank=True, help_text='AIA_IMG_SH_CMDED_EXPOSURE', null=True, verbose_name='AIMGSHCE')),
                ('aimgshen', models.IntegerField(blank=True, help_text='AIA_IMG_SH_ENCODER', null=True, verbose_name='AIMGSHEN')),
                ('aimgtyp', models.IntegerField(blank=True, help_text='AIA_IMG_IMAGE_TYPE', null=True, verbose_name='AIMGTYP')),
                ('aimshcbc', models.FloatField(blank=True, help_text='AIA_IMG_SH_CLOSE_BOT_CENTR', null=True, verbose_name='AIMSHCBC')),
                ('aimshcbe', models.FloatField(blank=True, help_text='AIA_IMG_SH_CLOSE_BOT_EDGE', null=True, verbose_name='AIMSHCBE')),
                ('aimshctc', models.FloatField(blank=True, help_text='AIA_IMG_SH_CLOSE_TOP_CENTR', null=True, verbose_name='AIMSHCTC')),
                ('aimshcte', models.FloatField(blank=True, help_text='AIA_IMG_SH_CLOSE_TOP_EDGE', null=True, verbose_name='AIMSHCTE')),
                ('aimshobc', models.FloatField(blank=True, help_text='AIA_IMG_SH_OPEN_BOT_CENTR', null=True, verbose_name='AIMSHOBC')),
                ('aimshobe', models.FloatField(blank=True, help_text='AIA_IMG_SH_OPEN_BOT_EDGE', null=True, verbose_name='AIMSHOBE')),
                ('aimshotc', models.FloatField(blank=True, help_text='AIA_IMG_SH_OPEN_TOP_CENTR', null=True, verbose_name='AIMSHOTC')),
                ('aimshote', models.FloatField(blank=True, help_text='AIA_IMG_SH_OPEN_TOP_EDGE', null=True, verbose_name='AIMSHOTE')),
                ('aistate', models.TextField(blank=True, help_text='AIA_IMG_ISS_LOOP', null=True, verbose_name='AISTATE')),
                ('aivnmst', models.IntegerField(blank=True, help_text='AIA_VER_NUM_IMAGE_STATUS', null=True, verbose_name='AIVNMST')),
                ('asd_rec', models.TextField(blank=True, help_text='Ancillary Science Data series record pointer', null=True, verbose_name='ASD_REC')),
                ('asqfsn', models.IntegerField(blank=True, help_text='AIA_SEQ_FRAME_SN', null=True, verbose_name='ASQFSN')),
                ('asqhdr', models.BigIntegerField(blank=True, help_text='AIA_SEQ_HEADER', null=True, verbose_name='ASQHDR')),
                ('asqtnum', models.IntegerField(blank=True, help_text='AIA_SEQ_TEL_NUM', null=True, verbose_name='ASQTNUM')),
                ('bld_vers', models.TextField(blank=True, help_text='Build Version: from jsoc_version.h', null=True, verbose_name='BLD_VERS')),
                ('camera', models.IntegerField(blank=True, help_text='For AIA: 1, 2, 3  or 4', null=True, verbose_name='CAMERA')),
                ('car_rot', models.IntegerField(blank=True, help_text='Carrington rotation number of CRLN_OBS', null=True, verbose_name='CAR_ROT')),
                ('cdelt1', models.FloatField(blank=True, help_text='CDELT1: image scale in the x direction', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='CDELT2: image scale in the y direction', null=True, verbose_name='CDELT2')),
                ('crln_obs', models.FloatField(blank=True, help_text='Carrington longitude of the observer', null=True, verbose_name='CRLN_OBS')),
                ('crlt_obs', models.FloatField(blank=True, help_text='Carrington latitude of the observer', null=True, verbose_name='CRLT_OBS')),
                ('crota2', models.FloatField(blank=True, help_text='CROTA2: INST_ROT + SAT_ROT', null=True, verbose_name='CROTA2')),
                ('crpix1', models.FloatField(blank=True, help_text='CRPIX1: location of sun center in CCD x direction', null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, help_text='CRPIX2: location of sun center in CCD y direction', null=True, verbose_name='CRPIX2')),
                ('crval1', models.FloatField(blank=True, help_text='CRVAL1: image scale in the x direction', null=True, verbose_name='CRVAL1')),
                ('crval2', models.FloatField(blank=True, help_text='CRVAL2: image scale in the x direction', null=True, verbose_name='CRVAL2')),
                ('ctype1', models.TextField(blank=True, help_text='CTYPE1; Typically HPLN-TAN (SOLARX)', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='CTYPE2; Typically HPLT-TAN (SOLARY)', null=True, verbose_name='CTYPE2')),
                ('cunit1', models.TextField(blank=True, help_text='CUNIT1; Typically arcsec', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='CUNIT2; Typically arcsec', null=True, verbose_name='CUNIT2')),
                ('datacent', models.FloatField(blank=True, help_text='Median value of center column of the image', null=True, verbose_name='DATACENT')),
                ('datakurt', models.FloatField(blank=True, help_text='Kurtosis of all pixels', null=True, verbose_name='DATAKURT')),
                ('datamax', models.IntegerField(blank=True, help_text='Maximum value of all pixels', null=True, verbose_name='DATAMAX')),
                ('datamean', models.FloatField(blank=True, help_text='Mean value of all pixels', null=True, verbose_name='DATAMEAN')),
                ('datamedn', models.IntegerField(blank=True, help_text='Median value of all pixels', null=True, verbose_name='DATAMEDN')),
                ('datamin', models.IntegerField(blank=True, help_text='Minimum value of all pixels', null=True, verbose_name='DATAMIN')),
                ('datap01', models.FloatField(blank=True, help_text='DATAP01', null=True, verbose_name='DATAP01')),
                ('datap10', models.FloatField(blank=True, help_text='DATAP10', null=True, verbose_name='DATAP10')),
                ('datap25', models.FloatField(blank=True, help_text='DATAP25', null=True, verbose_name='DATAP25')),
                ('datap75', models.FloatField(blank=True, help_text='DATAP75', null=True, verbose_name='DATAP75')),
                ('datap90', models.FloatField(blank=True, help_text='DATAP90', null=True, verbose_name='DATAP90')),
                ('datap95', models.FloatField(blank=True, help_text='DATAP95', null=True, verbose_name='DATAP95')),
                ('datap98', models.FloatField(blank=True, help_text='DATAP98', null=True, verbose_name='DATAP98')),
                ('datap99', models.FloatField(blank=True, help_text='DATAP99', null=True, verbose_name='DATAP99')),
                ('datarms', models.FloatField(blank=True, help_text='Rms deviation from the mean value of all pixels', null=True, verbose_name='DATARMS')),
                ('dataskew', models.FloatField(blank=True, help_text='Skewness from the mean value of all pixels', null=True, verbose_name='DATASKEW')),
                ('datavals', models.IntegerField(blank=True, help_text='Actual number of data values in image', null=True, verbose_name='DATAVALS')),
                ('date', models.DateTimeField(blank=True, help_text='Date_time of processing; ISO 8601', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text=' Date when observation started; ISO 8601', null=True, verbose_name='DATE-OBS')),
                ('dn_gain', models.FloatField(blank=True, help_text='DN/electron', null=True, verbose_name='DN_GAIN')),
                ('dsun_obs', models.FloatField(blank=True, help_text='Distance from SDO to Sun center', null=True, verbose_name='DSUN_OBS')),
                ('dsun_ref', models.FloatField(blank=True, help_text='Reference distance to Sun: 149,597,870,691.0 m', null=True, verbose_name='DSUN_REF')),
                ('eff_ar_v', models.FloatField(blank=True, help_text='version # for EFF_AREA and DN_GAIN', null=True, verbose_name='EFF_AR_V')),
                ('eff_area', models.FloatField(blank=True, help_text='effective area', null=True, verbose_name='EFF_AREA')),
                ('expsdev', models.FloatField(blank=True, help_text='Exposure standard deviation', null=True, verbose_name='EXPSDEV')),
                ('exptime', models.FloatField(blank=True, help_text='Exposure duration: mean shutter open time', null=True, verbose_name='EXPTIME')),
                ('fid', models.IntegerField(blank=True, help_text='FID Filtergram ID', null=True, verbose_name='FID')),
                ('flat_rec', models.TextField(blank=True, help_text='Flatfield series record pointer', null=True, verbose_name='FLAT_REC')),
                ('fsn', models.IntegerField(blank=True, help_text='FSN Filtergram Sequence Number', null=True, verbose_name='FSN')),
                ('gaex_obs', models.FloatField(blank=True, help_text='Geocentric Inertial X position', null=True, verbose_name='GAEX_OBS')),
                ('gaey_obs', models.FloatField(blank=True, help_text='Geocentric Inertial Y position', null=True, verbose_name='GAEY_OBS')),
                ('gaez_obs', models.FloatField(blank=True, help_text='Geocentric Inertial Z position', null=True, verbose_name='GAEZ_OBS')),
                ('haex_obs', models.FloatField(blank=True, help_text='Heliocentric Inertial X position', null=True, verbose_name='HAEX_OBS')),
                ('haey_obs', models.FloatField(blank=True, help_text='Heliocentric Inertial Y position', null=True, verbose_name='HAEY_OBS')),
                ('haez_obs', models.FloatField(blank=True, help_text='Heliocentric Inertial Z position', null=True, verbose_name='HAEZ_OBS')),
                ('hgln_obs', models.FloatField(blank=True, help_text='Stonyhurst heliographic longitude of the observer', null=True, verbose_name='HGLN_OBS')),
                ('hglt_obs', models.FloatField(blank=True, help_text='Stonyhurst heliographic latitude of the observer', null=True, verbose_name='HGLT_OBS')),
                ('img_type', models.TextField(blank=True, help_text='Image type: LIGHT or DARK', null=True, verbose_name='IMG_TYPE')),
                ('imscl_mp', models.FloatField(blank=True, help_text='Master pointing image scale', null=True, verbose_name='IMSCL_MP')),
                ('inst_rot', models.FloatField(blank=True, help_text='Master pointing CCD rotation wrt SDO Z axis', null=True, verbose_name='INST_ROT')),
                ('instrume', models.TextField(blank=True, help_text='For AIA: AIA_ATA1, AIA_ATA2, AIA_ATA3 or AIA_ATA4', null=True, verbose_name='INSTRUME')),
                ('int_time', models.FloatField(blank=True, help_text='CCD integration duration', null=True, verbose_name='INT_TIME')),
                ('isppktim', models.DateTimeField(blank=True, help_text='PACKET_TIME, Prime key value for the ISP record', null=True, verbose_name='ISPPKTIM')),
                ('isppktvn', models.TextField(blank=True, help_text='PACKET_VERSION_NUMBER', null=True, verbose_name='ISPPKTVN')),
                ('ispsname', models.TextField(blank=True, help_text='ISP SERIES NAME', null=True, verbose_name='ISPSNAME')),
                ('keywddoc', models.TextField(blank=True, help_text='AIA FITS keyword documentation', null=True, verbose_name='KEYWDDOC')),
                ('lvl_num', models.FloatField(blank=True, help_text='LVL_NUM data level number', null=True, verbose_name='LVL_NUM')),
                ('missvals', models.IntegerField(blank=True, help_text='Missing values: TOTVALS - DATAVALS', null=True, verbose_name='MISSVALS')),
                ('mpo_rec', models.TextField(blank=True, help_text='Master Pointing series record pointer', null=True, verbose_name='MPO_REC')),
                ('nsatpix', models.IntegerField(blank=True, help_text='Number of saturated pixels detected in image', null=True, verbose_name='NSATPIX')),
                ('nspikes', models.IntegerField(blank=True, help_text='Number of cosmic ray affected pixels detected in image', null=True, verbose_name='NSPIKES')),
                ('obs_vn', models.FloatField(blank=True, help_text='Speed of observer in solar-north direction', null=True, verbose_name='OBS_VN')),
                ('obs_vr', models.FloatField(blank=True, help_text='Speed of observer in radial direction', null=True, verbose_name='OBS_VR')),
                ('obs_vw', models.FloatField(blank=True, help_text='Speed of observer in solar-west direction', null=True, verbose_name='OBS_VW')),
                ('orb_rec', models.TextField(blank=True, help_text='Orbit vector series record pointer', null=True, verbose_name='ORB_REC')),
                ('origin', models.TextField(blank=True, help_text='ORIGIN Location where file made', null=True, verbose_name='ORIGIN')),
                ('oscnmean', models.FloatField(blank=True, help_text='Mean value of oversan rows', null=True, verbose_name='OSCNMEAN')),
                ('oscnrms', models.FloatField(blank=True, help_text='Rms deviation from the mean value of overscan rows', null=True, verbose_name='OSCNRMS')),
                ('percentd', models.FloatField(blank=True, help_text='Percent data; 100*DATAVALS/TOTVALS', null=True, verbose_name='PERCENTD')),
                ('pixlunit', models.TextField(blank=True, help_text='Pixel intensity unit', null=True, verbose_name='PIXLUNIT')),
                ('quality', models.IntegerField(blank=True, help_text='Level 1 Quality word', null=True, verbose_name='QUALITY')),
                ('quallev0', models.IntegerField(blank=True, help_text='Level 0 Quality word', null=True, verbose_name='QUALLEV0')),
                ('r_sun', models.FloatField(blank=True, help_text='Radius of the Sun in pixels on the CCD detector', null=True, verbose_name='R_SUN')),
                ('recnum', models.BigIntegerField(blank=True, help_text='JSOC Record Number', null=True, verbose_name='RECNUM')),
                ('roi_llx1', models.IntegerField(blank=True, help_text='CCD X location of lower left corner of ROI1', null=True, verbose_name='ROI_LLX1')),
                ('roi_llx2', models.IntegerField(blank=True, help_text='CCD X location of lower left corner of ROI2', null=True, verbose_name='ROI_LLX2')),
                ('roi_lly1', models.IntegerField(blank=True, help_text='CCD Y location of lower left corner of ROI1', null=True, verbose_name='ROI_LLY1')),
                ('roi_lly2', models.IntegerField(blank=True, help_text='CCD Y location of lower left corner of ROI2', null=True, verbose_name='ROI_LLY2')),
                ('roi_nax1', models.IntegerField(blank=True, help_text='Number of CCD columns for width of ROI1', null=True, verbose_name='ROI_NAX1')),
                ('roi_nax2', models.IntegerField(blank=True, help_text='Number of CCD columns for width of ROI2', null=True, verbose_name='ROI_NAX2')),
                ('roi_nay1', models.IntegerField(blank=True, help_text='Number of CCD rows for height of ROI1', null=True, verbose_name='ROI_NAY1')),
                ('roi_nay2', models.IntegerField(blank=True, help_text='Number of CCD rows for height of ROI2', null=True, verbose_name='ROI_NAY2')),
                ('roi_nwin', models.IntegerField(blank=True, help_text='Number of Windows for Region of Interest (ROI)', null=True, verbose_name='ROI_NWIN')),
                ('roi_sum', models.IntegerField(blank=True, help_text='Summing Mode: 1x1, 2x2, 4x4 (0,1,2)', null=True, verbose_name='ROI_SUM')),
                ('rsun_obs', models.FloatField(blank=True, help_text='Apparent radius of the Sun seen by SDO', null=True, verbose_name='RSUN_OBS')),
                ('rsun_ref', models.FloatField(blank=True, help_text='Reference radius of the Sun: 696,000,000.0 m', null=True, verbose_name='RSUN_REF')),
                ('sat_rot', models.FloatField(blank=True, help_text='Angle of solar pole wrt the SDO X axis', null=True, verbose_name='SAT_ROT')),
                ('sat_y0', models.FloatField(blank=True, help_text='Position of solar center wrt the SDO -Y axis', null=True, verbose_name='SAT_Y0')),
                ('sat_z0', models.FloatField(blank=True, help_text='Position of solar center wrt the SDO Z axis', null=True, verbose_name='SAT_Z0')),
                ('segment', models.TextField(blank=True, help_text='JSOC Segment File Name', null=True, verbose_name='SEGMENT')),
                ('series', models.TextField(blank=True, help_text='JSOC Series Name', null=True, verbose_name='SERIES')),
                ('slotnum', models.IntegerField(blank=True, help_text='JSOC Slot Number', null=True, verbose_name='SLOTNUM')),
                ('sunum', models.BigIntegerField(blank=True, help_text='JSOC Storage Unit Number', null=True, verbose_name='SUNUM')),
                ('t_obs', models.DateTimeField(blank=True, help_text='Observation time', null=True, verbose_name='T_OBS')),
                ('t_rec', models.DateTimeField(blank=True, help_text='Slotted observation time', null=True, verbose_name='T_REC')),
                ('telescop', models.TextField(blank=True, help_text='For AIA: SDO/AIA', null=True, verbose_name='TELESCOP')),
                ('tempccd', models.FloatField(blank=True, help_text='CCD temperature: CCD_HEADER1', null=True, verbose_name='TEMPCCD')),
                ('tempfpad', models.FloatField(blank=True, help_text='Focal plane assembly adapter temperature: FPA_ADAPTER', null=True, verbose_name='TEMPFPAD')),
                ('tempgt', models.FloatField(blank=True, help_text='Guide telescope temperature: GT_1', null=True, verbose_name='TEMPGT')),
                ('tempsmir', models.FloatField(blank=True, help_text='Secondary mirror temperature : SEC_MIRROR', null=True, verbose_name='TEMPSMIR')),
                ('totvals', models.IntegerField(blank=True, help_text='Expected number of data values (pixels)', null=True, verbose_name='TOTVALS')),
                ('wave_str', models.TextField(blank=True, help_text='Wavelength_FilterPosition', null=True, verbose_name='WAVE_STR')),
                ('wavelnth', models.IntegerField(blank=True, help_text='Wavelength', null=True, verbose_name='WAVELNTH')),
                ('waveunit', models.TextField(blank=True, help_text='Wavelength unit: angstrom', null=True, verbose_name='WAVEUNIT')),
                ('x0_mp', models.FloatField(blank=True, help_text='Master pointing X0 sun center in CCD frame', null=True, verbose_name='X0_MP')),
                ('y0_mp', models.FloatField(blank=True, help_text='Master pointing Y0 sun center in CCD frame', null=True, verbose_name='Y0_MP')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_aialevel1', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_aialevel1', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'AIA level 1',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
    ]
