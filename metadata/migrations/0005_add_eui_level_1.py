from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('dataset', '0001_initial'),
        ('metadata', '0004_add_eui_level_2'),
    ]

    operations = [
        migrations.CreateModel(
            name='EuiLevel1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('alu', models.BigIntegerField(blank=True, help_text='CEB ALU register', null=True, verbose_name='ALU')),
                ('alu2', models.BigIntegerField(blank=True, help_text='CEB ALU2 register', null=True, verbose_name='ALU2')),
                ('apid', models.BigIntegerField(blank=True, help_text='APID number of associated TM', null=True, verbose_name='APID')),
                ('att_skd', models.TextField(blank=True, help_text='attitude SKD version, +flown/+predicted', null=True, verbose_name='ATT_SKD')),
                ('badpxdef', models.BigIntegerField(blank=True, help_text='commanded bad pixel default', null=True, verbose_name='BADPXDEF')),
                ('badpxrem', models.TextField(blank=True, help_text='commanded bad pixel removal on or off', null=True, verbose_name='BADPXREM')),
                ('blank', models.BigIntegerField(blank=True, help_text='value undefined pixels before BSCALE,BZERO', null=True, verbose_name='BLANK')),
                ('bscale', models.BigIntegerField(blank=True, help_text='ratio of physical to array value at 0 offset', null=True, verbose_name='BSCALE')),
                ('btype', models.TextField(blank=True, help_text='type of data', null=True, verbose_name='BTYPE')),
                ('bunit', models.TextField(blank=True, help_text='units of physical value, after BSCALE, BZERO', null=True, verbose_name='BUNIT')),
                ('bzero', models.BigIntegerField(blank=True, help_text='physical value for the array value 0', null=True, verbose_name='BZERO')),
                ('car_rot', models.FloatField(blank=True, help_text='carrington rotation number', null=True, verbose_name='CAR_ROT')),
                ('cdelt1', models.FloatField(blank=True, help_text='pixel scale along axis 1', null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, help_text='pixel scale along axis 2', null=True, verbose_name='CDELT2')),
                ('combitpp', models.BigIntegerField(blank=True, help_text='WICOM compression bpp ( COMBITPP*0.04=bpp)', null=True, verbose_name='COMBITPP')),
                ('comp_rat', models.FloatField(blank=True, help_text='compression ratio: uncompressed/compressed size', null=True, verbose_name='COMP_RAT')),
                ('complete', models.TextField(blank=True, help_text='C or I for complete/incomplete', null=True, verbose_name='COMPLETE')),
                ('compress', models.TextField(blank=True, help_text='data compression quality (None/Lossless/Lossy)', null=True, verbose_name='COMPRESS')),
                ('comsize', models.BigIntegerField(blank=True, help_text='number of bytes onboard compressed image', null=True, verbose_name='COMSIZE')),
                ('comsplmd', models.TextField(blank=True, help_text='WICOM compression splitb3 mode', null=True, verbose_name='COMSPLMD')),
                ('comsplvl', models.BigIntegerField(blank=True, help_text='WICOM compression splitb3 value', null=True, verbose_name='COMSPLVL')),
                ('comstrip', models.TextField(blank=True, help_text='compression type: off=whole image; on=strip', null=True, verbose_name='COMSTRIP')),
                ('comweimd', models.TextField(blank=True, help_text='WICOM compression weighting mode', null=True, verbose_name='COMWEIMD')),
                ('comweivl', models.TextField(blank=True, help_text='WICOM sub-band coefficient', null=True, verbose_name='COMWEIVL')),
                ('creator', models.TextField(blank=True, help_text='fits creation software', null=True, verbose_name='CREATOR')),
                ('crln_obs', models.FloatField(blank=True, help_text='s/c Carrington longitude (L0 angle)', null=True, verbose_name='CRLN_OBS')),
                ('crlt_obs', models.FloatField(blank=True, help_text='s/c Carrington latitude (B0 angle)', null=True, verbose_name='CRLT_OBS')),
                ('crota', models.FloatField(blank=True, help_text='rotation angle', null=True, verbose_name='CROTA')),
                ('crpix1', models.FloatField(blank=True, help_text='reference pixel location along axis 1', null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, help_text='reference pixel location along axis 2', null=True, verbose_name='CRPIX2')),
                ('crrem', models.TextField(blank=True, help_text='cosmic ray removal on or off', null=True, verbose_name='CRREM')),
                ('crremlim', models.BigIntegerField(blank=True, help_text='cosmic ray limit', null=True, verbose_name='CRREMLIM')),
                ('crval1', models.FloatField(blank=True, help_text='value of reference pixel along axis 1', null=True, verbose_name='CRVAL1')),
                ('crval2', models.FloatField(blank=True, help_text='value of reference pixel along axis 2', null=True, verbose_name='CRVAL2')),
                ('ctype1', models.TextField(blank=True, help_text='helioprojective longitude (Solar X)', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='helioprojective latitude (Solar Y)', null=True, verbose_name='CTYPE2')),
                ('cunit1', models.TextField(blank=True, help_text='units along axis 1', null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, help_text='units along axis 2', null=True, verbose_name='CUNIT2')),
                ('datamax', models.BigIntegerField(blank=True, help_text='maximum valid physical value', null=True, verbose_name='DATAMAX')),
                ('datamean', models.FloatField(blank=True, help_text='average pixel value across the image', null=True, verbose_name='DATAMEAN')),
                ('datamin', models.BigIntegerField(blank=True, help_text='minimum valid physical value', null=True, verbose_name='DATAMIN')),
                ('date', models.DateTimeField(blank=True, help_text='FITS file creation date', null=True, verbose_name='DATE')),
                ('date_avg', models.DateTimeField(blank=True, help_text='average time of observation', null=True, verbose_name='DATE-AVG')),
                ('date_ear', models.DateTimeField(blank=True, help_text='start time of observation Earth', null=True, verbose_name='DATE_EAR')),
                ('date_obs', models.DateTimeField(blank=True, help_text='deprecated, same as DATE-BEG.', null=True, verbose_name='DATE-OBS')),
                ('date_sun', models.DateTimeField(blank=True, help_text='start time of observation Sun', null=True, verbose_name='DATE_SUN')),
                ('detector', models.TextField(blank=True, help_text='instrument subunit or sensor', null=True, verbose_name='DETECTOR')),
                ('detgainh', models.FloatField(blank=True, help_text='commanded high-gain value', null=True, verbose_name='DETGAINH')),
                ('detgainl', models.FloatField(blank=True, help_text='commanded low gain value', null=True, verbose_name='DETGAINL')),
                ('detreg20', models.BigIntegerField(blank=True, help_text='REG20_VDAC_CLIPP', null=True, verbose_name='DETREG20')),
                ('detreg21', models.BigIntegerField(blank=True, help_text='REG21_VDAC_OFFSETP', null=True, verbose_name='DETREG21')),
                ('detreg22', models.BigIntegerField(blank=True, help_text='REG22_VDAC_CMREF', null=True, verbose_name='DETREG22')),
                ('detreg23', models.BigIntegerField(blank=True, help_text='REG23_VDAC_OFFSETN', null=True, verbose_name='DETREG23')),
                ('detreg24', models.BigIntegerField(blank=True, help_text='REG24_VDAC_CLIPN', null=True, verbose_name='DETREG24')),
                ('detreg25', models.BigIntegerField(blank=True, help_text='REG25_VDAC_CMREF_LV', null=True, verbose_name='DETREG25')),
                ('detreg26', models.BigIntegerField(blank=True, help_text='REG26_IDAC_CDSSTAGE2_3', null=True, verbose_name='DETREG26')),
                ('detreg27', models.BigIntegerField(blank=True, help_text='REG27_IDAC_CDSSTAGE1_COMPA', null=True, verbose_name='DETREG27')),
                ('detreg28', models.BigIntegerField(blank=True, help_text='REG28_IDAC_INVBUFFER_REFBU', null=True, verbose_name='DETREG28')),
                ('detreg29', models.BigIntegerField(blank=True, help_text='REG29_IDAC_COLBUFFER_COLBU', null=True, verbose_name='DETREG29')),
                ('detreg2a', models.BigIntegerField(blank=True, help_text='REG2A_IDAC_COLPC_COLGAINST', null=True, verbose_name='DETREG2A')),
                ('detreg2b', models.BigIntegerField(blank=True, help_text='REG2B_IDAC_OUTPUTDRIVER_CO', null=True, verbose_name='DETREG2B')),
                ('detreg2c', models.BigIntegerField(blank=True, help_text='REG2C_VDAC_BLACKSUN_EVEN', null=True, verbose_name='DETREG2C')),
                ('detreg2d', models.BigIntegerField(blank=True, help_text='REG2D_IDAC_ABS_REBUFF_TEMP', null=True, verbose_name='DETREG2D')),
                ('detreg2e', models.BigIntegerField(blank=True, help_text='REG2E_COLGAIN_EVEN_FF_MID', null=True, verbose_name='DETREG2E')),
                ('detreg2f', models.BigIntegerField(blank=True, help_text='REG2F_COLGAIN_EVEN_FF_LOW', null=True, verbose_name='DETREG2F')),
                ('detreg30', models.BigIntegerField(blank=True, help_text='REG30_COLGAIN_EVEN_FB_MID', null=True, verbose_name='DETREG30')),
                ('detreg31', models.BigIntegerField(blank=True, help_text='REG31_COLGAIN_EVEN_FB_LOW', null=True, verbose_name='DETREG31')),
                ('detreg32', models.BigIntegerField(blank=True, help_text='REG32_COLGAIN_EVEN_FB_HIGH', null=True, verbose_name='DETREG32')),
                ('detreg33', models.BigIntegerField(blank=True, help_text='REG33_COLGAIN_ODD_FF_MID', null=True, verbose_name='DETREG33')),
                ('detreg34', models.BigIntegerField(blank=True, help_text='REG34_COLGAIN_ODD_FF_LOW', null=True, verbose_name='DETREG34')),
                ('detreg35', models.BigIntegerField(blank=True, help_text='REG35_COLGAIN_ODD_FB_MID', null=True, verbose_name='DETREG35')),
                ('detreg36', models.BigIntegerField(blank=True, help_text='REG36_COLGAIN_ODD_FB_LOW', null=True, verbose_name='DETREG36')),
                ('detreg37', models.BigIntegerField(blank=True, help_text='REG37_COLGAIN_VDAC_SIGCLAM', null=True, verbose_name='DETREG37')),
                ('detreg38', models.BigIntegerField(blank=True, help_text='REG38_CDS_EN_SAMPLE_CLOCK_', null=True, verbose_name='DETREG38')),
                ('detreg39', models.BigIntegerField(blank=True, help_text='REG39_MBS_PIXCOL_ADDR_LOW', null=True, verbose_name='DETREG39')),
                ('detreg3a', models.BigIntegerField(blank=True, help_text='REG3A_MBS_PIXCOL_ADDR_HIGH', null=True, verbose_name='DETREG3A')),
                ('detreg3b', models.BigIntegerField(blank=True, help_text='REG3B_MBS_MUXBUS_SR_EOSX_S', null=True, verbose_name='DETREG3B')),
                ('detreg3c', models.BigIntegerField(blank=True, help_text='REG3C_VDAC_SIGC_LAMP_BLACK', null=True, verbose_name='DETREG3C')),
                ('detreg3d', models.BigIntegerField(blank=True, help_text='REG3D_XWIN_ADDRESS', null=True, verbose_name='DETREG3D')),
                ('detreg3e', models.BigIntegerField(blank=True, help_text='REG3E_VDAC_BUSCLAMPHIGH', null=True, verbose_name='DETREG3E')),
                ('detreg3f', models.BigIntegerField(blank=True, help_text='REG3F_VDAC_BUSCLAMPLOW', null=True, verbose_name='DETREG3F')),
                ('doorext', models.TextField(blank=True, help_text='external HS Door', null=True, verbose_name='DOOREXT')),
                ('doorint', models.TextField(blank=True, help_text='internal door position', null=True, verbose_name='DOORINT')),
                ('doorpos', models.BigIntegerField(blank=True, help_text='Door position (raw) = open', null=True, verbose_name='DOORPOS')),
                ('downloam', models.BigIntegerField(blank=True, help_text='commanded FEE download mode', null=True, verbose_name='DOWNLOAM')),
                ('dsun_au', models.FloatField(blank=True, help_text='s/c distance from Sun', null=True, verbose_name='DSUN_AU')),
                ('dsun_obs', models.FloatField(blank=True, help_text='s/c distance from Sun', null=True, verbose_name='DSUN_OBS')),
                ('ear_tdel', models.FloatField(blank=True, help_text='Time(Sun to Earth) - Time(Sun to S/C)', null=True, verbose_name='EAR_TDEL')),
                ('euxcen', models.FloatField(blank=True, help_text='axis 1 location of solar center in L1', null=True, verbose_name='EUXCEN')),
                ('euycen', models.FloatField(blank=True, help_text='axis 2 location of solar center in L1', null=True, verbose_name='EUYCEN')),
                ('extend', models.BooleanField(blank=True, help_text='F = no extensions T = extension(s)', null=True, verbose_name='EXTEND')),
                ('filcpos', models.BigIntegerField(blank=True, help_text='filter wheel commanded position', null=True, verbose_name='FILCPOS')),
                ('file_raw', models.TextField(blank=True, help_text='raw filename', null=True, verbose_name='FILE_RAW')),
                ('filename', models.TextField(blank=True, help_text='FITS filename', null=True, verbose_name='FILENAME')),
                ('filter', models.TextField(blank=True, help_text='physical filter during acquisition', null=True, verbose_name='FILTER')),
                ('filtpos', models.BigIntegerField(blank=True, help_text='(0-199) filter wheel position determ. from tm5', null=True, verbose_name='FILTPOS')),
                ('gaincomb', models.TextField(blank=True, help_text='commanded low/high gain combination', null=True, verbose_name='GAINCOMB')),
                ('gainhg', models.BigIntegerField(blank=True, help_text='global gain corr. high gain', null=True, verbose_name='GAINHG')),
                ('gainlg', models.BigIntegerField(blank=True, help_text='global gain corr. low gain', null=True, verbose_name='GAINLG')),
                ('gainthre', models.BigIntegerField(blank=True, help_text='commanded threshold value for H/L gain', null=True, verbose_name='GAINTHRE')),
                ('gaofstat', models.TextField(blank=True, help_text='status of the CEB gain and offset correction', null=True, verbose_name='GAOFSTAT')),
                ('gsex_obs', models.FloatField(blank=True, help_text='s/c Geocentric Solar Ecliptic X', null=True, verbose_name='GSEX_OBS')),
                ('gsey_obs', models.FloatField(blank=True, help_text='s/c Geocentric Solar Ecliptic Y', null=True, verbose_name='GSEY_OBS')),
                ('gsez_obs', models.FloatField(blank=True, help_text='s/c Geocentric Solar Ecliptic Z', null=True, verbose_name='GSEZ_OBS')),
                ('haex_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Aries Ecliptic X', null=True, verbose_name='HAEX_OBS')),
                ('haey_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Aries Ecliptic Y', null=True, verbose_name='HAEY_OBS')),
                ('haez_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Aries Ecliptic Z', null=True, verbose_name='HAEZ_OBS')),
                ('hcix_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Inertial X', null=True, verbose_name='HCIX_OBS')),
                ('hcix_vob', models.FloatField(blank=True, help_text='s/c Heliocentric Inertial X Velocity', null=True, verbose_name='HCIX_VOB')),
                ('hciy_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Inertial Y', null=True, verbose_name='HCIY_OBS')),
                ('hciy_vob', models.FloatField(blank=True, help_text='s/c Heliocentric Inertial Y Velocity', null=True, verbose_name='HCIY_VOB')),
                ('hciz_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Inertial Z', null=True, verbose_name='HCIZ_OBS')),
                ('hciz_vob', models.FloatField(blank=True, help_text='s/c Heliocentric Inertial Z Velocity', null=True, verbose_name='HCIZ_VOB')),
                ('heex_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Ecliptic X', null=True, verbose_name='HEEX_OBS')),
                ('heey_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Ecliptic Y', null=True, verbose_name='HEEY_OBS')),
                ('heez_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Ecliptic Z', null=True, verbose_name='HEEZ_OBS')),
                ('heqx_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Equatorial X', null=True, verbose_name='HEQX_OBS')),
                ('heqy_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Equatorial Y', null=True, verbose_name='HEQY_OBS')),
                ('heqz_obs', models.FloatField(blank=True, help_text='s/c Heliocentric Earth Equatorial Z', null=True, verbose_name='HEQZ_OBS')),
                ('hgln_obs', models.FloatField(blank=True, help_text='s/c Heliographic longitude', null=True, verbose_name='HGLN_OBS')),
                ('hglt_obs', models.FloatField(blank=True, help_text='s/c Heliographic latitude (B0 angle)', null=True, verbose_name='HGLT_OBS')),
                ('imgtype', models.TextField(blank=True, help_text='type of image; solar, calib., engineering', null=True, verbose_name='IMGTYPE')),
                ('info_url', models.TextField(blank=True, help_text='Link to additional information', null=True, verbose_name='INFO_URL')),
                ('instrume', models.TextField(blank=True, help_text='instrument name', null=True, verbose_name='INSTRUME')),
                ('jobid', models.TextField(blank=True, help_text='unique pipeline job ID', null=True, verbose_name='JOBID')),
                ('ledstate', models.TextField(blank=True, help_text='LED control for current telescope', null=True, verbose_name='LEDSTATE')),
                ('level', models.TextField(blank=True, help_text='data processing level', null=True, verbose_name='LEVEL')),
                ('longstrn', models.TextField(blank=True, help_text='The OGIP long string convention may be used', null=True, verbose_name='LONGSTRN')),
                ('lonpole', models.FloatField(blank=True, help_text='native longitude of the celestial pole', null=True, verbose_name='LONPOLE')),
                ('lyacmcp', models.FloatField(blank=True, help_text='commanded MCP voltage', null=True, verbose_name='LYACMCP')),
                ('lyacscr', models.FloatField(blank=True, help_text='commanded screen voltage', null=True, verbose_name='LYACSCR')),
                ('lyaimcp', models.FloatField(blank=True, help_text='measured MCP current', null=True, verbose_name='LYAIMCP')),
                ('lyavmcp', models.FloatField(blank=True, help_text='measured MCP voltage', null=True, verbose_name='LYAVMCP')),
                ('lyavscr', models.FloatField(blank=True, help_text='measured MCP+screen voltage', null=True, verbose_name='LYAVSCR')),
                ('naxis', models.BigIntegerField(blank=True, help_text='number of axes in data cube', null=True, verbose_name='NAXIS')),
                ('naxis1', models.BigIntegerField(blank=True, help_text='length of data axis 1', null=True, verbose_name='NAXIS1')),
                ('naxis2', models.BigIntegerField(blank=True, help_text='length of data axis 2', null=True, verbose_name='NAXIS2')),
                ('nbin', models.BigIntegerField(blank=True, help_text='total binning factor', null=True, verbose_name='NBIN')),
                ('nbin1', models.BigIntegerField(blank=True, help_text='on-board binning factor in dim 1', null=True, verbose_name='NBIN1')),
                ('nbin2', models.BigIntegerField(blank=True, help_text='on-board binning factor in dim 1', null=True, verbose_name='NBIN2')),
                ('obs_id', models.TextField(blank=True, help_text='unique ID of the individual observation', null=True, verbose_name='OBS_ID')),
                ('obs_mode', models.TextField(blank=True, help_text='observation mode', null=True, verbose_name='OBS_MODE')),
                ('obs_type', models.TextField(blank=True, help_text='encoded version of OBS_MODE', null=True, verbose_name='OBS_TYPE')),
                ('obs_vr', models.FloatField(blank=True, help_text='Radial velocity of S/C relative to Sun', null=True, verbose_name='OBS_VR')),
                ('obsrvtry', models.TextField(blank=True, help_text='satellite name', null=True, verbose_name='OBSRVTRY')),
                ('obt_beg', models.FloatField(blank=True, help_text='start acquisition time in OBT', null=True, verbose_name='OBT_BEG')),
                ('offsethg', models.BigIntegerField(blank=True, help_text='global offset corr. high gain', null=True, verbose_name='OFFSETHG')),
                ('offsetlg', models.BigIntegerField(blank=True, help_text='global offset corr. low gain', null=True, verbose_name='OFFSETLG')),
                ('origin', models.TextField(blank=True, help_text='file generation location', null=True, verbose_name='ORIGIN')),
                ('parent', models.TextField(blank=True, help_text='source file', null=True, verbose_name='PARENT')),
                ('pc1_1', models.FloatField(blank=True, help_text='WCS coordinate transformation matrix', null=True, verbose_name='PC1_1')),
                ('pc1_2', models.FloatField(blank=True, help_text='WCS coordinate transformation matrix', null=True, verbose_name='PC1_2')),
                ('pc2_1', models.FloatField(blank=True, help_text='WCS coordinate transformation matrix', null=True, verbose_name='PC2_1')),
                ('pc2_2', models.FloatField(blank=True, help_text='WCS coordinate transformation matrix', null=True, verbose_name='PC2_2')),
                ('priority', models.BigIntegerField(blank=True, help_text='priority # of image/histogram when downloaded', null=True, verbose_name='PRIORITY')),
                ('pxbeg1', models.BigIntegerField(blank=True, help_text='first read-out pixel in dimension 1', null=True, verbose_name='PXBEG1')),
                ('pxbeg2', models.BigIntegerField(blank=True, help_text='first read-out pixel in dimension 2', null=True, verbose_name='PXBEG2')),
                ('pxend1', models.BigIntegerField(blank=True, help_text='last read-out pixel in dimension 1', null=True, verbose_name='PXEND1')),
                ('pxend2', models.BigIntegerField(blank=True, help_text='last read-out pixel in dimension 2', null=True, verbose_name='PXEND2')),
                ('readoutm', models.BigIntegerField(blank=True, help_text='commanded FEE readout mode', null=True, verbose_name='READOUTM')),
                ('rechigh', models.BigIntegerField(blank=True, help_text='rec. threshold high(clipped 2^RECNRBIT-1)', null=True, verbose_name='RECHIGH')),
                ('reclow', models.BigIntegerField(blank=True, help_text='rec. threshold low (clipped 0)', null=True, verbose_name='RECLOW')),
                ('recnrbit', models.BigIntegerField(blank=True, help_text='bit depth recoding output (sqrt)', null=True, verbose_name='RECNRBIT')),
                ('recstate', models.TextField(blank=True, help_text='recoding on or off', null=True, verbose_name='RECSTATE')),
                ('rsun_arc', models.FloatField(blank=True, help_text='apparent photospheric solar radius', null=True, verbose_name='RSUN_ARC')),
                ('rsun_obs', models.FloatField(blank=True, help_text='apparent photospheric solar radius', null=True, verbose_name='RSUN_OBS')),
                ('rsun_ref', models.BigIntegerField(blank=True, help_text='assumed physical solar radius', null=True, verbose_name='RSUN_REF')),
                ('scitabid', models.BigIntegerField(blank=True, help_text='exposure identifier in sec. science table', null=True, verbose_name='SCITABID')),
                ('scitabnr', models.BigIntegerField(blank=True, help_text='sequential number of SCITABID', null=True, verbose_name='SCITABNR')),
                ('solar_b0', models.FloatField(blank=True, help_text='s/c tilt of solar North pole', null=True, verbose_name='SOLAR_B0')),
                ('solar_ep', models.FloatField(blank=True, help_text='s/c ecliptic North to solar North angle', null=True, verbose_name='SOLAR_EP')),
                ('solar_p0', models.FloatField(blank=True, help_text='s/c celestial North to solar North angle', null=True, verbose_name='SOLAR_P0')),
                ('soopname', models.TextField(blank=True, help_text='name of the SOOP Campaign that the data belong', null=True, verbose_name='SOOPNAME')),
                ('sooptype', models.TextField(blank=True, help_text='campaign ID(s) that the data belong to', null=True, verbose_name='SOOPTYPE')),
                ('sun_time', models.FloatField(blank=True, help_text='Time(Sun to S/C)', null=True, verbose_name='SUN_TIME')),
                ('target', models.TextField(blank=True, help_text='type of target from planning', null=True, verbose_name='TARGET')),
                ('telescop', models.TextField(blank=True, help_text='telescope/Sensor name', null=True, verbose_name='TELESCOP')),
                ('temp1det', models.FloatField(blank=True, help_text='last measured APS det. T before date-avg', null=True, verbose_name='TEMP1DET')),
                ('temp2det', models.FloatField(blank=True, help_text='earliest measured APS det. T after date-avg', null=True, verbose_name='TEMP2DET')),
                ('tempint', models.FloatField(blank=True, help_text='internal APS detector temperature', null=True, verbose_name='TEMPINT')),
                ('timesys', models.TextField(blank=True, help_text='system used for time keywords', null=True, verbose_name='TIMESYS')),
                ('ttemp1', models.DateTimeField(blank=True, help_text='time TEMP1DET measurement', null=True, verbose_name='TTEMP1')),
                ('ttemp2', models.DateTimeField(blank=True, help_text='time TEMP2DET measurement', null=True, verbose_name='TTEMP2')),
                ('ucd', models.TextField(blank=True, help_text='Unified Content Descriptor', null=True, verbose_name='UCD')),
                ('vers_sw', models.DateTimeField(blank=True, help_text='version of SW that provided FITS file', null=True, verbose_name='VERS_SW')),
                ('version', models.DateTimeField(blank=True, help_text='incremental version number', null=True, verbose_name='VERSION')),
                ('wavelnth', models.BigIntegerField(blank=True, help_text='characteristic wavelength of observation', null=True, verbose_name='WAVELNTH')),
                ('wcsname', models.TextField(blank=True, help_text='name of coordinate system', null=True, verbose_name='WCSNAME')),
                ('xposure', models.FloatField(blank=True, help_text='total effective exposure time', null=True, verbose_name='XPOSURE')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_euilevel1', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_euilevel1', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'EUI level 1 metadata',
                'verbose_name_plural': 'EUI level 1 metadata',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
    ]
