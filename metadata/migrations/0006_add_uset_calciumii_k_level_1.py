from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('dataset', '0001_initial'),
        ('metadata', '0005_add_eui_level_1'),
    ]

    operations = [
        migrations.CreateModel(
            name='UsetCalciumiiKLevel1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('oid', models.TextField(db_index=True, help_text='Unique identification string for the observation metadata, usually in the form YYYYMMDDHHMMSS; cannot be modified once it is set', unique=True, verbose_name='Observation ID')),
                ('fits_header', models.TextField(blank=True, null=True)),
                ('date_beg', models.DateTimeField(blank=True, db_index=True, help_text='Start time of the observation [UTC]', null=True, verbose_name='DATE-BEG')),
                ('date_end', models.DateTimeField(blank=True, db_index=True, help_text='End time of the observation [UTC]', null=True, verbose_name='DATE-END')),
                ('wavemin', models.FloatField(blank=True, db_index=True, help_text='Min value of the observation spectral range [nm]', null=True, verbose_name='WAVEMIN')),
                ('wavemax', models.FloatField(blank=True, db_index=True, help_text='Max value of the observation spectral range [nm]', null=True, verbose_name='WAVEMAX')),
                ('bscale', models.BigIntegerField(blank=True, help_text='To be multiplied to the data array values', null=True, verbose_name='BSCALE')),
                ('btype', models.TextField(blank=True, null=True, verbose_name='BTYPE')),
                ('bunit', models.TextField(blank=True, null=True, verbose_name='BUNIT')),
                ('bzero', models.BigIntegerField(blank=True, help_text='To be added by the data array values', null=True, verbose_name='BZERO')),
                ('camera', models.TextField(blank=True, null=True, verbose_name='CAMERA')),
                ('cdelt1', models.FloatField(blank=True, null=True, verbose_name='CDELT1')),
                ('cdelt2', models.FloatField(blank=True, null=True, verbose_name='CDELT2')),
                ('center_x', models.FloatField(blank=True, null=True, verbose_name='CENTER_X')),
                ('center_y', models.FloatField(blank=True, null=True, verbose_name='CENTER_Y')),
                ('creator', models.TextField(blank=True, help_text='Name of software that produced the FITS file', null=True, verbose_name='CREATOR')),
                ('crota1', models.FloatField(blank=True, null=True, verbose_name='CROTA1')),
                ('crota2', models.FloatField(blank=True, null=True, verbose_name='CROTA2')),
                ('crpix1', models.FloatField(blank=True, null=True, verbose_name='CRPIX1')),
                ('crpix2', models.FloatField(blank=True, null=True, verbose_name='CRPIX2')),
                ('crval1', models.BigIntegerField(blank=True, null=True, verbose_name='CRVAL1')),
                ('crval2', models.BigIntegerField(blank=True, null=True, verbose_name='CRVAL2')),
                ('ctype1', models.TextField(blank=True, help_text='Helioproj. westward angle, TAN projection', null=True, verbose_name='CTYPE1')),
                ('ctype2', models.TextField(blank=True, help_text='Helioproj. northward angle, TAN projection', null=True, verbose_name='CTYPE2')),
                ('cunit1', models.TextField(blank=True, null=True, verbose_name='CUNIT1')),
                ('cunit2', models.TextField(blank=True, null=True, verbose_name='CUNIT2')),
                ('date', models.DateTimeField(blank=True, help_text='FITS file creation date', null=True, verbose_name='DATE')),
                ('date_obs', models.DateTimeField(blank=True, help_text='Same value as DATE-BEG', null=True, verbose_name='DATE-OBS')),
                ('extname', models.TextField(blank=True, null=True, verbose_name='EXTNAME')),
                ('filename', models.TextField(blank=True, null=True, verbose_name='FILENAME')),
                ('gain', models.BigIntegerField(blank=True, help_text='Normalized gain in mili-units', null=True, verbose_name='GAIN')),
                ('instrume', models.TextField(blank=True, null=True, verbose_name='INSTRUME')),
                ('level', models.BigIntegerField(blank=True, help_text='Data level of fits file', null=True, verbose_name='LEVEL')),
                ('naxis', models.BigIntegerField(blank=True, null=True, verbose_name='NAXIS')),
                ('naxis1', models.BigIntegerField(blank=True, null=True, verbose_name='NAXIS1')),
                ('naxis2', models.BigIntegerField(blank=True, null=True, verbose_name='NAXIS2')),
                ('obs_hdu', models.BigIntegerField(blank=True, null=True, verbose_name='OBS_HDU')),
                ('obs_mode', models.TextField(blank=True, help_text='Predefined settings used during obs.', null=True, verbose_name='OBS_MODE')),
                ('obsgeo_x', models.BigIntegerField(blank=True, help_text='ECEF X coord of the observer', null=True, verbose_name='OBSGEO-X')),
                ('obsgeo_y', models.BigIntegerField(blank=True, help_text='ECEF Y coord of the observer', null=True, verbose_name='OBSGEO-Y')),
                ('obsgeo_z', models.BigIntegerField(blank=True, help_text='ECEF Z coord of the observer', null=True, verbose_name='OBSGEO-Z')),
                ('obsrvtry', models.TextField(blank=True, null=True, verbose_name='OBSRVTRY')),
                ('origin', models.TextField(blank=True, null=True, verbose_name='ORIGIN')),
                ('prstep1', models.TextField(blank=True, help_text='First processing steps', null=True, verbose_name='PRSTEP1')),
                ('solar_p0', models.FloatField(blank=True, null=True, verbose_name='SOLAR_P0')),
                ('solar_r', models.FloatField(blank=True, null=True, verbose_name='SOLAR_R')),
                ('solarnet', models.BigIntegerField(blank=True, null=True, verbose_name='SOLARNET')),
                ('telescop', models.TextField(blank=True, null=True, verbose_name='TELESCOP')),
                ('vers_sw', models.DateTimeField(blank=True, help_text='Version of software applied', null=True, verbose_name='VERS_SW')),
                ('version', models.FloatField(blank=True, help_text='Pipeline version', null=True, verbose_name='VERSION')),
                ('waveban', models.TextField(blank=True, null=True, verbose_name='WAVEBAN')),
                ('wavelnth', models.FloatField(blank=True, help_text='characteristic wavelength of observation', null=True, verbose_name='WAVELNTH')),
                ('waveunit', models.BigIntegerField(blank=True, help_text='Power of 10 by which the metre is multiplied', null=True, verbose_name='WAVEUNIT')),
                ('xposure', models.FloatField(blank=True, help_text='Total exposure time', null=True, verbose_name='XPOSURE')),
                ('data_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metadata_usetcalciumiiklevel1', to='dataset.datalocation')),
                ('tags', models.ManyToManyField(blank=True, related_name='metadata_usetcalciumiiklevel1', to='metadata.Tag')),
            ],
            options={
                'verbose_name': 'USET CalciumII-K level 1 metadata',
                'verbose_name_plural': 'USET CalciumII-K level 1 metadata',
                'ordering': ['date_beg'],
                'abstract': False,
            },
        ),
    ]
